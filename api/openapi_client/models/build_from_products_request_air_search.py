# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import Field
from openapi_client.models.build_from_products_request_air import BuildFromProductsRequestAir
from openapi_client.models.custom_response_modifiers_air import CustomResponseModifiersAir
from openapi_client.models.passenger_criteria import PassengerCriteria
from openapi_client.models.pricing_modifiers_air import PricingModifiersAir
from openapi_client.models.product_criteria_air import ProductCriteriaAir
from openapi_client.models.search_modifiers_air import SearchModifiersAir

class BuildFromProductsRequestAirSearch(BuildFromProductsRequestAir):
    """
    BuildFromProductsRequestAirSearch
    """
    search_modifiers_air: Optional[SearchModifiersAir] = Field(None, alias="SearchModifiersAir")
    __properties = ["@type", "PricingModifiersAir", "PassengerCriteria", "ProductCriteriaAir", "CustomResponseModifiersAir", "SearchModifiersAir"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BuildFromProductsRequestAirSearch:
        """Create an instance of BuildFromProductsRequestAirSearch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of pricing_modifiers_air
        if self.pricing_modifiers_air:
            _dict['PricingModifiersAir'] = self.pricing_modifiers_air.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in passenger_criteria (list)
        _items = []
        if self.passenger_criteria:
            for _item in self.passenger_criteria:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PassengerCriteria'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product_criteria_air (list)
        _items = []
        if self.product_criteria_air:
            for _item in self.product_criteria_air:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ProductCriteriaAir'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_response_modifiers_air (list)
        _items = []
        if self.custom_response_modifiers_air:
            for _item in self.custom_response_modifiers_air:
                if _item:
                    _items.append(_item.to_dict())
            _dict['CustomResponseModifiersAir'] = _items
        # override the default output from pydantic by calling `to_dict()` of search_modifiers_air
        if self.search_modifiers_air:
            _dict['SearchModifiersAir'] = self.search_modifiers_air.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BuildFromProductsRequestAirSearch:
        """Create an instance of BuildFromProductsRequestAirSearch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BuildFromProductsRequestAirSearch.parse_obj(obj)

        _obj = BuildFromProductsRequestAirSearch.parse_obj({
            "type": obj.get("@type"),
            "pricing_modifiers_air": PricingModifiersAir.from_dict(obj.get("PricingModifiersAir")) if obj.get("PricingModifiersAir") is not None else None,
            "passenger_criteria": [PassengerCriteria.from_dict(_item) for _item in obj.get("PassengerCriteria")] if obj.get("PassengerCriteria") is not None else None,
            "product_criteria_air": [ProductCriteriaAir.from_dict(_item) for _item in obj.get("ProductCriteriaAir")] if obj.get("ProductCriteriaAir") is not None else None,
            "custom_response_modifiers_air": [CustomResponseModifiersAir.from_dict(_item) for _item in obj.get("CustomResponseModifiersAir")] if obj.get("CustomResponseModifiersAir") is not None else None,
            "search_modifiers_air": SearchModifiersAir.from_dict(obj.get("SearchModifiersAir")) if obj.get("SearchModifiersAir") is not None else None
        })
        return _obj


