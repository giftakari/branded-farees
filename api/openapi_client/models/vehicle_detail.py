# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import Field
from openapi_client.models.code import Code
from openapi_client.models.image import Image
from openapi_client.models.vehicle import Vehicle
from openapi_client.models.vehicle_date_location import VehicleDateLocation
from openapi_client.models.vehicle_make_model import VehicleMakeModel

class VehicleDetail(Vehicle):
    """
    VehicleDetail
    """
    vehicle_date_location: Optional[VehicleDateLocation] = Field(None, alias="VehicleDateLocation")
    __properties = ["@type", "baggageQuantity", "passengerQuantity", "doorCount", "Image", "VehicleMakeModel", "TransmissionTypeCode", "VehicleCategoryCode", "FuelTypeCode", "VehicleSizeCode", "VehicleClassCode", "airConditioningInd", "VehicleDateLocation"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VehicleDetail:
        """Create an instance of VehicleDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['Image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vehicle_make_model
        if self.vehicle_make_model:
            _dict['VehicleMakeModel'] = self.vehicle_make_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transmission_type_code
        if self.transmission_type_code:
            _dict['TransmissionTypeCode'] = self.transmission_type_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vehicle_category_code
        if self.vehicle_category_code:
            _dict['VehicleCategoryCode'] = self.vehicle_category_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fuel_type_code
        if self.fuel_type_code:
            _dict['FuelTypeCode'] = self.fuel_type_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vehicle_size_code
        if self.vehicle_size_code:
            _dict['VehicleSizeCode'] = self.vehicle_size_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vehicle_class_code
        if self.vehicle_class_code:
            _dict['VehicleClassCode'] = self.vehicle_class_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vehicle_date_location
        if self.vehicle_date_location:
            _dict['VehicleDateLocation'] = self.vehicle_date_location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VehicleDetail:
        """Create an instance of VehicleDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VehicleDetail.parse_obj(obj)

        _obj = VehicleDetail.parse_obj({
            "type": obj.get("@type"),
            "baggage_quantity": obj.get("baggageQuantity"),
            "passenger_quantity": obj.get("passengerQuantity"),
            "door_count": obj.get("doorCount"),
            "image": Image.from_dict(obj.get("Image")) if obj.get("Image") is not None else None,
            "vehicle_make_model": VehicleMakeModel.from_dict(obj.get("VehicleMakeModel")) if obj.get("VehicleMakeModel") is not None else None,
            "transmission_type_code": Code.from_dict(obj.get("TransmissionTypeCode")) if obj.get("TransmissionTypeCode") is not None else None,
            "vehicle_category_code": Code.from_dict(obj.get("VehicleCategoryCode")) if obj.get("VehicleCategoryCode") is not None else None,
            "fuel_type_code": Code.from_dict(obj.get("FuelTypeCode")) if obj.get("FuelTypeCode") is not None else None,
            "vehicle_size_code": Code.from_dict(obj.get("VehicleSizeCode")) if obj.get("VehicleSizeCode") is not None else None,
            "vehicle_class_code": Code.from_dict(obj.get("VehicleClassCode")) if obj.get("VehicleClassCode") is not None else None,
            "air_conditioning_ind": obj.get("airConditioningInd"),
            "vehicle_date_location": VehicleDateLocation.from_dict(obj.get("VehicleDateLocation")) if obj.get("VehicleDateLocation") is not None else None
        })
        return _obj


