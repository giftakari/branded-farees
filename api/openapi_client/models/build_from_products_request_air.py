# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import Field, conlist
from openapi_client.models.build_from_products_request import BuildFromProductsRequest
from openapi_client.models.custom_response_modifiers_air import CustomResponseModifiersAir
from openapi_client.models.passenger_criteria import PassengerCriteria
from openapi_client.models.pricing_modifiers_air import PricingModifiersAir
from openapi_client.models.product_criteria_air import ProductCriteriaAir

class BuildFromProductsRequestAir(BuildFromProductsRequest):
    """
    BuildFromProductsRequestAir
    """
    pricing_modifiers_air: PricingModifiersAir = Field(..., alias="PricingModifiersAir")
    passenger_criteria: conlist(PassengerCriteria, max_items=10, min_items=1) = Field(..., alias="PassengerCriteria")
    product_criteria_air: conlist(ProductCriteriaAir, max_items=10, min_items=1) = Field(..., alias="ProductCriteriaAir")
    custom_response_modifiers_air: Optional[conlist(CustomResponseModifiersAir)] = Field(None, alias="CustomResponseModifiersAir")
    __properties = ["@type", "PricingModifiersAir", "PassengerCriteria", "ProductCriteriaAir", "CustomResponseModifiersAir"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = '@type'

    # discriminator mappings
    __discriminator_value_class_map = {
        'BuildFromProductsRequestAirSearch': 'BuildFromProductsRequestAirSearch'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(BuildFromProductsRequestAirSearch):
        """Create an instance of BuildFromProductsRequestAir from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of pricing_modifiers_air
        if self.pricing_modifiers_air:
            _dict['PricingModifiersAir'] = self.pricing_modifiers_air.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in passenger_criteria (list)
        _items = []
        if self.passenger_criteria:
            for _item in self.passenger_criteria:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PassengerCriteria'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product_criteria_air (list)
        _items = []
        if self.product_criteria_air:
            for _item in self.product_criteria_air:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ProductCriteriaAir'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_response_modifiers_air (list)
        _items = []
        if self.custom_response_modifiers_air:
            for _item in self.custom_response_modifiers_air:
                if _item:
                    _items.append(_item.to_dict())
            _dict['CustomResponseModifiersAir'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(BuildFromProductsRequestAirSearch):
        """Create an instance of BuildFromProductsRequestAir from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("BuildFromProductsRequestAir failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.build_from_products_request_air_search import BuildFromProductsRequestAirSearch
BuildFromProductsRequestAir.update_forward_refs()

