# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, StrictBool, conlist, constr
from openapi_client.models.amenity_surcharges_detail import AmenitySurchargesDetail
from openapi_client.models.amount import Amount
from openapi_client.models.commission import Commission
from openapi_client.models.currency_amount import CurrencyAmount
from openapi_client.models.nightly_rate import NightlyRate
from openapi_client.models.price_breakdown import PriceBreakdown
from openapi_client.models.pricing_enum import PricingEnum

class PriceBreakdownHospitality(PriceBreakdown):
    """
    PriceBreakdownHospitality
    """
    room_pricing_type: Optional[PricingEnum] = Field(None, alias="roomPricingType")
    description: Optional[constr(strict=True, max_length=1024)] = Field(None, alias="Description")
    nightly_rate: Optional[conlist(NightlyRate, max_items=100)] = Field(None, alias="NightlyRate")
    average_nightly_rate: Optional[conlist(CurrencyAmount, max_items=2)] = Field(None, alias="AverageNightlyRate")
    amenity_surcharges: Optional[AmenitySurchargesDetail] = Field(None, alias="AmenitySurcharges")
    price_changes_during_stay_ind: Optional[StrictBool] = Field(None, alias="priceChangesDuringStayInd", description="If present and true, indicates the nightly price changes one or more times during the stay")
    __properties = ["@type", "Amount", "Commission", "roomPricingType", "Description", "NightlyRate", "AverageNightlyRate", "AmenitySurcharges", "priceChangesDuringStayInd"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PriceBreakdownHospitality:
        """Create an instance of PriceBreakdownHospitality from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['Amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of commission
        if self.commission:
            _dict['Commission'] = self.commission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in nightly_rate (list)
        _items = []
        if self.nightly_rate:
            for _item in self.nightly_rate:
                if _item:
                    _items.append(_item.to_dict())
            _dict['NightlyRate'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in average_nightly_rate (list)
        _items = []
        if self.average_nightly_rate:
            for _item in self.average_nightly_rate:
                if _item:
                    _items.append(_item.to_dict())
            _dict['AverageNightlyRate'] = _items
        # override the default output from pydantic by calling `to_dict()` of amenity_surcharges
        if self.amenity_surcharges:
            _dict['AmenitySurcharges'] = self.amenity_surcharges.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PriceBreakdownHospitality:
        """Create an instance of PriceBreakdownHospitality from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PriceBreakdownHospitality.parse_obj(obj)

        _obj = PriceBreakdownHospitality.parse_obj({
            "type": obj.get("@type"),
            "amount": Amount.from_dict(obj.get("Amount")) if obj.get("Amount") is not None else None,
            "commission": Commission.from_dict(obj.get("Commission")) if obj.get("Commission") is not None else None,
            "room_pricing_type": obj.get("roomPricingType"),
            "description": obj.get("Description"),
            "nightly_rate": [NightlyRate.from_dict(_item) for _item in obj.get("NightlyRate")] if obj.get("NightlyRate") is not None else None,
            "average_nightly_rate": [CurrencyAmount.from_dict(_item) for _item in obj.get("AverageNightlyRate")] if obj.get("AverageNightlyRate") is not None else None,
            "amenity_surcharges": AmenitySurchargesDetail.from_dict(obj.get("AmenitySurcharges")) if obj.get("AmenitySurcharges") is not None else None,
            "price_changes_during_stay_ind": obj.get("priceChangesDuringStayInd")
        })
        return _obj


