# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, conint, conlist, constr, validator
from openapi_client.models.advance_reservation import AdvanceReservation
from openapi_client.models.confirmed_status_enum import ConfirmedStatusEnum
from openapi_client.models.first_reservation import FirstReservation
from openapi_client.models.last_reservation import LastReservation
from openapi_client.models.waitlist_standby_condition_enum import WaitlistStandbyConditionEnum
from openapi_client.models.yes_no_unknown_enum import YesNoUnknownEnum

class AdvanceReservationRequired(AdvanceReservation):
    """
    AdvanceReservationRequired
    """
    instant_purchase: YesNoUnknownEnum = Field(..., alias="instantPurchase")
    standby: YesNoUnknownEnum = Field(...)
    waiver_date: Optional[constr(strict=True)] = Field(None, alias="waiverDate", description="Waiver date")
    reservation_travel_segment_indicator_atpco: Optional[conint(strict=True, ge=0)] = Field(None, alias="ReservationTravelSegmentIndicatorATPCO", description="The ATPCO travel segment geographic indicator. Example= 1st segment over the water")
    confirmed_status: Optional[conlist(ConfirmedStatusEnum, max_items=10)] = Field(None, alias="ConfirmedStatus")
    waitlist_standby_condition: Optional[conlist(WaitlistStandbyConditionEnum, max_items=10)] = Field(None, alias="WaitlistStandbyCondition")
    first_reservation: FirstReservation = Field(..., alias="FirstReservation")
    last_reservation: LastReservation = Field(..., alias="LastReservation")
    __properties = ["@type", "instantPurchase", "standby", "waiverDate", "ReservationTravelSegmentIndicatorATPCO", "ConfirmedStatus", "WaitlistStandbyCondition", "FirstReservation", "LastReservation"]

    @validator('waiver_date')
    def waiver_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"(\d{4}-\d{2}-\d{2})", value):
            raise ValueError(r"must validate the regular expression /(\d{4}-\d{2}-\d{2})/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdvanceReservationRequired:
        """Create an instance of AdvanceReservationRequired from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in confirmed_status (list)
        _items = []
        if self.confirmed_status:
            for _item in self.confirmed_status:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ConfirmedStatus'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in waitlist_standby_condition (list)
        _items = []
        if self.waitlist_standby_condition:
            for _item in self.waitlist_standby_condition:
                if _item:
                    _items.append(_item.to_dict())
            _dict['WaitlistStandbyCondition'] = _items
        # override the default output from pydantic by calling `to_dict()` of first_reservation
        if self.first_reservation:
            _dict['FirstReservation'] = self.first_reservation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_reservation
        if self.last_reservation:
            _dict['LastReservation'] = self.last_reservation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdvanceReservationRequired:
        """Create an instance of AdvanceReservationRequired from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdvanceReservationRequired.parse_obj(obj)

        _obj = AdvanceReservationRequired.parse_obj({
            "type": obj.get("@type"),
            "instant_purchase": obj.get("instantPurchase"),
            "standby": obj.get("standby"),
            "waiver_date": obj.get("waiverDate"),
            "reservation_travel_segment_indicator_atpco": obj.get("ReservationTravelSegmentIndicatorATPCO"),
            "confirmed_status": [ConfirmedStatusEnum.from_dict(_item) for _item in obj.get("ConfirmedStatus")] if obj.get("ConfirmedStatus") is not None else None,
            "waitlist_standby_condition": [WaitlistStandbyConditionEnum.from_dict(_item) for _item in obj.get("WaitlistStandbyCondition")] if obj.get("WaitlistStandbyCondition") is not None else None,
            "first_reservation": FirstReservation.from_dict(obj.get("FirstReservation")) if obj.get("FirstReservation") is not None else None,
            "last_reservation": LastReservation.from_dict(obj.get("LastReservation")) if obj.get("LastReservation") is not None else None
        })
        return _obj


