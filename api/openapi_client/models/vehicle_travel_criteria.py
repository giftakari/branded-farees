# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator
from openapi_client.models.code import Code
from openapi_client.models.customer_loyalty import CustomerLoyalty
from openapi_client.models.driver_info import DriverInfo
from openapi_client.models.next_result_reference import NextResultReference
from openapi_client.models.permitted_vendors import PermittedVendors
from openapi_client.models.prohibited_vendors import ProhibitedVendors
from openapi_client.models.rate_category_enum import RateCategoryEnum
from openapi_client.models.rate_code_info import RateCodeInfo
from openapi_client.models.rate_period_enum import RatePeriodEnum
from openapi_client.models.search_vehicle_attributes import SearchVehicleAttributes
from openapi_client.models.special_equipment import SpecialEquipment
from openapi_client.models.vehicle_date_location import VehicleDateLocation
from openapi_client.models.vehicle_make_model import VehicleMakeModel
from openapi_client.models.vehicle_search_modifiers import VehicleSearchModifiers

class VehicleTravelCriteria(BaseModel):
    """
    VehicleTravelCriteria
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    currency_code: Optional[constr(strict=True)] = Field(None, alias="currencyCode", description="Requested currency code")
    rate_category: Optional[RateCategoryEnum] = Field(None, alias="rateCategory")
    rate_period: Optional[RatePeriodEnum] = Field(None, alias="ratePeriod")
    unlimited_mileage_ind: Optional[StrictBool] = Field(None, alias="unlimitedMileageInd", description="If true, this rate includes unlimited mileage")
    rate_guaranteed_ind: Optional[StrictBool] = Field(None, alias="rateGuaranteedInd", description="If true, this rate is guaranteed")
    vehicle_date_location: Optional[VehicleDateLocation] = Field(None, alias="VehicleDateLocation")
    booking_source: Optional[Code] = Field(None, alias="BookingSource")
    driver_info: DriverInfo = Field(..., alias="DriverInfo")
    permitted_vendors: Optional[PermittedVendors] = Field(None, alias="PermittedVendors")
    prohibited_vendors: Optional[ProhibitedVendors] = Field(None, alias="ProhibitedVendors")
    rate_code_info: Optional[conlist(RateCodeInfo, max_items=100)] = Field(None, alias="RateCodeInfo")
    customer_loyalty: Optional[conlist(CustomerLoyalty, max_items=10)] = Field(None, alias="CustomerLoyalty")
    special_equipment: Optional[conlist(SpecialEquipment, max_items=100)] = Field(None, alias="SpecialEquipment")
    vehicle_search_modifiers: Optional[VehicleSearchModifiers] = Field(None, alias="VehicleSearchModifiers")
    search_vehicle_attributes: Optional[SearchVehicleAttributes] = Field(None, alias="SearchVehicleAttributes")
    vehicle_make_model: Optional[conlist(VehicleMakeModel, max_items=10)] = Field(None, alias="VehicleMakeModel")
    next_result_reference: Optional[NextResultReference] = Field(None, alias="NextResultReference")
    __properties = ["@type", "currencyCode", "rateCategory", "ratePeriod", "unlimitedMileageInd", "rateGuaranteedInd", "VehicleDateLocation", "BookingSource", "DriverInfo", "PermittedVendors", "ProhibitedVendors", "RateCodeInfo", "CustomerLoyalty", "SpecialEquipment", "VehicleSearchModifiers", "SearchVehicleAttributes", "VehicleMakeModel", "NextResultReference"]

    @validator('currency_code')
    def currency_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[a-zA-Z]{3}", value):
            raise ValueError(r"must validate the regular expression /[a-zA-Z]{3}/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VehicleTravelCriteria:
        """Create an instance of VehicleTravelCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of vehicle_date_location
        if self.vehicle_date_location:
            _dict['VehicleDateLocation'] = self.vehicle_date_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of booking_source
        if self.booking_source:
            _dict['BookingSource'] = self.booking_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of driver_info
        if self.driver_info:
            _dict['DriverInfo'] = self.driver_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of permitted_vendors
        if self.permitted_vendors:
            _dict['PermittedVendors'] = self.permitted_vendors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prohibited_vendors
        if self.prohibited_vendors:
            _dict['ProhibitedVendors'] = self.prohibited_vendors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rate_code_info (list)
        _items = []
        if self.rate_code_info:
            for _item in self.rate_code_info:
                if _item:
                    _items.append(_item.to_dict())
            _dict['RateCodeInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in customer_loyalty (list)
        _items = []
        if self.customer_loyalty:
            for _item in self.customer_loyalty:
                if _item:
                    _items.append(_item.to_dict())
            _dict['CustomerLoyalty'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in special_equipment (list)
        _items = []
        if self.special_equipment:
            for _item in self.special_equipment:
                if _item:
                    _items.append(_item.to_dict())
            _dict['SpecialEquipment'] = _items
        # override the default output from pydantic by calling `to_dict()` of vehicle_search_modifiers
        if self.vehicle_search_modifiers:
            _dict['VehicleSearchModifiers'] = self.vehicle_search_modifiers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of search_vehicle_attributes
        if self.search_vehicle_attributes:
            _dict['SearchVehicleAttributes'] = self.search_vehicle_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in vehicle_make_model (list)
        _items = []
        if self.vehicle_make_model:
            for _item in self.vehicle_make_model:
                if _item:
                    _items.append(_item.to_dict())
            _dict['VehicleMakeModel'] = _items
        # override the default output from pydantic by calling `to_dict()` of next_result_reference
        if self.next_result_reference:
            _dict['NextResultReference'] = self.next_result_reference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VehicleTravelCriteria:
        """Create an instance of VehicleTravelCriteria from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VehicleTravelCriteria.parse_obj(obj)

        _obj = VehicleTravelCriteria.parse_obj({
            "type": obj.get("@type"),
            "currency_code": obj.get("currencyCode"),
            "rate_category": obj.get("rateCategory"),
            "rate_period": obj.get("ratePeriod"),
            "unlimited_mileage_ind": obj.get("unlimitedMileageInd"),
            "rate_guaranteed_ind": obj.get("rateGuaranteedInd"),
            "vehicle_date_location": VehicleDateLocation.from_dict(obj.get("VehicleDateLocation")) if obj.get("VehicleDateLocation") is not None else None,
            "booking_source": Code.from_dict(obj.get("BookingSource")) if obj.get("BookingSource") is not None else None,
            "driver_info": DriverInfo.from_dict(obj.get("DriverInfo")) if obj.get("DriverInfo") is not None else None,
            "permitted_vendors": PermittedVendors.from_dict(obj.get("PermittedVendors")) if obj.get("PermittedVendors") is not None else None,
            "prohibited_vendors": ProhibitedVendors.from_dict(obj.get("ProhibitedVendors")) if obj.get("ProhibitedVendors") is not None else None,
            "rate_code_info": [RateCodeInfo.from_dict(_item) for _item in obj.get("RateCodeInfo")] if obj.get("RateCodeInfo") is not None else None,
            "customer_loyalty": [CustomerLoyalty.from_dict(_item) for _item in obj.get("CustomerLoyalty")] if obj.get("CustomerLoyalty") is not None else None,
            "special_equipment": [SpecialEquipment.from_dict(_item) for _item in obj.get("SpecialEquipment")] if obj.get("SpecialEquipment") is not None else None,
            "vehicle_search_modifiers": VehicleSearchModifiers.from_dict(obj.get("VehicleSearchModifiers")) if obj.get("VehicleSearchModifiers") is not None else None,
            "search_vehicle_attributes": SearchVehicleAttributes.from_dict(obj.get("SearchVehicleAttributes")) if obj.get("SearchVehicleAttributes") is not None else None,
            "vehicle_make_model": [VehicleMakeModel.from_dict(_item) for _item in obj.get("VehicleMakeModel")] if obj.get("VehicleMakeModel") is not None else None,
            "next_result_reference": NextResultReference.from_dict(obj.get("NextResultReference")) if obj.get("NextResultReference") is not None else None
        })
        return _obj


