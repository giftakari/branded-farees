# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import Field, StrictBool, StrictStr, constr
from openapi_client.models.name_type_enum import NameTypeEnum
from openapi_client.models.person_name import PersonName
from openapi_client.models.privacy import Privacy

class PersonNameDetail(PersonName):
    """
    PersonNameDetail
    """
    person_name_type: Optional[NameTypeEnum] = Field(None, alias="personNameType")
    language: Optional[StrictStr] = Field(None, description="'ISO639 code of the language the name is represented ")
    surname_prefix: Optional[constr(strict=True, max_length=32)] = Field(None, alias="SurnamePrefix", description="The surname prefix")
    suffix: Optional[constr(strict=True, max_length=10)] = Field(None, alias="Suffix", description="Hold various name suffixes and letters")
    title: Optional[constr(strict=True, max_length=32)] = Field(None, alias="Title", description="Degree or honors")
    privacy: Optional[Privacy] = Field(None, alias="Privacy")
    default_ind: Optional[StrictBool] = Field(None, alias="defaultInd", description="If true, this is the default or primary name within a collection of names.")
    __properties = ["@type", "Prefix", "Given", "Middle", "Surname", "personNameType", "language", "SurnamePrefix", "Suffix", "Title", "Privacy", "defaultInd"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PersonNameDetail:
        """Create an instance of PersonNameDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of privacy
        if self.privacy:
            _dict['Privacy'] = self.privacy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PersonNameDetail:
        """Create an instance of PersonNameDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PersonNameDetail.parse_obj(obj)

        _obj = PersonNameDetail.parse_obj({
            "type": obj.get("@type"),
            "prefix": obj.get("Prefix"),
            "given": obj.get("Given"),
            "middle": obj.get("Middle"),
            "surname": obj.get("Surname"),
            "person_name_type": obj.get("personNameType"),
            "language": obj.get("language"),
            "surname_prefix": obj.get("SurnamePrefix"),
            "suffix": obj.get("Suffix"),
            "title": obj.get("Title"),
            "privacy": Privacy.from_dict(obj.get("Privacy")) if obj.get("Privacy") is not None else None,
            "default_ind": obj.get("defaultInd")
        })
        return _obj


