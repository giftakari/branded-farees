# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr
from openapi_client.models.code import Code
from openapi_client.models.image import Image
from openapi_client.models.vehicle_make_model import VehicleMakeModel

class Vehicle(BaseModel):
    """
    Vehicle
    """
    type: StrictStr = Field(..., alias="@type")
    baggage_quantity: Optional[StrictInt] = Field(None, alias="baggageQuantity", description="Baggage Quantity that is able to fit into the car with passengers")
    passenger_quantity: Optional[constr(strict=True, max_length=32)] = Field(None, alias="passengerQuantity")
    door_count: Optional[constr(strict=True, max_length=512)] = Field(None, alias="doorCount", description="The number of doors for the vehicle")
    image: Optional[Image] = Field(None, alias="Image")
    vehicle_make_model: Optional[VehicleMakeModel] = Field(None, alias="VehicleMakeModel")
    transmission_type_code: Optional[Code] = Field(None, alias="TransmissionTypeCode")
    vehicle_category_code: Optional[Code] = Field(None, alias="VehicleCategoryCode")
    fuel_type_code: Optional[Code] = Field(None, alias="FuelTypeCode")
    vehicle_size_code: Optional[Code] = Field(None, alias="VehicleSizeCode")
    vehicle_class_code: Optional[Code] = Field(None, alias="VehicleClassCode")
    air_conditioning_ind: Optional[StrictBool] = Field(None, alias="airConditioningInd", description="True if vehicle has air conditioning")
    __properties = ["@type", "baggageQuantity", "passengerQuantity", "doorCount", "Image", "VehicleMakeModel", "TransmissionTypeCode", "VehicleCategoryCode", "FuelTypeCode", "VehicleSizeCode", "VehicleClassCode", "airConditioningInd"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = '@type'

    # discriminator mappings
    __discriminator_value_class_map = {
        'VehicleDetail': 'VehicleDetail'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(VehicleDetail):
        """Create an instance of Vehicle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['Image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vehicle_make_model
        if self.vehicle_make_model:
            _dict['VehicleMakeModel'] = self.vehicle_make_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transmission_type_code
        if self.transmission_type_code:
            _dict['TransmissionTypeCode'] = self.transmission_type_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vehicle_category_code
        if self.vehicle_category_code:
            _dict['VehicleCategoryCode'] = self.vehicle_category_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fuel_type_code
        if self.fuel_type_code:
            _dict['FuelTypeCode'] = self.fuel_type_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vehicle_size_code
        if self.vehicle_size_code:
            _dict['VehicleSizeCode'] = self.vehicle_size_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vehicle_class_code
        if self.vehicle_class_code:
            _dict['VehicleClassCode'] = self.vehicle_class_code.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(VehicleDetail):
        """Create an instance of Vehicle from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("Vehicle failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.vehicle_detail import VehicleDetail
Vehicle.update_forward_refs()

