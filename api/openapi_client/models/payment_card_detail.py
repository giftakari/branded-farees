# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, StrictBool, conlist, constr, validator
from openapi_client.models.address import Address
from openapi_client.models.card_number import CardNumber
from openapi_client.models.customer_loyalty import CustomerLoyalty
from openapi_client.models.email import Email
from openapi_client.models.identifier import Identifier
from openapi_client.models.magnetic_stripe import MagneticStripe
from openapi_client.models.payment_card import PaymentCard
from openapi_client.models.payment_card_type_enum import PaymentCardTypeEnum
from openapi_client.models.payment_card_type_issuer import PaymentCardTypeIssuer
from openapi_client.models.person_name import PersonName
from openapi_client.models.privacy import Privacy
from openapi_client.models.series_code import SeriesCode
from openapi_client.models.signature_on_file import SignatureOnFile
from openapi_client.models.telephone import Telephone
from openapi_client.models.three_domain_security import ThreeDomainSecurity

class PaymentCardDetail(PaymentCard):
    """
    PaymentCardDetail
    """
    country_of_issue: Optional[constr(strict=True)] = Field(None, alias="countryOfIssue", description="The country code ISO")
    company_card_reference: Optional[constr(strict=True, max_length=4096)] = Field(None, alias="companyCardReference", description="The company card reference")
    bank_name: Optional[constr(strict=True, max_length=64)] = Field(None, alias="bankName", description="The bank name value")
    bank_country_code: Optional[constr(strict=True)] = Field(None, alias="bankCountryCode", description="The bank country code ISO")
    bank_state_code: Optional[constr(strict=True, max_length=2, min_length=2)] = Field(None, alias="bankStateCode", description="The bank state code ISO")
    card_holder_id: Optional[Identifier] = Field(None, alias="CardHolderId")
    person_name: Optional[PersonName] = Field(None, alias="PersonName")
    address: Optional[Address] = Field(None, alias="Address")
    telephone: Optional[conlist(Telephone)] = Field(None, alias="Telephone")
    email: Optional[conlist(Email)] = Field(None, alias="Email")
    customer_loyalty: Optional[conlist(CustomerLoyalty)] = Field(None, alias="CustomerLoyalty")
    signature_on_file: Optional[SignatureOnFile] = Field(None, alias="SignatureOnFile")
    three_domain_security: Optional[ThreeDomainSecurity] = Field(None, alias="ThreeDomainSecurity")
    extended_payment_ind: Optional[StrictBool] = Field(None, alias="extendedPaymentInd", description="Implementer: If true, the credit card company is requested to delay the date on which the amount of this transaction is applied to the customer's account.")
    enett_ind: Optional[StrictBool] = Field(None, alias="enettInd", description="True if this payment card has been issued through Enett")
    third_party_ind: Optional[StrictBool] = Field(None, alias="thirdPartyInd", description="If true, then the payment card holder is not one of the travelers in the reservation")
    acceptance_override_ind: Optional[StrictBool] = Field(None, alias="acceptanceOverrideInd", description="If true, override airline restriction on the payment card")
    __properties = ["@type", "id", "effectiveDate", "expireDate", "approvalCode", "PrivacyGroup", "CardType", "CardCode", "CardBrand", "CardIssuer", "CardHolderName", "CardNumber", "SeriesCode", "MagneticStripe", "secureInd", "countryOfIssue", "companyCardReference", "bankName", "bankCountryCode", "bankStateCode", "CardHolderId", "PersonName", "Address", "Telephone", "Email", "CustomerLoyalty", "SignatureOnFile", "ThreeDomainSecurity", "extendedPaymentInd", "enettInd", "thirdPartyInd", "acceptanceOverrideInd"]

    @validator('country_of_issue')
    def country_of_issue_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[a-zA-Z]{2}", value):
            raise ValueError(r"must validate the regular expression /[a-zA-Z]{2}/")
        return value

    @validator('company_card_reference')
    def company_card_reference_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([0-9a-zA-Z]+)?", value):
            raise ValueError(r"must validate the regular expression /([0-9a-zA-Z]+)?/")
        return value

    @validator('bank_country_code')
    def bank_country_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[a-zA-Z]{2}", value):
            raise ValueError(r"must validate the regular expression /[a-zA-Z]{2}/")
        return value

    @validator('bank_state_code')
    def bank_state_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z]{2})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z]{2})/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentCardDetail:
        """Create an instance of PaymentCardDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of privacy_group
        if self.privacy_group:
            _dict['PrivacyGroup'] = self.privacy_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card_brand
        if self.card_brand:
            _dict['CardBrand'] = self.card_brand.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card_issuer
        if self.card_issuer:
            _dict['CardIssuer'] = self.card_issuer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card_number
        if self.card_number:
            _dict['CardNumber'] = self.card_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of series_code
        if self.series_code:
            _dict['SeriesCode'] = self.series_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in magnetic_stripe (list)
        _items = []
        if self.magnetic_stripe:
            for _item in self.magnetic_stripe:
                if _item:
                    _items.append(_item.to_dict())
            _dict['MagneticStripe'] = _items
        # override the default output from pydantic by calling `to_dict()` of card_holder_id
        if self.card_holder_id:
            _dict['CardHolderId'] = self.card_holder_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of person_name
        if self.person_name:
            _dict['PersonName'] = self.person_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['Address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in telephone (list)
        _items = []
        if self.telephone:
            for _item in self.telephone:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Telephone'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in email (list)
        _items = []
        if self.email:
            for _item in self.email:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Email'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in customer_loyalty (list)
        _items = []
        if self.customer_loyalty:
            for _item in self.customer_loyalty:
                if _item:
                    _items.append(_item.to_dict())
            _dict['CustomerLoyalty'] = _items
        # override the default output from pydantic by calling `to_dict()` of signature_on_file
        if self.signature_on_file:
            _dict['SignatureOnFile'] = self.signature_on_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of three_domain_security
        if self.three_domain_security:
            _dict['ThreeDomainSecurity'] = self.three_domain_security.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentCardDetail:
        """Create an instance of PaymentCardDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentCardDetail.parse_obj(obj)

        _obj = PaymentCardDetail.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "effective_date": obj.get("effectiveDate"),
            "expire_date": obj.get("expireDate"),
            "approval_code": obj.get("approvalCode"),
            "privacy_group": Privacy.from_dict(obj.get("PrivacyGroup")) if obj.get("PrivacyGroup") is not None else None,
            "card_type": obj.get("CardType"),
            "card_code": obj.get("CardCode"),
            "card_brand": PaymentCardTypeIssuer.from_dict(obj.get("CardBrand")) if obj.get("CardBrand") is not None else None,
            "card_issuer": PaymentCardTypeIssuer.from_dict(obj.get("CardIssuer")) if obj.get("CardIssuer") is not None else None,
            "card_holder_name": obj.get("CardHolderName"),
            "card_number": CardNumber.from_dict(obj.get("CardNumber")) if obj.get("CardNumber") is not None else None,
            "series_code": SeriesCode.from_dict(obj.get("SeriesCode")) if obj.get("SeriesCode") is not None else None,
            "magnetic_stripe": [MagneticStripe.from_dict(_item) for _item in obj.get("MagneticStripe")] if obj.get("MagneticStripe") is not None else None,
            "secure_ind": obj.get("secureInd"),
            "country_of_issue": obj.get("countryOfIssue"),
            "company_card_reference": obj.get("companyCardReference"),
            "bank_name": obj.get("bankName"),
            "bank_country_code": obj.get("bankCountryCode"),
            "bank_state_code": obj.get("bankStateCode"),
            "card_holder_id": Identifier.from_dict(obj.get("CardHolderId")) if obj.get("CardHolderId") is not None else None,
            "person_name": PersonName.from_dict(obj.get("PersonName")) if obj.get("PersonName") is not None else None,
            "address": Address.from_dict(obj.get("Address")) if obj.get("Address") is not None else None,
            "telephone": [Telephone.from_dict(_item) for _item in obj.get("Telephone")] if obj.get("Telephone") is not None else None,
            "email": [Email.from_dict(_item) for _item in obj.get("Email")] if obj.get("Email") is not None else None,
            "customer_loyalty": [CustomerLoyalty.from_dict(_item) for _item in obj.get("CustomerLoyalty")] if obj.get("CustomerLoyalty") is not None else None,
            "signature_on_file": SignatureOnFile.from_dict(obj.get("SignatureOnFile")) if obj.get("SignatureOnFile") is not None else None,
            "three_domain_security": ThreeDomainSecurity.from_dict(obj.get("ThreeDomainSecurity")) if obj.get("ThreeDomainSecurity") is not None else None,
            "extended_payment_ind": obj.get("extendedPaymentInd"),
            "enett_ind": obj.get("enettInd"),
            "third_party_ind": obj.get("thirdPartyInd"),
            "acceptance_override_ind": obj.get("acceptanceOverrideInd")
        })
        return _obj


