# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import Field, StrictBool, StrictInt, StrictStr, conint, conlist, constr, validator
from openapi_client.models.arrival import Arrival
from openapi_client.models.departure import Departure
from openapi_client.models.flight_id import FlightID
from openapi_client.models.identifier import Identifier
from openapi_client.models.intermediate_stop import IntermediateStop

class Flight(FlightID):
    """
    Flight
    """
    distance: Optional[conint(strict=True, ge=0)] = Field(None, description="The flight travelled distance")
    stops: Optional[StrictInt] = Field(None, description="Number of stops")
    duration: Optional[StrictStr] = Field(None, description="Elapsed flight time represented in ISO 8601 format")
    carrier: constr(strict=True) = Field(..., description="The airline code")
    number: constr(strict=True) = Field(..., description="Flight number")
    operating_carrier: Optional[constr(strict=True)] = Field(None, alias="operatingCarrier", description="The airline code")
    operating_carrier_name: Optional[constr(strict=True, max_length=128)] = Field(None, alias="operatingCarrierName", description="The operating carrier name")
    equipment: Optional[constr(strict=True)] = Field(None, description="Air Equip Code IATA")
    departure: Departure = Field(..., alias="Departure")
    arrival: Arrival = Field(..., alias="Arrival")
    intermediate_stop: Optional[conlist(IntermediateStop, max_items=9)] = Field(None, alias="IntermediateStop")
    subject_to_government_approval_ind: Optional[StrictBool] = Field(None, alias="subjectToGovernmentApprovalInd", description="If true, this flight schedule is yet to receive government approval")
    __properties = ["@type", "id", "FlightRef", "Identifier", "distance", "stops", "duration", "carrier", "number", "operatingCarrier", "operatingCarrierName", "equipment", "Departure", "Arrival", "IntermediateStop", "subjectToGovernmentApprovalInd"]

    @validator('carrier')
    def carrier_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"([a-zA-Z0-9]{2,3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{2,3})/")
        return value

    @validator('number')
    def number_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"[0-9]{1,4}[A-Z]?|OPEN|ARNK", value):
            raise ValueError(r"must validate the regular expression /[0-9]{1,4}[A-Z]?|OPEN|ARNK/")
        return value

    @validator('operating_carrier')
    def operating_carrier_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{2,3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{2,3})/")
        return value

    @validator('equipment')
    def equipment_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([A-Z0-9]{3})?", value):
            raise ValueError(r"must validate the regular expression /([A-Z0-9]{3})?/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = '@type'

    # discriminator mappings
    __discriminator_value_class_map = {
        'FlightDetail': 'FlightDetail',
        'ImportsCatalogAir_ReservationResource': 'ImportsCatalogAirReservationResource'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(FlightDetail, ImportsCatalogAirReservationResource):
        """Create an instance of Flight from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of departure
        if self.departure:
            _dict['Departure'] = self.departure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of arrival
        if self.arrival:
            _dict['Arrival'] = self.arrival.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in intermediate_stop (list)
        _items = []
        if self.intermediate_stop:
            for _item in self.intermediate_stop:
                if _item:
                    _items.append(_item.to_dict())
            _dict['IntermediateStop'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(FlightDetail, ImportsCatalogAirReservationResource):
        """Create an instance of Flight from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("Flight failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.flight_detail import FlightDetail
from openapi_client.models.imports_catalog_air_reservation_resource import ImportsCatalogAir_ReservationResource
Flight.update_forward_refs()

