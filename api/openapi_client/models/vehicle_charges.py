# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr
from openapi_client.models.calculation import Calculation
from openapi_client.models.code import Code
from openapi_client.models.rate_category_enum import RateCategoryEnum
from openapi_client.models.rate_period_enum import RatePeriodEnum

class VehicleCharges(BaseModel):
    """
    VehicleCharges
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    description: Optional[constr(strict=True, max_length=512)] = None
    rate_period: Optional[RatePeriodEnum] = Field(None, alias="ratePeriod")
    rate_charge_info: Optional[constr(strict=True, max_length=512)] = Field(None, alias="rateChargeInfo")
    rate_category: Optional[RateCategoryEnum] = Field(None, alias="RateCategory")
    vehicle_coverage_type_code: Optional[Code] = Field(None, alias="VehicleCoverageTypeCode")
    calculation: Optional[conlist(Calculation, max_items=3)] = Field(None, alias="Calculation")
    vehicle_charge_purpose_code: Optional[Code] = Field(None, alias="VehicleChargePurposeCode")
    tax_inclusive_ind: Optional[StrictBool] = Field(None, alias="taxInclusiveInd")
    guaranteed_ind: Optional[StrictBool] = Field(None, alias="guaranteedInd")
    pay_now_ind: Optional[StrictBool] = Field(None, alias="payNowInd", description="If true the vehicle charge must be paid now and is included in the totalPrice calculation")
    included_in_estimated_total_ind: Optional[StrictBool] = Field(None, alias="includedInEstimatedTotalInd")
    included_in_base_rate_ind: Optional[StrictBool] = Field(None, alias="includedInBaseRateInd", description="If true the Vehicle Charge has been included in the base rate of the Vehicle price")
    __properties = ["@type", "description", "ratePeriod", "rateChargeInfo", "RateCategory", "VehicleCoverageTypeCode", "Calculation", "VehicleChargePurposeCode", "taxInclusiveInd", "guaranteedInd", "payNowInd", "includedInEstimatedTotalInd", "includedInBaseRateInd"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VehicleCharges:
        """Create an instance of VehicleCharges from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of vehicle_coverage_type_code
        if self.vehicle_coverage_type_code:
            _dict['VehicleCoverageTypeCode'] = self.vehicle_coverage_type_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in calculation (list)
        _items = []
        if self.calculation:
            for _item in self.calculation:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Calculation'] = _items
        # override the default output from pydantic by calling `to_dict()` of vehicle_charge_purpose_code
        if self.vehicle_charge_purpose_code:
            _dict['VehicleChargePurposeCode'] = self.vehicle_charge_purpose_code.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VehicleCharges:
        """Create an instance of VehicleCharges from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VehicleCharges.parse_obj(obj)

        _obj = VehicleCharges.parse_obj({
            "type": obj.get("@type"),
            "description": obj.get("description"),
            "rate_period": obj.get("ratePeriod"),
            "rate_charge_info": obj.get("rateChargeInfo"),
            "rate_category": obj.get("RateCategory"),
            "vehicle_coverage_type_code": Code.from_dict(obj.get("VehicleCoverageTypeCode")) if obj.get("VehicleCoverageTypeCode") is not None else None,
            "calculation": [Calculation.from_dict(_item) for _item in obj.get("Calculation")] if obj.get("Calculation") is not None else None,
            "vehicle_charge_purpose_code": Code.from_dict(obj.get("VehicleChargePurposeCode")) if obj.get("VehicleChargePurposeCode") is not None else None,
            "tax_inclusive_ind": obj.get("taxInclusiveInd"),
            "guaranteed_ind": obj.get("guaranteedInd"),
            "pay_now_ind": obj.get("payNowInd"),
            "included_in_estimated_total_ind": obj.get("includedInEstimatedTotalInd"),
            "included_in_base_rate_ind": obj.get("includedInBaseRateInd")
        })
        return _obj


