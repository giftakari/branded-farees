# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import Field, StrictBool
from openapi_client.models.extended_payment import ExtendedPayment
from openapi_client.models.form_of_payment_id import FormOfPaymentID
from openapi_client.models.identifier import Identifier
from openapi_client.models.payment_card import PaymentCard

class FormOfPaymentPaymentCard(FormOfPaymentID):
    """
    FormOfPaymentPaymentCard
    """
    payment_card: Optional[PaymentCard] = Field(None, alias="PaymentCard")
    inhibit_payment_card_authorization_ind: Optional[StrictBool] = Field(None, alias="inhibitPaymentCardAuthorizationInd", description="If true, the payment card will not go through card authorization process")
    extended_payment: Optional[ExtendedPayment] = Field(None, alias="ExtendedPayment")
    __properties = ["@type", "id", "FormOfPaymentRef", "Identifier", "PaymentCard", "inhibitPaymentCardAuthorizationInd", "ExtendedPayment"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FormOfPaymentPaymentCard:
        """Create an instance of FormOfPaymentPaymentCard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_card
        if self.payment_card:
            _dict['PaymentCard'] = self.payment_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extended_payment
        if self.extended_payment:
            _dict['ExtendedPayment'] = self.extended_payment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FormOfPaymentPaymentCard:
        """Create an instance of FormOfPaymentPaymentCard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FormOfPaymentPaymentCard.parse_obj(obj)

        _obj = FormOfPaymentPaymentCard.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "form_of_payment_ref": obj.get("FormOfPaymentRef"),
            "identifier": Identifier.from_dict(obj.get("Identifier")) if obj.get("Identifier") is not None else None,
            "payment_card": PaymentCard.from_dict(obj.get("PaymentCard")) if obj.get("PaymentCard") is not None else None,
            "inhibit_payment_card_authorization_ind": obj.get("inhibitPaymentCardAuthorizationInd"),
            "extended_payment": ExtendedPayment.from_dict(obj.get("ExtendedPayment")) if obj.get("ExtendedPayment") is not None else None
        })
        return _obj


