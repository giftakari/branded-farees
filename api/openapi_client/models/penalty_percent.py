# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import Field, confloat, conint
from openapi_client.models.commission_enum import CommissionEnum
from openapi_client.models.penalty import Penalty

class PenaltyPercent(Penalty):
    """
    PenaltyPercent
    """
    percent: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(None, alias="Percent", description="Percent amount of commission")
    __properties = ["@type", "application", "Percent"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PenaltyPercent:
        """Create an instance of PenaltyPercent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PenaltyPercent:
        """Create an instance of PenaltyPercent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PenaltyPercent.parse_obj(obj)

        _obj = PenaltyPercent.parse_obj({
            "type": obj.get("@type"),
            "application": obj.get("application"),
            "percent": obj.get("Percent")
        })
        return _obj


