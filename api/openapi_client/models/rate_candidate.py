# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictStr, conint, constr, validator
from openapi_client.models.rate_category_enum import RateCategoryEnum

class RateCandidate(BaseModel):
    """
    RateCandidate
    """
    type: StrictStr = Field(..., alias="@type")
    priority: Optional[conint(strict=True, ge=0)] = Field(None, description="rate candidate priority")
    rate_code: Optional[constr(strict=True, max_length=32)] = Field(None, alias="rateCode", description="The rateCode to be applied to the request")
    rate_category: Optional[RateCategoryEnum] = Field(None, alias="rateCategory")
    chain_code: Optional[constr(strict=True, max_length=5, min_length=2)] = Field(None, alias="chainCode", description="The hotel chain code")
    property_code: Optional[constr(strict=True, max_length=32)] = Field(None, alias="propertyCode", description="The hotel chain code")
    __properties = ["@type", "priority", "rateCode", "rateCategory", "chainCode", "propertyCode"]

    @validator('chain_code')
    def chain_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{2,5})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{2,5})/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = '@type'

    # discriminator mappings
    __discriminator_value_class_map = {
        'RateCandidateDetail': 'RateCandidateDetail'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(RateCandidateDetail):
        """Create an instance of RateCandidate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(RateCandidateDetail):
        """Create an instance of RateCandidate from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("RateCandidate failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.rate_candidate_detail import RateCandidateDetail
RateCandidate.update_forward_refs()

