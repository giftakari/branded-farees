# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, constr
from openapi_client.models.filed_amount import FiledAmount

class NetRemitInfo(BaseModel):
    """
    NetRemitInfo
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    car_code: Optional[constr(strict=True, max_length=32)] = Field(None, alias="CarCode", description="The CAR code applied to this product for use in net remit")
    value_code: Optional[constr(strict=True, max_length=32)] = Field(None, alias="ValueCode", description="The Value code applied to this product for use in net remit")
    actual_selling_fare: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="ActualSellingFare", description="The actual selling fare which will override the Offer base fare on the document")
    net_base_amount: Optional[FiledAmount] = Field(None, alias="NetBaseAmount")
    __properties = ["@type", "CarCode", "ValueCode", "ActualSellingFare", "NetBaseAmount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NetRemitInfo:
        """Create an instance of NetRemitInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of net_base_amount
        if self.net_base_amount:
            _dict['NetBaseAmount'] = self.net_base_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NetRemitInfo:
        """Create an instance of NetRemitInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NetRemitInfo.parse_obj(obj)

        _obj = NetRemitInfo.parse_obj({
            "type": obj.get("@type"),
            "car_code": obj.get("CarCode"),
            "value_code": obj.get("ValueCode"),
            "actual_selling_fare": obj.get("ActualSellingFare"),
            "net_base_amount": FiledAmount.from_dict(obj.get("NetBaseAmount")) if obj.get("NetBaseAmount") is not None else None
        })
        return _obj


