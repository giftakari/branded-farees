# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import Field, StrictInt, StrictStr, constr
from openapi_client.models.date_create_modify import DateCreateModify
from openapi_client.models.image import Image
from openapi_client.models.text_block import TextBlock
from openapi_client.models.text_formatted import TextFormatted

class TextBlockDetail(TextBlock):
    """
    TextBlockDetail
    """
    sequence: Optional[StrictInt] = Field(None, description="The order of the text block, if there are more than one block.")
    description: Optional[constr(strict=True, max_length=1024)] = Field(None, description="Text block detail description")
    image: Optional[Image] = Field(None, alias="Image")
    url: Optional[StrictStr] = Field(None, alias="URL", description="A URL for this block")
    date_create_modify: DateCreateModify = Field(..., alias="DateCreateModify")
    __properties = ["@type", "title", "id", "TextFormatted", "sequence", "description", "Image", "URL", "DateCreateModify"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TextBlockDetail:
        """Create an instance of TextBlockDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in text_formatted (list)
        _items = []
        if self.text_formatted:
            for _item in self.text_formatted:
                if _item:
                    _items.append(_item.to_dict())
            _dict['TextFormatted'] = _items
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['Image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_create_modify
        if self.date_create_modify:
            _dict['DateCreateModify'] = self.date_create_modify.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TextBlockDetail:
        """Create an instance of TextBlockDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TextBlockDetail.parse_obj(obj)

        _obj = TextBlockDetail.parse_obj({
            "type": obj.get("@type"),
            "title": obj.get("title"),
            "id": obj.get("id"),
            "text_formatted": [TextFormatted.from_dict(_item) for _item in obj.get("TextFormatted")] if obj.get("TextFormatted") is not None else None,
            "sequence": obj.get("sequence"),
            "description": obj.get("description"),
            "image": Image.from_dict(obj.get("Image")) if obj.get("Image") is not None else None,
            "url": obj.get("URL"),
            "date_create_modify": DateCreateModify.from_dict(obj.get("DateCreateModify")) if obj.get("DateCreateModify") is not None else None
        })
        return _obj


