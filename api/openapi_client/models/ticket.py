# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import Field, StrictInt, StrictStr, conlist, constr, validator
from openapi_client.models.agency_info import AgencyInfo
from openapi_client.models.form_of_payment import FormOfPayment
from openapi_client.models.identifier import Identifier
from openapi_client.models.original_issue import OriginalIssue
from openapi_client.models.person_name import PersonName
from openapi_client.models.previous_issue import PreviousIssue
from openapi_client.models.pricing_type_enum import PricingTypeEnum
from openapi_client.models.supplier_locator import SupplierLocator
from openapi_client.models.ticket_id import TicketID
from openapi_client.models.ticket_price import TicketPrice
from openapi_client.models.ticket_segment import TicketSegment

class Ticket(TicketID):
    """
    Ticket
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    number_of_tickets_issued: StrictInt = Field(..., alias="numberOfTicketsIssued", description="The total number of tickets issued for the collection of flight segments example: 5")
    settlement_authorization_code: Optional[constr(strict=True, max_length=32)] = Field(None, alias="settlementAuthorizationCode", description="Electronic Settlement Authorization Code - A unique number generated by a Carrier to authorize or approve a transaction")
    tour_code: Optional[constr(strict=True, max_length=32)] = Field(None, alias="tourCode", description="A Tour Code on a flight ticket is a special code arranged between the Travel Agency and the Airlines")
    account_code: Optional[constr(strict=True, max_length=32)] = Field(None, alias="accountCode", description="The Account Code used to classify financial activities")
    ticket_designator: Optional[constr(strict=True, max_length=32)] = Field(None, alias="ticketDesignator", description="A code on airline tickets to indicate what type of discount is applied")
    person_name: PersonName = Field(..., alias="PersonName")
    reservation_locator: Optional[SupplierLocator] = Field(None, alias="ReservationLocator")
    form_of_payment: conlist(FormOfPayment, max_items=10, min_items=1) = Field(..., alias="FormOfPayment")
    ticket_segment: conlist(TicketSegment, max_items=30, min_items=1) = Field(..., alias="TicketSegment")
    ticket_price: TicketPrice = Field(..., alias="TicketPrice")
    passenger_type_code: Optional[constr(strict=True, max_length=5, min_length=3)] = Field(None, alias="PassengerTypeCode", description="Code used to identify Passengers according to various")
    validating_carrier: Optional[constr(strict=True)] = Field(None, alias="ValidatingCarrier", description="The plating carrier of the ticket")
    pricing_type: Optional[PricingTypeEnum] = Field(None, alias="PricingType")
    restrictions: Optional[conlist(constr(strict=True, max_length=128), max_items=10)] = Field(None, alias="Restrictions", description="restrictions associated with a particular fare")
    agency_info: Optional[AgencyInfo] = Field(None, alias="AgencyInfo")
    original_issue: Optional[OriginalIssue] = Field(None, alias="OriginalIssue")
    previous_issue: Optional[conlist(PreviousIssue, max_items=10)] = Field(None, alias="PreviousIssue")
    __properties = ["@type", "objID", "TicketRef", "Identifier", "numberOfTicketsIssued", "settlementAuthorizationCode", "tourCode", "accountCode", "ticketDesignator", "PersonName", "ReservationLocator", "FormOfPayment", "TicketSegment", "TicketPrice", "PassengerTypeCode", "ValidatingCarrier", "PricingType", "Restrictions", "AgencyInfo", "OriginalIssue", "PreviousIssue"]

    @validator('passenger_type_code')
    def passenger_type_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{3,5})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{3,5})/")
        return value

    @validator('validating_carrier')
    def validating_carrier_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{2,3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{2,3})/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = '@type'

    # discriminator mappings
    __discriminator_value_class_map = {
        'TicketDetail': 'TicketDetail'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(TicketDetail):
        """Create an instance of Ticket from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of person_name
        if self.person_name:
            _dict['PersonName'] = self.person_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reservation_locator
        if self.reservation_locator:
            _dict['ReservationLocator'] = self.reservation_locator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in form_of_payment (list)
        _items = []
        if self.form_of_payment:
            for _item in self.form_of_payment:
                if _item:
                    _items.append(_item.to_dict())
            _dict['FormOfPayment'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ticket_segment (list)
        _items = []
        if self.ticket_segment:
            for _item in self.ticket_segment:
                if _item:
                    _items.append(_item.to_dict())
            _dict['TicketSegment'] = _items
        # override the default output from pydantic by calling `to_dict()` of ticket_price
        if self.ticket_price:
            _dict['TicketPrice'] = self.ticket_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of agency_info
        if self.agency_info:
            _dict['AgencyInfo'] = self.agency_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of original_issue
        if self.original_issue:
            _dict['OriginalIssue'] = self.original_issue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in previous_issue (list)
        _items = []
        if self.previous_issue:
            for _item in self.previous_issue:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PreviousIssue'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(TicketDetail):
        """Create an instance of Ticket from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("Ticket failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.ticket_detail import TicketDetail
Ticket.update_forward_refs()

