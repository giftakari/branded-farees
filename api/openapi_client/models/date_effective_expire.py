# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictBool

class DateEffectiveExpire(BaseModel):
    """
    Used to identify the effective date and/or expiration date.
    """
    effective: Optional[date] = Field(None, description="Indicates the starting date.")
    expire: Optional[date] = Field(None, description="Indicates the ending date.")
    expire_date_exclusive_ind: Optional[StrictBool] = Field(None, alias="expireDateExclusiveInd", description="When true, indicates that the ExpireDate is the first day after the applicable period (e.g. when expire date is Oct 15  the last date of the period is Oct 14).")
    __properties = ["effective", "expire", "expireDateExclusiveInd"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DateEffectiveExpire:
        """Create an instance of DateEffectiveExpire from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DateEffectiveExpire:
        """Create an instance of DateEffectiveExpire from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DateEffectiveExpire.parse_obj(obj)

        _obj = DateEffectiveExpire.parse_obj({
            "effective": obj.get("effective"),
            "expire": obj.get("expire"),
            "expire_date_exclusive_ind": obj.get("expireDateExclusiveInd")
        })
        return _obj


