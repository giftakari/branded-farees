# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictStr, conlist, constr
from openapi_client.models.address_bldg_room import AddressBldgRoom
from openapi_client.models.address_street_number import AddressStreetNumber
from openapi_client.models.country import Country
from openapi_client.models.enum_address_role import EnumAddressRole
from openapi_client.models.state_prov import StateProv

class Address(BaseModel):
    """
    Address
    """
    type: StrictStr = Field(..., alias="@type")
    id: Optional[StrictStr] = Field(None, description="Internally referenced id")
    bldg_room: Optional[AddressBldgRoom] = Field(None, alias="BldgRoom")
    number: Optional[AddressStreetNumber] = Field(None, alias="Number")
    street: Optional[constr(strict=True, max_length=128)] = Field(None, alias="Street", description="May contain the street number when the Street number element is missing.")
    address_line: Optional[conlist(constr(strict=True, max_length=128), max_items=3)] = Field(None, alias="AddressLine", description="Additional address line details")
    city: constr(strict=True, max_length=128) = Field(..., alias="City", description="City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).")
    county: Optional[constr(strict=True, max_length=128)] = Field(None, alias="County", description="County or Region Name (e.g., Fairfax).")
    state_prov: Optional[StateProv] = Field(None, alias="StateProv")
    country: Optional[Country] = Field(None, alias="Country")
    postal_code: Optional[constr(strict=True, max_length=128)] = Field(None, alias="PostalCode", description="Post Office Code number.")
    addressee: Optional[constr(strict=True, max_length=37)] = Field(None, alias="Addressee", description="The name of the company or person to be addressed")
    role: Optional[EnumAddressRole] = None
    __properties = ["@type", "id", "BldgRoom", "Number", "Street", "AddressLine", "City", "County", "StateProv", "Country", "PostalCode", "Addressee", "role"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = '@type'

    # discriminator mappings
    __discriminator_value_class_map = {
        'AddressDetail': 'AddressDetail'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(AddressDetail):
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of bldg_room
        if self.bldg_room:
            _dict['BldgRoom'] = self.bldg_room.to_dict()
        # override the default output from pydantic by calling `to_dict()` of number
        if self.number:
            _dict['Number'] = self.number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state_prov
        if self.state_prov:
            _dict['StateProv'] = self.state_prov.to_dict()
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['Country'] = self.country.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(AddressDetail):
        """Create an instance of Address from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("Address failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.address_detail import AddressDetail
Address.update_forward_refs()

