# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from openapi_client.models.address import Address
from openapi_client.models.code import Code
from openapi_client.models.operation_times import OperationTimes
from openapi_client.models.telephone import Telephone

class VendorLocation(BaseModel):
    """
    The vendor's location number for pickup or return
    """
    type: StrictStr = Field(..., alias="@type")
    rental_location_number: Optional[constr(strict=True, max_length=5)] = Field(None, alias="rentalLocationNumber")
    vendor_code: Optional[constr(strict=True, max_length=512)] = Field(None, alias="vendorCode")
    rental_location_name: Optional[constr(strict=True, max_length=128)] = Field(None, alias="rentalLocationName")
    code: Optional[constr(strict=True, max_length=32)] = None
    address: Optional[Address] = Field(None, alias="Address")
    telephone: Optional[conlist(Telephone, max_items=5)] = Field(None, alias="Telephone")
    description: Optional[constr(strict=True, max_length=1024)] = Field(None, alias="Description", description="Detailed location information on where to pick up and return a vehicle")
    operation_times: Optional[conlist(OperationTimes, max_items=50)] = Field(None, alias="OperationTimes")
    directions: Optional[constr(strict=True, max_length=512)] = Field(None, alias="Directions", description="Directions for collecting the vehicle")
    additional_instructions: Optional[constr(strict=True, max_length=512)] = Field(None, alias="AdditionalInstructions", description="Additional instructions regarding the vendor location")
    shuttle_service: Optional[constr(strict=True, max_length=512)] = Field(None, alias="ShuttleService", description="Information on shuttle service")
    rental_location_code: Optional[Code] = Field(None, alias="RentalLocationCode")
    counter_location_code: Optional[Code] = Field(None, alias="CounterLocationCode")
    __properties = ["@type", "rentalLocationNumber", "vendorCode", "rentalLocationName", "code", "Address", "Telephone", "Description", "OperationTimes", "Directions", "AdditionalInstructions", "ShuttleService", "RentalLocationCode", "CounterLocationCode"]

    @validator('rental_location_number')
    def rental_location_number_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([0-9a-zA-Z]+)?", value):
            raise ValueError(r"must validate the regular expression /([0-9a-zA-Z]+)?/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VendorLocation:
        """Create an instance of VendorLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['Address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in telephone (list)
        _items = []
        if self.telephone:
            for _item in self.telephone:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Telephone'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in operation_times (list)
        _items = []
        if self.operation_times:
            for _item in self.operation_times:
                if _item:
                    _items.append(_item.to_dict())
            _dict['OperationTimes'] = _items
        # override the default output from pydantic by calling `to_dict()` of rental_location_code
        if self.rental_location_code:
            _dict['RentalLocationCode'] = self.rental_location_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of counter_location_code
        if self.counter_location_code:
            _dict['CounterLocationCode'] = self.counter_location_code.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VendorLocation:
        """Create an instance of VendorLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VendorLocation.parse_obj(obj)

        _obj = VendorLocation.parse_obj({
            "type": obj.get("@type"),
            "rental_location_number": obj.get("rentalLocationNumber"),
            "vendor_code": obj.get("vendorCode"),
            "rental_location_name": obj.get("rentalLocationName"),
            "code": obj.get("code"),
            "address": Address.from_dict(obj.get("Address")) if obj.get("Address") is not None else None,
            "telephone": [Telephone.from_dict(_item) for _item in obj.get("Telephone")] if obj.get("Telephone") is not None else None,
            "description": obj.get("Description"),
            "operation_times": [OperationTimes.from_dict(_item) for _item in obj.get("OperationTimes")] if obj.get("OperationTimes") is not None else None,
            "directions": obj.get("Directions"),
            "additional_instructions": obj.get("AdditionalInstructions"),
            "shuttle_service": obj.get("ShuttleService"),
            "rental_location_code": Code.from_dict(obj.get("RentalLocationCode")) if obj.get("RentalLocationCode") is not None else None,
            "counter_location_code": Code.from_dict(obj.get("CounterLocationCode")) if obj.get("CounterLocationCode") is not None else None
        })
        return _obj


