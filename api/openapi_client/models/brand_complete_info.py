# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import Field, conlist
from openapi_client.models.additional_brand_attribute import AdditionalBrandAttribute
from openapi_client.models.brand import Brand
from openapi_client.models.brand_attribute import BrandAttribute
from openapi_client.models.brand_text import BrandText
from openapi_client.models.identifier import Identifier

class BrandCompleteInfo(Brand):
    """
    BrandCompleteInfo
    """
    brand_text: conlist(BrandText, max_items=10, min_items=1) = Field(..., alias="BrandText")
    __properties = ["@type", "id", "BrandRef", "Identifier", "name", "tier", "shelfNumbers", "BrandAttribute", "AdditionalBrandAttribute", "ImageURL", "BrandText"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BrandCompleteInfo:
        """Create an instance of BrandCompleteInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in brand_attribute (list)
        _items = []
        if self.brand_attribute:
            for _item in self.brand_attribute:
                if _item:
                    _items.append(_item.to_dict())
            _dict['BrandAttribute'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in additional_brand_attribute (list)
        _items = []
        if self.additional_brand_attribute:
            for _item in self.additional_brand_attribute:
                if _item:
                    _items.append(_item.to_dict())
            _dict['AdditionalBrandAttribute'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in brand_text (list)
        _items = []
        if self.brand_text:
            for _item in self.brand_text:
                if _item:
                    _items.append(_item.to_dict())
            _dict['BrandText'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BrandCompleteInfo:
        """Create an instance of BrandCompleteInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BrandCompleteInfo.parse_obj(obj)

        _obj = BrandCompleteInfo.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "brand_ref": obj.get("BrandRef"),
            "identifier": Identifier.from_dict(obj.get("Identifier")) if obj.get("Identifier") is not None else None,
            "name": obj.get("name"),
            "tier": obj.get("tier"),
            "shelf_numbers": obj.get("shelfNumbers"),
            "brand_attribute": [BrandAttribute.from_dict(_item) for _item in obj.get("BrandAttribute")] if obj.get("BrandAttribute") is not None else None,
            "additional_brand_attribute": [AdditionalBrandAttribute.from_dict(_item) for _item in obj.get("AdditionalBrandAttribute")] if obj.get("AdditionalBrandAttribute") is not None else None,
            "image_url": obj.get("ImageURL"),
            "brand_text": [BrandText.from_dict(_item) for _item in obj.get("BrandText")] if obj.get("BrandText") is not None else None
        })
        return _obj


