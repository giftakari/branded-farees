# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import Field, StrictBool, conint, constr, validator
from openapi_client.models.advance_payment import AdvancePayment
from openapi_client.models.payment_after_reservation import PaymentAfterReservation
from openapi_client.models.payment_before_departure import PaymentBeforeDeparture

class AdvancePaymentRequired(AdvancePayment):
    """
    AdvancePaymentRequired
    """
    waver_date: Optional[constr(strict=True)] = Field(None, alias="waverDate", description="Waver date")
    payment_after_reservation: PaymentAfterReservation = Field(..., alias="PaymentAfterReservation")
    payment_before_departure: PaymentBeforeDeparture = Field(..., alias="PaymentBeforeDeparture")
    payment_travel_segment_indicator_atpco: Optional[conint(strict=True, ge=0)] = Field(None, alias="PaymentTravelSegmentIndicatorATPCO", description="The ATPCO paymentgeographic indicator. Example = 1st segment over the water between area 2 and 3")
    instant_payment_ind: Optional[StrictBool] = Field(None, alias="instantPaymentInd", description="if true, the Offer must be paid at the same time as the reservation is created")
    ealier_applies_ind: Optional[StrictBool] = Field(None, alias="ealierAppliesInd", description="If true, the earlier of the payment restrictions apply")
    later_applies_ind: Optional[StrictBool] = Field(None, alias="laterAppliesInd", description="If true, the later of the payment restrictions apply")
    __properties = ["@type", "waverDate", "PaymentAfterReservation", "PaymentBeforeDeparture", "PaymentTravelSegmentIndicatorATPCO", "instantPaymentInd", "ealierAppliesInd", "laterAppliesInd"]

    @validator('waver_date')
    def waver_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"(\d{4}-\d{2}-\d{2})", value):
            raise ValueError(r"must validate the regular expression /(\d{4}-\d{2}-\d{2})/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdvancePaymentRequired:
        """Create an instance of AdvancePaymentRequired from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payment_after_reservation
        if self.payment_after_reservation:
            _dict['PaymentAfterReservation'] = self.payment_after_reservation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_before_departure
        if self.payment_before_departure:
            _dict['PaymentBeforeDeparture'] = self.payment_before_departure.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdvancePaymentRequired:
        """Create an instance of AdvancePaymentRequired from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdvancePaymentRequired.parse_obj(obj)

        _obj = AdvancePaymentRequired.parse_obj({
            "type": obj.get("@type"),
            "waver_date": obj.get("waverDate"),
            "payment_after_reservation": PaymentAfterReservation.from_dict(obj.get("PaymentAfterReservation")) if obj.get("PaymentAfterReservation") is not None else None,
            "payment_before_departure": PaymentBeforeDeparture.from_dict(obj.get("PaymentBeforeDeparture")) if obj.get("PaymentBeforeDeparture") is not None else None,
            "payment_travel_segment_indicator_atpco": obj.get("PaymentTravelSegmentIndicatorATPCO"),
            "instant_payment_ind": obj.get("instantPaymentInd"),
            "ealier_applies_ind": obj.get("ealierAppliesInd"),
            "later_applies_ind": obj.get("laterAppliesInd")
        })
        return _obj


