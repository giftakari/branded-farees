# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, conint, constr, validator
from openapi_client.models.yes_no_unknown_enum import YesNoUnknownEnum

class Tax(BaseModel):
    """
    Tax
    """
    value: Optional[Union[StrictFloat, StrictInt]] = None
    currency_code: Optional[constr(strict=True)] = Field(None, alias="currencyCode", description="Currency code of the city.")
    tax_code: Optional[constr(strict=True, max_length=512)] = Field(None, alias="taxCode", description="Tax code of the city")
    reporting_authority: Optional[constr(strict=True, max_length=512)] = Field(None, alias="reportingAuthority", description="Identifies the reporting authority such as airport code for XF taxes.")
    purpose: Optional[constr(strict=True, max_length=512)] = Field(None, description="purpose")
    description: Optional[constr(strict=True, max_length=4096)] = Field(None, description="additional information")
    included_in_base: Optional[YesNoUnknownEnum] = Field(None, alias="includedInBase")
    code_authority: Optional[constr(strict=True, max_length=32)] = Field(None, alias="codeAuthority", description="Code Authority")
    decimal_place: Optional[conint(strict=True, ge=0)] = Field(None, alias="decimalPlace", description="Allowed number of decimals.")
    decimal_authority: Optional[constr(strict=True, max_length=32)] = Field(None, alias="decimalAuthority", description="Decimal Authority")
    exempt_ind: Optional[StrictBool] = Field(None, alias="exemptInd", description="If true, this tax is exempt")
    __properties = ["value", "currencyCode", "taxCode", "reportingAuthority", "purpose", "description", "includedInBase", "codeAuthority", "decimalPlace", "decimalAuthority", "exemptInd"]

    @validator('currency_code')
    def currency_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[a-zA-Z]{3}", value):
            raise ValueError(r"must validate the regular expression /[a-zA-Z]{3}/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Tax:
        """Create an instance of Tax from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Tax:
        """Create an instance of Tax from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Tax.parse_obj(obj)

        _obj = Tax.parse_obj({
            "value": obj.get("value"),
            "currency_code": obj.get("currencyCode"),
            "tax_code": obj.get("taxCode"),
            "reporting_authority": obj.get("reportingAuthority"),
            "purpose": obj.get("purpose"),
            "description": obj.get("description"),
            "included_in_base": obj.get("includedInBase"),
            "code_authority": obj.get("codeAuthority"),
            "decimal_place": obj.get("decimalPlace"),
            "decimal_authority": obj.get("decimalAuthority"),
            "exempt_ind": obj.get("exemptInd")
        })
        return _obj


