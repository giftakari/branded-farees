# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr
from openapi_client.models.approximate_rate import ApproximateRate
from openapi_client.models.customer_loyalty import CustomerLoyalty
from openapi_client.models.rate_availability_enum import RateAvailabilityEnum
from openapi_client.models.rate_distance import RateDistance
from openapi_client.models.rate_period_enum import RatePeriodEnum
from openapi_client.models.rate_qualifier_enum import RateQualifierEnum
from openapi_client.models.supplier_rate import SupplierRate
from openapi_client.models.text_block import TextBlock

class VehiclePrice(BaseModel):
    """
    VehiclePrice
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    id: Optional[StrictStr] = Field(None, description="Internal ID")
    rate_source: Optional[constr(strict=True, max_length=32)] = Field(None, alias="rateSource", description="Assigned Type: c-1100:StringTiny")
    rate_guaranteed_ind: Optional[StrictBool] = Field(None, alias="rateGuaranteedInd", description="Assigned Type: c-1100:OptionalIndicator")
    rate_period: Optional[RatePeriodEnum] = Field(None, alias="ratePeriod")
    rate_distance: Optional[RateDistance] = Field(None, alias="RateDistance")
    rate_description: Optional[conlist(TextBlock, max_items=100)] = Field(None, alias="RateDescription")
    rate_availability: Optional[RateAvailabilityEnum] = Field(None, alias="RateAvailability")
    supplier_rate: SupplierRate = Field(..., alias="SupplierRate")
    approximate_rate: Optional[ApproximateRate] = Field(None, alias="ApproximateRate")
    customer_loyalty: Optional[CustomerLoyalty] = Field(None, alias="CustomerLoyalty")
    rate_qualifier: Optional[RateQualifierEnum] = Field(None, alias="RateQualifier")
    __properties = ["@type", "id", "rateSource", "rateGuaranteedInd", "ratePeriod", "RateDistance", "RateDescription", "RateAvailability", "SupplierRate", "ApproximateRate", "CustomerLoyalty", "RateQualifier"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VehiclePrice:
        """Create an instance of VehiclePrice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of rate_distance
        if self.rate_distance:
            _dict['RateDistance'] = self.rate_distance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rate_description (list)
        _items = []
        if self.rate_description:
            for _item in self.rate_description:
                if _item:
                    _items.append(_item.to_dict())
            _dict['RateDescription'] = _items
        # override the default output from pydantic by calling `to_dict()` of supplier_rate
        if self.supplier_rate:
            _dict['SupplierRate'] = self.supplier_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of approximate_rate
        if self.approximate_rate:
            _dict['ApproximateRate'] = self.approximate_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_loyalty
        if self.customer_loyalty:
            _dict['CustomerLoyalty'] = self.customer_loyalty.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VehiclePrice:
        """Create an instance of VehiclePrice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VehiclePrice.parse_obj(obj)

        _obj = VehiclePrice.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "rate_source": obj.get("rateSource"),
            "rate_guaranteed_ind": obj.get("rateGuaranteedInd"),
            "rate_period": obj.get("ratePeriod"),
            "rate_distance": RateDistance.from_dict(obj.get("RateDistance")) if obj.get("RateDistance") is not None else None,
            "rate_description": [TextBlock.from_dict(_item) for _item in obj.get("RateDescription")] if obj.get("RateDescription") is not None else None,
            "rate_availability": obj.get("RateAvailability"),
            "supplier_rate": SupplierRate.from_dict(obj.get("SupplierRate")) if obj.get("SupplierRate") is not None else None,
            "approximate_rate": ApproximateRate.from_dict(obj.get("ApproximateRate")) if obj.get("ApproximateRate") is not None else None,
            "customer_loyalty": CustomerLoyalty.from_dict(obj.get("CustomerLoyalty")) if obj.get("CustomerLoyalty") is not None else None,
            "rate_qualifier": obj.get("RateQualifier")
        })
        return _obj


