# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator
from openapi_client.models.cancel import Cancel
from openapi_client.models.change import Change
from openapi_client.models.penalty_source_code import PenaltySourceCode
from openapi_client.models.waiver_enum import WaiverEnum

class Penalties(BaseModel):
    """
    Penalties
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    change: Optional[conlist(Change, max_items=10)] = Field(None, alias="Change")
    cancel: Optional[conlist(Cancel, max_items=10)] = Field(None, alias="Cancel")
    waiver: Optional[conlist(WaiverEnum, max_items=10)] = Field(None, alias="Waiver")
    penalty_source_code: Optional[PenaltySourceCode] = Field(None, alias="PenaltySourceCode")
    passenger_type_codes: Optional[conlist(constr(strict=True, max_length=5, min_length=3))] = Field(None, alias="PassengerTypeCodes", description="The passenger type codes that this penalty applies to")
    involuntary_ind: Optional[StrictBool] = Field(None, alias="involuntaryInd", description="Penalties apply for involuntary changes initiated by the airline")
    __properties = ["@type", "Change", "Cancel", "Waiver", "PenaltySourceCode", "PassengerTypeCodes", "involuntaryInd"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Penalties:
        """Create an instance of Penalties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in change (list)
        _items = []
        if self.change:
            for _item in self.change:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Change'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cancel (list)
        _items = []
        if self.cancel:
            for _item in self.cancel:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Cancel'] = _items
        # override the default output from pydantic by calling `to_dict()` of penalty_source_code
        if self.penalty_source_code:
            _dict['PenaltySourceCode'] = self.penalty_source_code.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Penalties:
        """Create an instance of Penalties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Penalties.parse_obj(obj)

        _obj = Penalties.parse_obj({
            "type": obj.get("@type"),
            "change": [Change.from_dict(_item) for _item in obj.get("Change")] if obj.get("Change") is not None else None,
            "cancel": [Cancel.from_dict(_item) for _item in obj.get("Cancel")] if obj.get("Cancel") is not None else None,
            "waiver": obj.get("Waiver"),
            "penalty_source_code": PenaltySourceCode.from_dict(obj.get("PenaltySourceCode")) if obj.get("PenaltySourceCode") is not None else None,
            "passenger_type_codes": obj.get("PassengerTypeCodes"),
            "involuntary_ind": obj.get("involuntaryInd")
        })
        return _obj


