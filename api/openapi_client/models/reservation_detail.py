# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, conlist
from openapi_client.models.accounting import Accounting
from openapi_client.models.agency_service_fee import AgencyServiceFee
from openapi_client.models.document_overrides import DocumentOverrides
from openapi_client.models.form_of_payment_id import FormOfPaymentID
from openapi_client.models.identifier import Identifier
from openapi_client.models.offer import Offer
from openapi_client.models.offer_link import OfferLink
from openapi_client.models.organization_loyalty_program import OrganizationLoyaltyProgram
from openapi_client.models.payment import Payment
from openapi_client.models.preference import Preference
from openapi_client.models.primary_contact import PrimaryContact
from openapi_client.models.receipt import Receipt
from openapi_client.models.reservation import Reservation
from openapi_client.models.reservation_comment import ReservationComment
from openapi_client.models.reservation_display_sequence import ReservationDisplaySequence
from openapi_client.models.shopping_cart import ShoppingCart
from openapi_client.models.special_service import SpecialService
from openapi_client.models.travel_agency import TravelAgency
from openapi_client.models.traveler import Traveler
from openapi_client.models.traveler_product import TravelerProduct

class ReservationDetail(Reservation):
    """
    ReservationDetail
    """
    accounting: Optional[Accounting] = Field(None, alias="Accounting")
    document_overrides: Optional[conlist(DocumentOverrides, max_items=5)] = Field(None, alias="DocumentOverrides")
    __properties = ["@type", "id", "Identifier", "Offer", "Traveler", "TravelerProduct", "FormOfPayment", "Payment", "Receipt", "OfferLink", "ReservationComment", "PrimaryContact", "TravelAgency", "GroupName", "SpecialService", "Preference", "OrganizationLoyaltyProgram", "ShoppingCart", "ReservationDisplaySequence", "AgencyServiceFee", "autoDeleteDate", "notificationDate", "Accounting", "DocumentOverrides"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReservationDetail:
        """Create an instance of ReservationDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in offer (list)
        _items = []
        if self.offer:
            for _item in self.offer:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Offer'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in traveler (list)
        _items = []
        if self.traveler:
            for _item in self.traveler:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Traveler'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in traveler_product (list)
        _items = []
        if self.traveler_product:
            for _item in self.traveler_product:
                if _item:
                    _items.append(_item.to_dict())
            _dict['TravelerProduct'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in form_of_payment (list)
        _items = []
        if self.form_of_payment:
            for _item in self.form_of_payment:
                if _item:
                    _items.append(_item.to_dict())
            _dict['FormOfPayment'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment (list)
        _items = []
        if self.payment:
            for _item in self.payment:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Payment'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in receipt (list)
        _items = []
        if self.receipt:
            for _item in self.receipt:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Receipt'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in offer_link (list)
        _items = []
        if self.offer_link:
            for _item in self.offer_link:
                if _item:
                    _items.append(_item.to_dict())
            _dict['OfferLink'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reservation_comment (list)
        _items = []
        if self.reservation_comment:
            for _item in self.reservation_comment:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ReservationComment'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in primary_contact (list)
        _items = []
        if self.primary_contact:
            for _item in self.primary_contact:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PrimaryContact'] = _items
        # override the default output from pydantic by calling `to_dict()` of travel_agency
        if self.travel_agency:
            _dict['TravelAgency'] = self.travel_agency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in special_service (list)
        _items = []
        if self.special_service:
            for _item in self.special_service:
                if _item:
                    _items.append(_item.to_dict())
            _dict['SpecialService'] = _items
        # override the default output from pydantic by calling `to_dict()` of preference
        if self.preference:
            _dict['Preference'] = self.preference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in organization_loyalty_program (list)
        _items = []
        if self.organization_loyalty_program:
            for _item in self.organization_loyalty_program:
                if _item:
                    _items.append(_item.to_dict())
            _dict['OrganizationLoyaltyProgram'] = _items
        # override the default output from pydantic by calling `to_dict()` of shopping_cart
        if self.shopping_cart:
            _dict['ShoppingCart'] = self.shopping_cart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reservation_display_sequence
        if self.reservation_display_sequence:
            _dict['ReservationDisplaySequence'] = self.reservation_display_sequence.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in agency_service_fee (list)
        _items = []
        if self.agency_service_fee:
            for _item in self.agency_service_fee:
                if _item:
                    _items.append(_item.to_dict())
            _dict['AgencyServiceFee'] = _items
        # override the default output from pydantic by calling `to_dict()` of accounting
        if self.accounting:
            _dict['Accounting'] = self.accounting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in document_overrides (list)
        _items = []
        if self.document_overrides:
            for _item in self.document_overrides:
                if _item:
                    _items.append(_item.to_dict())
            _dict['DocumentOverrides'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReservationDetail:
        """Create an instance of ReservationDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReservationDetail.parse_obj(obj)

        _obj = ReservationDetail.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "identifier": Identifier.from_dict(obj.get("Identifier")) if obj.get("Identifier") is not None else None,
            "offer": [Offer.from_dict(_item) for _item in obj.get("Offer")] if obj.get("Offer") is not None else None,
            "traveler": [Traveler.from_dict(_item) for _item in obj.get("Traveler")] if obj.get("Traveler") is not None else None,
            "traveler_product": [TravelerProduct.from_dict(_item) for _item in obj.get("TravelerProduct")] if obj.get("TravelerProduct") is not None else None,
            "form_of_payment": [FormOfPaymentID.from_dict(_item) for _item in obj.get("FormOfPayment")] if obj.get("FormOfPayment") is not None else None,
            "payment": [Payment.from_dict(_item) for _item in obj.get("Payment")] if obj.get("Payment") is not None else None,
            "receipt": [Receipt.from_dict(_item) for _item in obj.get("Receipt")] if obj.get("Receipt") is not None else None,
            "offer_link": [OfferLink.from_dict(_item) for _item in obj.get("OfferLink")] if obj.get("OfferLink") is not None else None,
            "reservation_comment": [ReservationComment.from_dict(_item) for _item in obj.get("ReservationComment")] if obj.get("ReservationComment") is not None else None,
            "primary_contact": [PrimaryContact.from_dict(_item) for _item in obj.get("PrimaryContact")] if obj.get("PrimaryContact") is not None else None,
            "travel_agency": TravelAgency.from_dict(obj.get("TravelAgency")) if obj.get("TravelAgency") is not None else None,
            "group_name": obj.get("GroupName"),
            "special_service": [SpecialService.from_dict(_item) for _item in obj.get("SpecialService")] if obj.get("SpecialService") is not None else None,
            "preference": Preference.from_dict(obj.get("Preference")) if obj.get("Preference") is not None else None,
            "organization_loyalty_program": [OrganizationLoyaltyProgram.from_dict(_item) for _item in obj.get("OrganizationLoyaltyProgram")] if obj.get("OrganizationLoyaltyProgram") is not None else None,
            "shopping_cart": ShoppingCart.from_dict(obj.get("ShoppingCart")) if obj.get("ShoppingCart") is not None else None,
            "reservation_display_sequence": ReservationDisplaySequence.from_dict(obj.get("ReservationDisplaySequence")) if obj.get("ReservationDisplaySequence") is not None else None,
            "agency_service_fee": [AgencyServiceFee.from_dict(_item) for _item in obj.get("AgencyServiceFee")] if obj.get("AgencyServiceFee") is not None else None,
            "auto_delete_date": obj.get("autoDeleteDate"),
            "notification_date": obj.get("notificationDate"),
            "accounting": Accounting.from_dict(obj.get("Accounting")) if obj.get("Accounting") is not None else None,
            "document_overrides": [DocumentOverrides.from_dict(_item) for _item in obj.get("DocumentOverrides")] if obj.get("DocumentOverrides") is not None else None
        })
        return _obj


