# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr, validator
from openapi_client.models.availability_source_code_enum import AvailabilitySourceCodeENUM
from openapi_client.models.cabin_air_enum import CabinAirEnum
from openapi_client.models.content_source_enum import ContentSourceEnum

class SpecificFlightCriteria(BaseModel):
    """
    SpecificFlightCriteria
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    carrier: constr(strict=True) = Field(..., description="Carrier")
    flight_number: constr(strict=True) = Field(..., alias="flightNumber", description="Flight Number")
    departure_date: date = Field(..., alias="departureDate", description="date of departure")
    departure_time: Optional[constr(strict=True)] = Field(None, alias="departureTime", description="The departure time in local timezone")
    arrival_date: Optional[date] = Field(None, alias="arrivalDate", description="Arrival date")
    arrival_time: Optional[constr(strict=True)] = Field(None, alias="arrivalTime", description="The arrival time in local timezone")
    var_from: constr(strict=True, max_length=3, min_length=3) = Field(..., alias="from", description="From Airport Code IATA")
    to: constr(strict=True, max_length=3, min_length=3) = Field(..., description="to Airpor Code IATA")
    cabin: Optional[CabinAirEnum] = None
    class_of_service: Optional[constr(strict=True, max_length=2, min_length=1)] = Field(None, alias="classOfService", description="The class of service")
    brand_tier: Optional[StrictInt] = Field(None, alias="brandTier", description="Brand tier")
    segment_sequence: StrictInt = Field(..., alias="segmentSequence", description="Segment sequence")
    availability_source_code: Optional[AvailabilitySourceCodeENUM] = Field(None, alias="AvailabilitySourceCode")
    content_source: Optional[ContentSourceEnum] = Field(None, alias="ContentSource")
    bound_flights_ind: Optional[StrictBool] = Field(None, alias="boundFlightsInd", description="if true indicates that the flight availability was polled (availability check) using connecting segments. If false, flights were polled as point to point segments.")
    __properties = ["@type", "carrier", "flightNumber", "departureDate", "departureTime", "arrivalDate", "arrivalTime", "from", "to", "cabin", "classOfService", "brandTier", "segmentSequence", "AvailabilitySourceCode", "ContentSource", "boundFlightsInd"]

    @validator('carrier')
    def carrier_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"([a-zA-Z0-9]{2,3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{2,3})/")
        return value

    @validator('flight_number')
    def flight_number_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"[0-9]{1,4}[A-Z]?|OPEN|ARNK", value):
            raise ValueError(r"must validate the regular expression /[0-9]{1,4}[A-Z]?|OPEN|ARNK/")
        return value

    @validator('departure_time')
    def departure_time_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"(([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)((:?)[0-5]\d)?([\.,]\d+(?!:))?", value):
            raise ValueError(r"must validate the regular expression /(([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)((:?)[0-5]\d)?([\.,]\d+(?!:))?/")
        return value

    @validator('arrival_time')
    def arrival_time_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"(([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)((:?)[0-5]\d)?([\.,]\d+(?!:))?", value):
            raise ValueError(r"must validate the regular expression /(([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)((:?)[0-5]\d)?([\.,]\d+(?!:))?/")
        return value

    @validator('var_from')
    def var_from_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"([a-zA-Z]{3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z]{3})/")
        return value

    @validator('to')
    def to_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"([a-zA-Z]{3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z]{3})/")
        return value

    @validator('class_of_service')
    def class_of_service_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{1,2})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{1,2})/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SpecificFlightCriteria:
        """Create an instance of SpecificFlightCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SpecificFlightCriteria:
        """Create an instance of SpecificFlightCriteria from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SpecificFlightCriteria.parse_obj(obj)

        _obj = SpecificFlightCriteria.parse_obj({
            "type": obj.get("@type"),
            "carrier": obj.get("carrier"),
            "flight_number": obj.get("flightNumber"),
            "departure_date": obj.get("departureDate"),
            "departure_time": obj.get("departureTime"),
            "arrival_date": obj.get("arrivalDate"),
            "arrival_time": obj.get("arrivalTime"),
            "var_from": obj.get("from"),
            "to": obj.get("to"),
            "cabin": obj.get("cabin"),
            "class_of_service": obj.get("classOfService"),
            "brand_tier": obj.get("brandTier"),
            "segment_sequence": obj.get("segmentSequence"),
            "availability_source_code": obj.get("AvailabilitySourceCode"),
            "content_source": obj.get("ContentSource"),
            "bound_flights_ind": obj.get("boundFlightsInd")
        })
        return _obj


