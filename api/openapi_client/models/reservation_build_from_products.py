# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, conlist
from openapi_client.models.accounting_id import AccountingID
from openapi_client.models.document_overrides_id import DocumentOverridesID
from openapi_client.models.form_of_payment_id import FormOfPaymentID
from openapi_client.models.payment_id import PaymentID
from openapi_client.models.preference_id import PreferenceID
from openapi_client.models.pricing_modifiers_air import PricingModifiersAir
from openapi_client.models.primary_contact_id import PrimaryContactID
from openapi_client.models.product_criteria_air import ProductCriteriaAir
from openapi_client.models.receipt_confirmation import ReceiptConfirmation
from openapi_client.models.reservation_build import ReservationBuild
from openapi_client.models.reservation_comment_id import ReservationCommentID
from openapi_client.models.special_service_id import SpecialServiceID
from openapi_client.models.travel_agency import TravelAgency
from openapi_client.models.traveler_id import TravelerID

class ReservationBuildFromProducts(ReservationBuild):
    """
    ReservationBuildFromProducts
    """
    product_criteria_air: conlist(ProductCriteriaAir, max_items=10) = Field(..., alias="ProductCriteriaAir")
    pricing_modifiers_air: Optional[PricingModifiersAir] = Field(None, alias="PricingModifiersAir")
    __properties = ["@type", "Traveler", "FormOfPayment", "Payment", "ReservationComment", "PrimaryContact", "SpecialService", "Accounting", "DocumentOverrides", "Preference", "ReceiptConfirmation", "TravelAgency", "ProductCriteriaAir", "PricingModifiersAir"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReservationBuildFromProducts:
        """Create an instance of ReservationBuildFromProducts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in traveler (list)
        _items = []
        if self.traveler:
            for _item in self.traveler:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Traveler'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in form_of_payment (list)
        _items = []
        if self.form_of_payment:
            for _item in self.form_of_payment:
                if _item:
                    _items.append(_item.to_dict())
            _dict['FormOfPayment'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment (list)
        _items = []
        if self.payment:
            for _item in self.payment:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Payment'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reservation_comment (list)
        _items = []
        if self.reservation_comment:
            for _item in self.reservation_comment:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ReservationComment'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in primary_contact (list)
        _items = []
        if self.primary_contact:
            for _item in self.primary_contact:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PrimaryContact'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in special_service (list)
        _items = []
        if self.special_service:
            for _item in self.special_service:
                if _item:
                    _items.append(_item.to_dict())
            _dict['SpecialService'] = _items
        # override the default output from pydantic by calling `to_dict()` of accounting
        if self.accounting:
            _dict['Accounting'] = self.accounting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in document_overrides (list)
        _items = []
        if self.document_overrides:
            for _item in self.document_overrides:
                if _item:
                    _items.append(_item.to_dict())
            _dict['DocumentOverrides'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in preference (list)
        _items = []
        if self.preference:
            for _item in self.preference:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Preference'] = _items
        # override the default output from pydantic by calling `to_dict()` of receipt_confirmation
        if self.receipt_confirmation:
            _dict['ReceiptConfirmation'] = self.receipt_confirmation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of travel_agency
        if self.travel_agency:
            _dict['TravelAgency'] = self.travel_agency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in product_criteria_air (list)
        _items = []
        if self.product_criteria_air:
            for _item in self.product_criteria_air:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ProductCriteriaAir'] = _items
        # override the default output from pydantic by calling `to_dict()` of pricing_modifiers_air
        if self.pricing_modifiers_air:
            _dict['PricingModifiersAir'] = self.pricing_modifiers_air.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReservationBuildFromProducts:
        """Create an instance of ReservationBuildFromProducts from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReservationBuildFromProducts.parse_obj(obj)

        _obj = ReservationBuildFromProducts.parse_obj({
            "type": obj.get("@type"),
            "traveler": [TravelerID.from_dict(_item) for _item in obj.get("Traveler")] if obj.get("Traveler") is not None else None,
            "form_of_payment": [FormOfPaymentID.from_dict(_item) for _item in obj.get("FormOfPayment")] if obj.get("FormOfPayment") is not None else None,
            "payment": [PaymentID.from_dict(_item) for _item in obj.get("Payment")] if obj.get("Payment") is not None else None,
            "reservation_comment": [ReservationCommentID.from_dict(_item) for _item in obj.get("ReservationComment")] if obj.get("ReservationComment") is not None else None,
            "primary_contact": [PrimaryContactID.from_dict(_item) for _item in obj.get("PrimaryContact")] if obj.get("PrimaryContact") is not None else None,
            "special_service": [SpecialServiceID.from_dict(_item) for _item in obj.get("SpecialService")] if obj.get("SpecialService") is not None else None,
            "accounting": AccountingID.from_dict(obj.get("Accounting")) if obj.get("Accounting") is not None else None,
            "document_overrides": [DocumentOverridesID.from_dict(_item) for _item in obj.get("DocumentOverrides")] if obj.get("DocumentOverrides") is not None else None,
            "preference": [PreferenceID.from_dict(_item) for _item in obj.get("Preference")] if obj.get("Preference") is not None else None,
            "receipt_confirmation": ReceiptConfirmation.from_dict(obj.get("ReceiptConfirmation")) if obj.get("ReceiptConfirmation") is not None else None,
            "travel_agency": TravelAgency.from_dict(obj.get("TravelAgency")) if obj.get("TravelAgency") is not None else None,
            "product_criteria_air": [ProductCriteriaAir.from_dict(_item) for _item in obj.get("ProductCriteriaAir")] if obj.get("ProductCriteriaAir") is not None else None,
            "pricing_modifiers_air": PricingModifiersAir.from_dict(obj.get("PricingModifiersAir")) if obj.get("PricingModifiersAir") is not None else None
        })
        return _obj


