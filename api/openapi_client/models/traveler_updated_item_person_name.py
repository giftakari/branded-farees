# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import Field
from openapi_client.models.person_name_updatable import PersonNameUpdatable
from openapi_client.models.traveler_updated_item import TravelerUpdatedItem

class TravelerUpdatedItemPersonName(TravelerUpdatedItem):
    """
    TravelerUpdatedItemPersonName
    """
    person_name_updatable: PersonNameUpdatable = Field(..., alias="PersonNameUpdatable")
    __properties = ["@type", "TravelerUpdatableItemID", "addInd", "modifyInd", "deleteInd", "PersonNameUpdatable"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TravelerUpdatedItemPersonName:
        """Create an instance of TravelerUpdatedItemPersonName from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of person_name_updatable
        if self.person_name_updatable:
            _dict['PersonNameUpdatable'] = self.person_name_updatable.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TravelerUpdatedItemPersonName:
        """Create an instance of TravelerUpdatedItemPersonName from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TravelerUpdatedItemPersonName.parse_obj(obj)

        _obj = TravelerUpdatedItemPersonName.parse_obj({
            "type": obj.get("@type"),
            "traveler_updatable_item_id": obj.get("TravelerUpdatableItemID"),
            "add_ind": obj.get("addInd"),
            "modify_ind": obj.get("modifyInd"),
            "delete_ind": obj.get("deleteInd"),
            "person_name_updatable": PersonNameUpdatable.from_dict(obj.get("PersonNameUpdatable")) if obj.get("PersonNameUpdatable") is not None else None
        })
        return _obj


