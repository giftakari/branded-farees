# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator
from openapi_client.models.geographic_restriction import GeographicRestriction
from openapi_client.models.journey_type_enum import JourneyTypeEnum

class StopoverRestriction(BaseModel):
    """
    StopoverRestriction
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    stopover_charge_ref: StrictStr = Field(..., alias="stopoverChargeRef", description="Reference to the Stopover Charge")
    journey_types: Optional[conlist(JourneyTypeEnum)] = Field(None, alias="journeyTypes")
    departure_carrier: Optional[constr(strict=True)] = Field(None, alias="departureCarrier", description="Departure carrier airline code")
    arrival_airline: Optional[constr(strict=True)] = Field(None, alias="arrivalAirline", description="Arrival carrier airline code")
    geographic_restriction: Optional[conlist(GeographicRestriction, max_items=5)] = Field(None, alias="GeographicRestriction")
    online_stopover_only_ind: Optional[StrictBool] = Field(None, alias="onlineStopoverOnlyInd", description="If true, the stopover may only take place when the arriving and departing airline are the same")
    __properties = ["@type", "stopoverChargeRef", "journeyTypes", "departureCarrier", "arrivalAirline", "GeographicRestriction", "onlineStopoverOnlyInd"]

    @validator('departure_carrier')
    def departure_carrier_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{2,3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{2,3})/")
        return value

    @validator('arrival_airline')
    def arrival_airline_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{2,3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{2,3})/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StopoverRestriction:
        """Create an instance of StopoverRestriction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in geographic_restriction (list)
        _items = []
        if self.geographic_restriction:
            for _item in self.geographic_restriction:
                if _item:
                    _items.append(_item.to_dict())
            _dict['GeographicRestriction'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StopoverRestriction:
        """Create an instance of StopoverRestriction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StopoverRestriction.parse_obj(obj)

        _obj = StopoverRestriction.parse_obj({
            "type": obj.get("@type"),
            "stopover_charge_ref": obj.get("stopoverChargeRef"),
            "journey_types": obj.get("journeyTypes"),
            "departure_carrier": obj.get("departureCarrier"),
            "arrival_airline": obj.get("arrivalAirline"),
            "geographic_restriction": [GeographicRestriction.from_dict(_item) for _item in obj.get("GeographicRestriction")] if obj.get("GeographicRestriction") is not None else None,
            "online_stopover_only_ind": obj.get("onlineStopoverOnlyInd")
        })
        return _obj


