# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import Field, constr
from openapi_client.models.customer_loyalty import CustomerLoyalty
from openapi_client.models.rate_candidate import RateCandidate
from openapi_client.models.rate_category_enum import RateCategoryEnum

class RateCandidateDetail(RateCandidate):
    """
    RateCandidateDetail
    """
    rate_id: Optional[constr(strict=True, max_length=32)] = Field(None, alias="rateID", description="ID of the rate plan associated with the negotiated rate.")
    customer_loyalty: Optional[CustomerLoyalty] = Field(None, alias="CustomerLoyalty")
    __properties = ["@type", "priority", "rateCode", "rateCategory", "chainCode", "propertyCode", "rateID", "CustomerLoyalty"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RateCandidateDetail:
        """Create an instance of RateCandidateDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of customer_loyalty
        if self.customer_loyalty:
            _dict['CustomerLoyalty'] = self.customer_loyalty.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RateCandidateDetail:
        """Create an instance of RateCandidateDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RateCandidateDetail.parse_obj(obj)

        _obj = RateCandidateDetail.parse_obj({
            "type": obj.get("@type"),
            "priority": obj.get("priority"),
            "rate_code": obj.get("rateCode"),
            "rate_category": obj.get("rateCategory"),
            "chain_code": obj.get("chainCode"),
            "property_code": obj.get("propertyCode"),
            "rate_id": obj.get("rateID"),
            "customer_loyalty": CustomerLoyalty.from_dict(obj.get("CustomerLoyalty")) if obj.get("CustomerLoyalty") is not None else None
        })
        return _obj


