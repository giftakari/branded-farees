# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import Field, StrictBool, StrictInt, StrictStr, conint, conlist, constr, validator
from openapi_client.models.amount import Amount
from openapi_client.models.arrival import Arrival
from openapi_client.models.availability_source_code_enum import AvailabilitySourceCodeENUM
from openapi_client.models.baggage_allowance import BaggageAllowance
from openapi_client.models.baggage_item import BaggageItem
from openapi_client.models.baggage_recheck import BaggageRecheck
from openapi_client.models.baggage_type_enum import BaggageTypeEnum
from openapi_client.models.commission import Commission
from openapi_client.models.customer_loyalty import CustomerLoyalty
from openapi_client.models.departure import Departure
from openapi_client.models.discount import Discount
from openapi_client.models.document_valid_date_range import DocumentValidDateRange
from openapi_client.models.fare_guarantee_policy import FareGuaranteePolicy
from openapi_client.models.filed_amount import FiledAmount
from openapi_client.models.flight_detail import FlightDetail
from openapi_client.models.flight_segment import FlightSegment
from openapi_client.models.identifier import Identifier
from openapi_client.models.identifier_ref import IdentifierRef
from openapi_client.models.intermediate_stop import IntermediateStop
from openapi_client.models.net_fare_info import NetFareInfo
from openapi_client.models.organization_information import OrganizationInformation
from openapi_client.models.passenger_flight import PassengerFlight
from openapi_client.models.penalties import Penalties
from openapi_client.models.pricing_agency import PricingAgency
from openapi_client.models.promotional_code import PromotionalCode
from openapi_client.models.restriction import Restriction
from openapi_client.models.surcharges import Surcharges
from openapi_client.models.text_block import TextBlock
from openapi_client.models.ticketing_agency import TicketingAgency
from openapi_client.models.tour_codes import TourCodes
from openapi_client.models.traveler_identifier_ref import TravelerIdentifierRef
from openapi_client.models.validating_airline import ValidatingAirline

class ImportsCatalogAirReservationResource(FlightDetail):
    """
    ImportsCatalogAirReservationResource
    """
    type: StrictStr = Field(..., alias="@type")
    id: Optional[StrictStr] = Field(None, description="Local indentifier within a given message for this object.")
    terms_and_conditions_ref: Optional[StrictStr] = Field(None, alias="termsAndConditionsRef", description="Used to reference another instance of this object in the same message.")
    identifier: Optional[Identifier] = Field(None, alias="Identifier")
    expiry_date: Optional[datetime] = Field(None, alias="ExpiryDate", description="The data and time the offer will expire")
    customer_loyalty: Optional[conlist(CustomerLoyalty, max_items=5)] = Field(None, alias="CustomerLoyalty")
    text_block: Optional[conlist(TextBlock, max_items=50)] = Field(None, alias="TextBlock")
    baggage_allowance: Optional[conlist(BaggageAllowance, max_items=99)] = Field(None, alias="BaggageAllowance")
    fare_rule_identifier_ref: Optional[IdentifierRef] = Field(None, alias="FareRuleIdentifierRef")
    restriction: Optional[conlist(Restriction, max_items=10)] = Field(None, alias="Restriction")
    organization_information: Optional[OrganizationInformation] = Field(None, alias="OrganizationInformation")
    validating_airline: Optional[conlist(ValidatingAirline, max_items=10)] = Field(None, alias="ValidatingAirline")
    baggage_recheck: Optional[conlist(BaggageRecheck, max_items=10)] = Field(None, alias="BaggageRecheck")
    ticketing_agency: Optional[conlist(TicketingAgency, max_items=10)] = Field(None, alias="TicketingAgency")
    payment_time_limit: Optional[datetime] = Field(None, alias="PaymentTimeLimit", description="The date and time by which the Offer must be paid for once the Reservation is completed")
    promotional_code: Optional[PromotionalCode] = Field(None, alias="PromotionalCode")
    penalties: Optional[conlist(Penalties, max_items=10)] = Field(None, alias="Penalties")
    fare_guarantee_policy: Optional[conlist(FareGuaranteePolicy, max_items=10)] = Field(None, alias="FareGuaranteePolicy")
    pricing_agency: Optional[conlist(PricingAgency, max_items=10)] = Field(None, alias="PricingAgency")
    instant_purchase_ind: Optional[StrictBool] = Field(None, alias="instantPurchaseInd", description="If true the Offer/Offering must be paid for at the same time as creating the Reservation")
    secure_flight_passenger_data_required_ind: Optional[StrictBool] = Field(None, alias="secureFlightPassengerDataRequiredInd", description="If true, Secure Flight Passenger Data must be input for all Travelers to complete the Reservation")
    tour_codes: Optional[conlist(TourCodes, max_items=10)] = Field(None, alias="TourCodes")
    document_valid_date_range: Optional[DocumentValidDateRange] = Field(None, alias="DocumentValidDateRange")
    product_ref: Optional[StrictStr] = Field(None, alias="productRef", description="Used to reference another instance of this object in the same message")
    quantity: Optional[conint(strict=True, ge=0)] = Field(None, alias="Quantity", description="The quantity of the product")
    total_duration: Optional[StrictStr] = Field(None, alias="totalDuration", description="Total duration of all Segments that are part of this ProductAir")
    flight_segment: conlist(FlightSegment, max_items=99, min_items=1) = Field(..., alias="FlightSegment")
    passenger_flight: conlist(PassengerFlight, max_items=10, min_items=1) = Field(..., alias="PassengerFlight")
    amount: Optional[Amount] = Field(None, alias="Amount")
    commission: Optional[Commission] = Field(None, alias="Commission")
    quantity: Optional[StrictInt] = Field(None, description="The quantity value")
    requested_passenger_type: Optional[constr(strict=True, max_length=5, min_length=3)] = Field(None, alias="requestedPassengerType", description="The requested passenger type code")
    filed_amount: Optional[FiledAmount] = Field(None, alias="FiledAmount")
    discount: Optional[Discount] = Field(None, alias="Discount")
    net_fare_info: Optional[NetFareInfo] = Field(None, alias="NetFareInfo")
    traveler_identifier_ref: Optional[TravelerIdentifierRef] = Field(None, alias="TravelerIdentifierRef")
    net_base_amount: Optional[FiledAmount] = Field(None, alias="NetBaseAmount")
    fare_calculation: Optional[constr(strict=True, max_length=512)] = Field(None, alias="FareCalculation")
    surcharges: Optional[Surcharges] = Field(None, alias="Surcharges")
    passenger_type_codes: Optional[conlist(constr(strict=True, max_length=5, min_length=3))] = Field(None, alias="passengerTypeCodes", description="List of passenger type codes")
    baggage_type: Optional[BaggageTypeEnum] = Field(None, alias="baggageType")
    product_ref: Optional[conlist(StrictStr)] = Field(None, alias="ProductRef", description="A product is any product, service or package of products and services  that can be priced and purchased by a specific supplier.")
    baggage_item: Optional[conlist(BaggageItem, max_items=10)] = Field(None, alias="BaggageItem")
    segment_sequence_list: Optional[conlist(StrictInt)] = Field(None, alias="SegmentSequenceList", description="Segment sequence is only to be used when the baggage allowance differs between segments within a product. If so, then the ProducRef must be specified.")
    text: Optional[conlist(constr(strict=True, max_length=128), max_items=35)] = Field(None, alias="Text")
    url: Optional[StrictStr] = Field(None, description="Url for the airline's baggage information web site")
    __properties = ["@type", "id", "FlightRef", "Identifier", "distance", "stops", "duration", "carrier", "number", "operatingCarrier", "operatingCarrierName", "equipment", "Departure", "Arrival", "IntermediateStop", "subjectToGovernmentApprovalInd", "AvailabilitySourceCode", "termsAndConditionsRef", "ExpiryDate", "CustomerLoyalty", "TextBlock", "BaggageAllowance", "FareRuleIdentifierRef", "Restriction", "OrganizationInformation", "ValidatingAirline", "BaggageRecheck", "TicketingAgency", "PaymentTimeLimit", "PromotionalCode", "Penalties", "FareGuaranteePolicy", "PricingAgency", "instantPurchaseInd", "secureFlightPassengerDataRequiredInd", "TourCodes", "DocumentValidDateRange", "productRef", "Quantity", "totalDuration", "FlightSegment", "PassengerFlight", "Amount", "Commission", "quantity", "requestedPassengerType", "FiledAmount", "Discount", "NetFareInfo", "TravelerIdentifierRef", "NetBaseAmount", "FareCalculation", "Surcharges", "passengerTypeCodes", "baggageType", "ProductRef", "BaggageItem", "SegmentSequenceList", "Text", "url"]

    @validator('requested_passenger_type')
    def requested_passenger_type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{3,5})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{3,5})/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ImportsCatalogAirReservationResource:
        """Create an instance of ImportsCatalogAirReservationResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of departure
        if self.departure:
            _dict['Departure'] = self.departure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of arrival
        if self.arrival:
            _dict['Arrival'] = self.arrival.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in intermediate_stop (list)
        _items = []
        if self.intermediate_stop:
            for _item in self.intermediate_stop:
                if _item:
                    _items.append(_item.to_dict())
            _dict['IntermediateStop'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in customer_loyalty (list)
        _items = []
        if self.customer_loyalty:
            for _item in self.customer_loyalty:
                if _item:
                    _items.append(_item.to_dict())
            _dict['CustomerLoyalty'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in text_block (list)
        _items = []
        if self.text_block:
            for _item in self.text_block:
                if _item:
                    _items.append(_item.to_dict())
            _dict['TextBlock'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in baggage_allowance (list)
        _items = []
        if self.baggage_allowance:
            for _item in self.baggage_allowance:
                if _item:
                    _items.append(_item.to_dict())
            _dict['BaggageAllowance'] = _items
        # override the default output from pydantic by calling `to_dict()` of fare_rule_identifier_ref
        if self.fare_rule_identifier_ref:
            _dict['FareRuleIdentifierRef'] = self.fare_rule_identifier_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in restriction (list)
        _items = []
        if self.restriction:
            for _item in self.restriction:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Restriction'] = _items
        # override the default output from pydantic by calling `to_dict()` of organization_information
        if self.organization_information:
            _dict['OrganizationInformation'] = self.organization_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in validating_airline (list)
        _items = []
        if self.validating_airline:
            for _item in self.validating_airline:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ValidatingAirline'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in baggage_recheck (list)
        _items = []
        if self.baggage_recheck:
            for _item in self.baggage_recheck:
                if _item:
                    _items.append(_item.to_dict())
            _dict['BaggageRecheck'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ticketing_agency (list)
        _items = []
        if self.ticketing_agency:
            for _item in self.ticketing_agency:
                if _item:
                    _items.append(_item.to_dict())
            _dict['TicketingAgency'] = _items
        # override the default output from pydantic by calling `to_dict()` of promotional_code
        if self.promotional_code:
            _dict['PromotionalCode'] = self.promotional_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in penalties (list)
        _items = []
        if self.penalties:
            for _item in self.penalties:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Penalties'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fare_guarantee_policy (list)
        _items = []
        if self.fare_guarantee_policy:
            for _item in self.fare_guarantee_policy:
                if _item:
                    _items.append(_item.to_dict())
            _dict['FareGuaranteePolicy'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pricing_agency (list)
        _items = []
        if self.pricing_agency:
            for _item in self.pricing_agency:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PricingAgency'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tour_codes (list)
        _items = []
        if self.tour_codes:
            for _item in self.tour_codes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['TourCodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of document_valid_date_range
        if self.document_valid_date_range:
            _dict['DocumentValidDateRange'] = self.document_valid_date_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in flight_segment (list)
        _items = []
        if self.flight_segment:
            for _item in self.flight_segment:
                if _item:
                    _items.append(_item.to_dict())
            _dict['FlightSegment'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in passenger_flight (list)
        _items = []
        if self.passenger_flight:
            for _item in self.passenger_flight:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PassengerFlight'] = _items
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['Amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of commission
        if self.commission:
            _dict['Commission'] = self.commission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filed_amount
        if self.filed_amount:
            _dict['FiledAmount'] = self.filed_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict['Discount'] = self.discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of net_fare_info
        if self.net_fare_info:
            _dict['NetFareInfo'] = self.net_fare_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of traveler_identifier_ref
        if self.traveler_identifier_ref:
            _dict['TravelerIdentifierRef'] = self.traveler_identifier_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of net_base_amount
        if self.net_base_amount:
            _dict['NetBaseAmount'] = self.net_base_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of surcharges
        if self.surcharges:
            _dict['Surcharges'] = self.surcharges.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in baggage_item (list)
        _items = []
        if self.baggage_item:
            for _item in self.baggage_item:
                if _item:
                    _items.append(_item.to_dict())
            _dict['BaggageItem'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ImportsCatalogAirReservationResource:
        """Create an instance of ImportsCatalogAirReservationResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ImportsCatalogAirReservationResource.parse_obj(obj)

        _obj = ImportsCatalogAirReservationResource.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "flight_ref": obj.get("FlightRef"),
            "identifier": Identifier.from_dict(obj.get("Identifier")) if obj.get("Identifier") is not None else None,
            "distance": obj.get("distance"),
            "stops": obj.get("stops"),
            "duration": obj.get("duration"),
            "carrier": obj.get("carrier"),
            "number": obj.get("number"),
            "operating_carrier": obj.get("operatingCarrier"),
            "operating_carrier_name": obj.get("operatingCarrierName"),
            "equipment": obj.get("equipment"),
            "departure": Departure.from_dict(obj.get("Departure")) if obj.get("Departure") is not None else None,
            "arrival": Arrival.from_dict(obj.get("Arrival")) if obj.get("Arrival") is not None else None,
            "intermediate_stop": [IntermediateStop.from_dict(_item) for _item in obj.get("IntermediateStop")] if obj.get("IntermediateStop") is not None else None,
            "subject_to_government_approval_ind": obj.get("subjectToGovernmentApprovalInd"),
            "availability_source_code": obj.get("AvailabilitySourceCode"),
            "terms_and_conditions_ref": obj.get("termsAndConditionsRef"),
            "expiry_date": obj.get("ExpiryDate"),
            "customer_loyalty": [CustomerLoyalty.from_dict(_item) for _item in obj.get("CustomerLoyalty")] if obj.get("CustomerLoyalty") is not None else None,
            "text_block": [TextBlock.from_dict(_item) for _item in obj.get("TextBlock")] if obj.get("TextBlock") is not None else None,
            "baggage_allowance": [BaggageAllowance.from_dict(_item) for _item in obj.get("BaggageAllowance")] if obj.get("BaggageAllowance") is not None else None,
            "fare_rule_identifier_ref": IdentifierRef.from_dict(obj.get("FareRuleIdentifierRef")) if obj.get("FareRuleIdentifierRef") is not None else None,
            "restriction": [Restriction.from_dict(_item) for _item in obj.get("Restriction")] if obj.get("Restriction") is not None else None,
            "organization_information": OrganizationInformation.from_dict(obj.get("OrganizationInformation")) if obj.get("OrganizationInformation") is not None else None,
            "validating_airline": [ValidatingAirline.from_dict(_item) for _item in obj.get("ValidatingAirline")] if obj.get("ValidatingAirline") is not None else None,
            "baggage_recheck": [BaggageRecheck.from_dict(_item) for _item in obj.get("BaggageRecheck")] if obj.get("BaggageRecheck") is not None else None,
            "ticketing_agency": [TicketingAgency.from_dict(_item) for _item in obj.get("TicketingAgency")] if obj.get("TicketingAgency") is not None else None,
            "payment_time_limit": obj.get("PaymentTimeLimit"),
            "promotional_code": PromotionalCode.from_dict(obj.get("PromotionalCode")) if obj.get("PromotionalCode") is not None else None,
            "penalties": [Penalties.from_dict(_item) for _item in obj.get("Penalties")] if obj.get("Penalties") is not None else None,
            "fare_guarantee_policy": [FareGuaranteePolicy.from_dict(_item) for _item in obj.get("FareGuaranteePolicy")] if obj.get("FareGuaranteePolicy") is not None else None,
            "pricing_agency": [PricingAgency.from_dict(_item) for _item in obj.get("PricingAgency")] if obj.get("PricingAgency") is not None else None,
            "instant_purchase_ind": obj.get("instantPurchaseInd"),
            "secure_flight_passenger_data_required_ind": obj.get("secureFlightPassengerDataRequiredInd"),
            "tour_codes": [TourCodes.from_dict(_item) for _item in obj.get("TourCodes")] if obj.get("TourCodes") is not None else None,
            "document_valid_date_range": DocumentValidDateRange.from_dict(obj.get("DocumentValidDateRange")) if obj.get("DocumentValidDateRange") is not None else None,
            "product_ref": obj.get("productRef"),
            "quantity": obj.get("Quantity"),
            "total_duration": obj.get("totalDuration"),
            "flight_segment": [FlightSegment.from_dict(_item) for _item in obj.get("FlightSegment")] if obj.get("FlightSegment") is not None else None,
            "passenger_flight": [PassengerFlight.from_dict(_item) for _item in obj.get("PassengerFlight")] if obj.get("PassengerFlight") is not None else None,
            "amount": Amount.from_dict(obj.get("Amount")) if obj.get("Amount") is not None else None,
            "commission": Commission.from_dict(obj.get("Commission")) if obj.get("Commission") is not None else None,
            "quantity": obj.get("quantity"),
            "requested_passenger_type": obj.get("requestedPassengerType"),
            "filed_amount": FiledAmount.from_dict(obj.get("FiledAmount")) if obj.get("FiledAmount") is not None else None,
            "discount": Discount.from_dict(obj.get("Discount")) if obj.get("Discount") is not None else None,
            "net_fare_info": NetFareInfo.from_dict(obj.get("NetFareInfo")) if obj.get("NetFareInfo") is not None else None,
            "traveler_identifier_ref": TravelerIdentifierRef.from_dict(obj.get("TravelerIdentifierRef")) if obj.get("TravelerIdentifierRef") is not None else None,
            "net_base_amount": FiledAmount.from_dict(obj.get("NetBaseAmount")) if obj.get("NetBaseAmount") is not None else None,
            "fare_calculation": obj.get("FareCalculation"),
            "surcharges": Surcharges.from_dict(obj.get("Surcharges")) if obj.get("Surcharges") is not None else None,
            "passenger_type_codes": obj.get("passengerTypeCodes"),
            "baggage_type": obj.get("baggageType"),
            "product_ref": obj.get("ProductRef"),
            "baggage_item": [BaggageItem.from_dict(_item) for _item in obj.get("BaggageItem")] if obj.get("BaggageItem") is not None else None,
            "segment_sequence_list": obj.get("SegmentSequenceList"),
            "text": obj.get("Text"),
            "url": obj.get("url")
        })
        return _obj


