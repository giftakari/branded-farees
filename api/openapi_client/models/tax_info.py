# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from openapi_client.models.currency_code import CurrencyCode
from openapi_client.models.tax_breakdown import TaxBreakdown

class TaxInfo(BaseModel):
    """
    TaxInfo
    """
    tax_code: StrictStr = Field(..., alias="TaxCode", description="The tax code")
    currency_code: Optional[CurrencyCode] = Field(None, alias="CurrencyCode")
    amount: Union[StrictFloat, StrictInt] = Field(..., alias="Amount", description="The amount of the tax applied")
    tax_breakdown: conlist(TaxBreakdown, max_items=20) = Field(..., alias="TaxBreakdown", description="The breakdown of the tax for this tax code")
    __properties = ["TaxCode", "CurrencyCode", "Amount", "TaxBreakdown"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TaxInfo:
        """Create an instance of TaxInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of currency_code
        if self.currency_code:
            _dict['CurrencyCode'] = self.currency_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tax_breakdown (list)
        _items = []
        if self.tax_breakdown:
            for _item in self.tax_breakdown:
                if _item:
                    _items.append(_item.to_dict())
            _dict['TaxBreakdown'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TaxInfo:
        """Create an instance of TaxInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TaxInfo.parse_obj(obj)

        _obj = TaxInfo.parse_obj({
            "tax_code": obj.get("TaxCode"),
            "currency_code": CurrencyCode.from_dict(obj.get("CurrencyCode")) if obj.get("CurrencyCode") is not None else None,
            "amount": obj.get("Amount"),
            "tax_breakdown": [TaxBreakdown.from_dict(_item) for _item in obj.get("TaxBreakdown")] if obj.get("TaxBreakdown") is not None else None
        })
        return _obj


