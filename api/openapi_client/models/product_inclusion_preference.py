# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, constr
from openapi_client.models.brand_classification_enum import BrandClassificationEnum

class ProductInclusionPreference(BaseModel):
    """
    ProductInclusionPreference
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    leg_sequence: Optional[conlist(StrictInt)] = Field(None, alias="legSequence", description="The legSequence value")
    classification: conlist(BrandClassificationEnum, max_items=10, min_items=1) = Field(..., alias="Classification")
    additional_classification: Optional[conlist(constr(strict=True, max_length=512), max_items=10)] = Field(None, alias="AdditionalClassification")
    exact_match_ind: Optional[StrictBool] = Field(None, alias="exactMatchInd", description="This indicator is deprecated. The default behavior will be to provide an exact match to the product inclusion preferences")
    best_match_ind: Optional[StrictBool] = Field(None, alias="bestMatchInd", description="If true, the bestMatch will be returned according to the select product inclusions")
    __properties = ["@type", "legSequence", "Classification", "AdditionalClassification", "exactMatchInd", "bestMatchInd"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProductInclusionPreference:
        """Create an instance of ProductInclusionPreference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProductInclusionPreference:
        """Create an instance of ProductInclusionPreference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProductInclusionPreference.parse_obj(obj)

        _obj = ProductInclusionPreference.parse_obj({
            "type": obj.get("@type"),
            "leg_sequence": obj.get("legSequence"),
            "classification": obj.get("Classification"),
            "additional_classification": obj.get("AdditionalClassification"),
            "exact_match_ind": obj.get("exactMatchInd"),
            "best_match_ind": obj.get("bestMatchInd")
        })
        return _obj


