# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr

class ThreeDomainSecurityResults(BaseModel):
    """
    ThreeDomainSecurityResults
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    c_avv: Optional[StrictStr] = Field(None, alias="cAVV", description="The cAVV value")
    p_a_res_status: Optional[constr(strict=True, max_length=1)] = Field(None, alias="pAResStatus", description="The pAResStatus value")
    signature_verfication: Optional[StrictStr] = Field(None, alias="signatureVerfication", description="The signature Verification value")
    transaction_id: Optional[StrictStr] = Field(None, alias="transactionID", description="The transaction ID")
    x_id: Optional[StrictStr] = Field(None, alias="xID", description="Merchants must ensure that each Payer Authentication Request (PAReq) contains a unique combination of account ID and XID")
    e_ci: Optional[constr(strict=True, max_length=32)] = Field(None, alias="eCI", description="Electronic Commerce Indicator - 3-D secure data, contact your authenticator for rules and downline processing.")
    u_caf_indicator: Optional[constr(strict=True, max_length=32)] = Field(None, alias="uCAFIndicator", description="Universal Card Authentication Fieldâ„¢ MasterCard only UCAF is the mechanism that is used to transmit the AAV from the merchant to issuer for authentication purposes during the authorization process")
    __properties = ["@type", "cAVV", "pAResStatus", "signatureVerfication", "transactionID", "xID", "eCI", "uCAFIndicator"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ThreeDomainSecurityResults:
        """Create an instance of ThreeDomainSecurityResults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ThreeDomainSecurityResults:
        """Create an instance of ThreeDomainSecurityResults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ThreeDomainSecurityResults.parse_obj(obj)

        _obj = ThreeDomainSecurityResults.parse_obj({
            "type": obj.get("@type"),
            "c_avv": obj.get("cAVV"),
            "p_a_res_status": obj.get("pAResStatus"),
            "signature_verfication": obj.get("signatureVerfication"),
            "transaction_id": obj.get("transactionID"),
            "x_id": obj.get("xID"),
            "e_ci": obj.get("eCI"),
            "u_caf_indicator": obj.get("uCAFIndicator")
        })
        return _obj


