# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt
from openapi_client.models.rate_period_enum import RatePeriodEnum
from openapi_client.models.unit_of_distance_enum import UnitOfDistanceEnum

class RateDistance(BaseModel):
    """
    Rate for the period defined by the attributes
    """
    value: Optional[Union[StrictFloat, StrictInt]] = None
    unlimited_distance_ind: Optional[StrictBool] = Field(None, alias="unlimitedDistanceInd", description="Assigned Type: c-1100:OptionalIndicator")
    requested_code_applied_ind: Optional[StrictBool] = Field(None, alias="requestedCodeAppliedInd", description="Assigned Type: c-1100:OptionalIndicator")
    allowance: Optional[StrictInt] = Field(None, description="Assigned Type: c-1100:NumberTripleDigit")
    distance_units: Optional[UnitOfDistanceEnum] = Field(None, alias="distanceUnits")
    rate_period: Optional[RatePeriodEnum] = Field(None, alias="ratePeriod")
    __properties = ["value", "unlimitedDistanceInd", "requestedCodeAppliedInd", "allowance", "distanceUnits", "ratePeriod"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RateDistance:
        """Create an instance of RateDistance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RateDistance:
        """Create an instance of RateDistance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RateDistance.parse_obj(obj)

        _obj = RateDistance.parse_obj({
            "value": obj.get("value"),
            "unlimited_distance_ind": obj.get("unlimitedDistanceInd"),
            "requested_code_applied_ind": obj.get("requestedCodeAppliedInd"),
            "allowance": obj.get("allowance"),
            "distance_units": obj.get("distanceUnits"),
            "rate_period": obj.get("ratePeriod")
        })
        return _obj


