# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import Field, StrictBool
from openapi_client.models.application_limit import ApplicationLimit
from openapi_client.models.customer_loyalty import CustomerLoyalty
from openapi_client.models.identifier import Identifier
from openapi_client.models.refundability_enum import RefundabilityEnum
from openapi_client.models.terms_and_conditions_full import TermsAndConditionsFull
from openapi_client.models.text_block import TextBlock

class TermsAndConditionsFullAncillary(TermsAndConditionsFull):
    """
    TermsAndConditionsFullAncillary
    """
    application_limit: ApplicationLimit = Field(..., alias="ApplicationLimit")
    refundability: Optional[RefundabilityEnum] = Field(None, alias="Refundability")
    unsellable_ind: Optional[StrictBool] = Field(None, alias="unsellableInd", description="If true, this ancillary product can not be sold through Travelport systems")
    __properties = ["@type", "id", "termsAndConditionsRef", "Identifier", "ExpiryDate", "CustomerLoyalty", "TextBlock", "ApplicationLimit", "Refundability", "unsellableInd"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TermsAndConditionsFullAncillary:
        """Create an instance of TermsAndConditionsFullAncillary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in customer_loyalty (list)
        _items = []
        if self.customer_loyalty:
            for _item in self.customer_loyalty:
                if _item:
                    _items.append(_item.to_dict())
            _dict['CustomerLoyalty'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in text_block (list)
        _items = []
        if self.text_block:
            for _item in self.text_block:
                if _item:
                    _items.append(_item.to_dict())
            _dict['TextBlock'] = _items
        # override the default output from pydantic by calling `to_dict()` of application_limit
        if self.application_limit:
            _dict['ApplicationLimit'] = self.application_limit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refundability
        if self.refundability:
            _dict['Refundability'] = self.refundability.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TermsAndConditionsFullAncillary:
        """Create an instance of TermsAndConditionsFullAncillary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TermsAndConditionsFullAncillary.parse_obj(obj)

        _obj = TermsAndConditionsFullAncillary.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "terms_and_conditions_ref": obj.get("termsAndConditionsRef"),
            "identifier": Identifier.from_dict(obj.get("Identifier")) if obj.get("Identifier") is not None else None,
            "expiry_date": obj.get("ExpiryDate"),
            "customer_loyalty": [CustomerLoyalty.from_dict(_item) for _item in obj.get("CustomerLoyalty")] if obj.get("CustomerLoyalty") is not None else None,
            "text_block": [TextBlock.from_dict(_item) for _item in obj.get("TextBlock")] if obj.get("TextBlock") is not None else None,
            "application_limit": ApplicationLimit.from_dict(obj.get("ApplicationLimit")) if obj.get("ApplicationLimit") is not None else None,
            "refundability": RefundabilityEnum.from_dict(obj.get("Refundability")) if obj.get("Refundability") is not None else None,
            "unsellable_ind": obj.get("unsellableInd")
        })
        return _obj


