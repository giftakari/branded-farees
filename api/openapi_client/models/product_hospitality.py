# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import Field, StrictInt, constr
from openapi_client.models.date_range import DateRange
from openapi_client.models.identifier import Identifier
from openapi_client.models.product import Product
from openapi_client.models.property_key import PropertyKey
from openapi_client.models.room_type import RoomType
from openapi_client.models.yes_no_unknown_enum import YesNoUnknownEnum

class ProductHospitality(Product):
    """
    ProductHospitality
    """
    booking_code: Optional[constr(strict=True, max_length=32)] = Field(None, alias="bookingCode", description="Booking code retrieved from the Availability response.")
    guests: Optional[StrictInt] = Field(None, description="Total number of guests")
    more_rates_token: Optional[constr(strict=True, max_length=512)] = Field(None, alias="moreRatesToken", description="More rates token")
    ada_compliant: Optional[YesNoUnknownEnum] = Field(None, alias="adaCompliant")
    property_name: Optional[constr(strict=True, max_length=128)] = Field(None, alias="propertyName", description="The name of the hotel property")
    property_key: PropertyKey = Field(..., alias="PropertyKey")
    room_type: Optional[RoomType] = Field(None, alias="RoomType")
    date_range: Optional[DateRange] = Field(None, alias="DateRange")
    __properties = ["@type", "id", "productRef", "Identifier", "Quantity", "bookingCode", "guests", "moreRatesToken", "adaCompliant", "propertyName", "PropertyKey", "RoomType", "DateRange"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProductHospitality:
        """Create an instance of ProductHospitality from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of property_key
        if self.property_key:
            _dict['PropertyKey'] = self.property_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of room_type
        if self.room_type:
            _dict['RoomType'] = self.room_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_range
        if self.date_range:
            _dict['DateRange'] = self.date_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProductHospitality:
        """Create an instance of ProductHospitality from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProductHospitality.parse_obj(obj)

        _obj = ProductHospitality.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "product_ref": obj.get("productRef"),
            "identifier": Identifier.from_dict(obj.get("Identifier")) if obj.get("Identifier") is not None else None,
            "quantity": obj.get("Quantity"),
            "booking_code": obj.get("bookingCode"),
            "guests": obj.get("guests"),
            "more_rates_token": obj.get("moreRatesToken"),
            "ada_compliant": obj.get("adaCompliant"),
            "property_name": obj.get("propertyName"),
            "property_key": PropertyKey.from_dict(obj.get("PropertyKey")) if obj.get("PropertyKey") is not None else None,
            "room_type": RoomType.from_dict(obj.get("RoomType")) if obj.get("RoomType") is not None else None,
            "date_range": DateRange.from_dict(obj.get("DateRange")) if obj.get("DateRange") is not None else None
        })
        return _obj


