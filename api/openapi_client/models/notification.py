# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from openapi_client.models.queue_number import QueueNumber

class Notification(BaseModel):
    """
    Notification
    """
    queue_number: Optional[conlist(QueueNumber, max_items=5, min_items=1)] = Field(None, alias="QueueNumber")
    var_date: Optional[date] = Field(None, alias="Date", description="The notification date is equivalent to ticket time limit and will place the Reservation on the defined queue for the date specified. Sending a new notificiation date at commit step will update the existing notificationDate. Sending 000/00/00 will delete an existing notificationDate.")
    __properties = ["QueueNumber", "Date"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Notification:
        """Create an instance of Notification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in queue_number (list)
        _items = []
        if self.queue_number:
            for _item in self.queue_number:
                if _item:
                    _items.append(_item.to_dict())
            _dict['QueueNumber'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Notification:
        """Create an instance of Notification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Notification.parse_obj(obj)

        _obj = Notification.parse_obj({
            "queue_number": [QueueNumber.from_dict(_item) for _item in obj.get("QueueNumber")] if obj.get("QueueNumber") is not None else None,
            "var_date": obj.get("Date")
        })
        return _obj


