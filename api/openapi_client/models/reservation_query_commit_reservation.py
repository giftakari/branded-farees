# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conlist
from openapi_client.models.notification import Notification
from openapi_client.models.schedule_change_reprice_enum import ScheduleChangeRepriceEnum

class ReservationQueryCommitReservation(BaseModel):
    """
    ReservationQueryCommitReservation
    """
    notification: Optional[conlist(Notification, max_items=5, min_items=1)] = Field(None, alias="Notification")
    schedule_change_accepted_ind: Optional[StrictBool] = Field(None, alias="scheduleChangeAcceptedInd", description="if true, the schedule change is accepted by the consumer")
    error_when_offer_price_cancelled_ind: Optional[StrictBool] = Field(None, alias="errorWhenOfferPriceCancelledInd", description="If true, and the OfferPrice is invalidated, error will be returned and Reservation commit will not be processed")
    schedule_change_reprice: Optional[ScheduleChangeRepriceEnum] = Field(None, alias="scheduleChangeReprice")
    __properties = ["Notification", "scheduleChangeAcceptedInd", "errorWhenOfferPriceCancelledInd", "scheduleChangeReprice"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReservationQueryCommitReservation:
        """Create an instance of ReservationQueryCommitReservation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in notification (list)
        _items = []
        if self.notification:
            for _item in self.notification:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Notification'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReservationQueryCommitReservation:
        """Create an instance of ReservationQueryCommitReservation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReservationQueryCommitReservation.parse_obj(obj)

        _obj = ReservationQueryCommitReservation.parse_obj({
            "notification": [Notification.from_dict(_item) for _item in obj.get("Notification")] if obj.get("Notification") is not None else None,
            "schedule_change_accepted_ind": obj.get("scheduleChangeAcceptedInd"),
            "error_when_offer_price_cancelled_ind": obj.get("errorWhenOfferPriceCancelledInd"),
            "schedule_change_reprice": obj.get("scheduleChangeReprice")
        })
        return _obj


