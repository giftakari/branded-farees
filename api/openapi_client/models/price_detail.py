# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, conlist
from openapi_client.models.currency_code import CurrencyCode
from openapi_client.models.price import Price
from openapi_client.models.price_breakdown import PriceBreakdown
from openapi_client.models.vendor_currency_total import VendorCurrencyTotal

class PriceDetail(Price):
    """
    PriceDetail
    """
    price_breakdown: Optional[conlist(PriceBreakdown, max_items=50)] = Field(None, alias="PriceBreakdown")
    __properties = ["@type", "id", "CurrencyCode", "Base", "TotalTaxes", "TotalFees", "TotalPrice", "VendorCurrencyTotal", "PriceBreakdown"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PriceDetail:
        """Create an instance of PriceDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of currency_code
        if self.currency_code:
            _dict['CurrencyCode'] = self.currency_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor_currency_total
        if self.vendor_currency_total:
            _dict['VendorCurrencyTotal'] = self.vendor_currency_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in price_breakdown (list)
        _items = []
        if self.price_breakdown:
            for _item in self.price_breakdown:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PriceBreakdown'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PriceDetail:
        """Create an instance of PriceDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PriceDetail.parse_obj(obj)

        _obj = PriceDetail.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "currency_code": CurrencyCode.from_dict(obj.get("CurrencyCode")) if obj.get("CurrencyCode") is not None else None,
            "base": obj.get("Base"),
            "total_taxes": obj.get("TotalTaxes"),
            "total_fees": obj.get("TotalFees"),
            "total_price": obj.get("TotalPrice"),
            "vendor_currency_total": VendorCurrencyTotal.from_dict(obj.get("VendorCurrencyTotal")) if obj.get("VendorCurrencyTotal") is not None else None,
            "price_breakdown": [PriceBreakdown.from_dict(_item) for _item in obj.get("PriceBreakdown")] if obj.get("PriceBreakdown") is not None else None
        })
        return _obj


