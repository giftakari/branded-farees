# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from openapi_client.models.from_to import FromTo
from openapi_client.models.time_range import TimeRange

class SearchCriteriaFlight(BaseModel):
    """
    SearchCriteriaFlight
    """
    departure_date: date = Field(..., alias="departureDate", description="Preferred local departure date. Cannot be used in conjunction with arrival date")
    departure_time: Optional[StrictStr] = Field(None, alias="departureTime", description="Preferred local departure time. Cannot be used in conjunction with arrival time")
    arrival_date: Optional[date] = Field(None, alias="arrivalDate", description="Preferred local arrival date. Cannot be used in conjunction with departure date.")
    arrival_time: Optional[StrictStr] = Field(None, alias="arrivalTime", description="Preferred local arrival time. Cannot be used in conjunction with departure time.")
    leg_sequence: Optional[StrictInt] = Field(None, alias="legSequence", description="Leg sequence")
    var_from: FromTo = Field(..., alias="From")
    to: FromTo = Field(..., alias="To")
    departure_time_range: Optional[TimeRange] = Field(None, alias="DepartureTimeRange")
    __properties = ["departureDate", "departureTime", "arrivalDate", "arrivalTime", "legSequence", "From", "To", "DepartureTimeRange"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SearchCriteriaFlight:
        """Create an instance of SearchCriteriaFlight from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of var_from
        if self.var_from:
            _dict['From'] = self.var_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to
        if self.to:
            _dict['To'] = self.to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of departure_time_range
        if self.departure_time_range:
            _dict['DepartureTimeRange'] = self.departure_time_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SearchCriteriaFlight:
        """Create an instance of SearchCriteriaFlight from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SearchCriteriaFlight.parse_obj(obj)

        _obj = SearchCriteriaFlight.parse_obj({
            "departure_date": obj.get("departureDate"),
            "departure_time": obj.get("departureTime"),
            "arrival_date": obj.get("arrivalDate"),
            "arrival_time": obj.get("arrivalTime"),
            "leg_sequence": obj.get("legSequence"),
            "var_from": FromTo.from_dict(obj.get("From")) if obj.get("From") is not None else None,
            "to": FromTo.from_dict(obj.get("To")) if obj.get("To") is not None else None,
            "departure_time_range": TimeRange.from_dict(obj.get("DepartureTimeRange")) if obj.get("DepartureTimeRange") is not None else None
        })
        return _obj


