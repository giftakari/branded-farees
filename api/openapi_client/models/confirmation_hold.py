# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import Field
from openapi_client.models.confirmation import Confirmation
from openapi_client.models.locator import Locator
from openapi_client.models.offer_status import OfferStatus
from openapi_client.models.shopping_cart_product_status_air import ShoppingCartProductStatusAir

class ConfirmationHold(Confirmation):
    """
    ConfirmationHold
    """
    locator: Locator = Field(..., alias="Locator")
    offer_status: Optional[OfferStatus] = Field(None, alias="OfferStatus")
    shopping_cart_product_status: Optional[ShoppingCartProductStatusAir] = Field(None, alias="ShoppingCartProductStatus")
    __properties = ["@type", "Locator", "OfferStatus", "ShoppingCartProductStatus"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfirmationHold:
        """Create an instance of ConfirmationHold from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of locator
        if self.locator:
            _dict['Locator'] = self.locator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of offer_status
        if self.offer_status:
            _dict['OfferStatus'] = self.offer_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shopping_cart_product_status
        if self.shopping_cart_product_status:
            _dict['ShoppingCartProductStatus'] = self.shopping_cart_product_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfirmationHold:
        """Create an instance of ConfirmationHold from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfirmationHold.parse_obj(obj)

        _obj = ConfirmationHold.parse_obj({
            "type": obj.get("@type"),
            "locator": Locator.from_dict(obj.get("Locator")) if obj.get("Locator") is not None else None,
            "offer_status": OfferStatus.from_dict(obj.get("OfferStatus")) if obj.get("OfferStatus") is not None else None,
            "shopping_cart_product_status": ShoppingCartProductStatusAir.from_dict(obj.get("ShoppingCartProductStatus")) if obj.get("ShoppingCartProductStatus") is not None else None
        })
        return _obj


