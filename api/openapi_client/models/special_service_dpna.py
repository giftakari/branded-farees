# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import Field, constr
from openapi_client.models.applies_to import AppliesTo
from openapi_client.models.identifier import Identifier
from openapi_client.models.special_service import SpecialService
from openapi_client.models.status import Status
from openapi_client.models.traveler_identifier import TravelerIdentifier

class SpecialServiceDPNA(SpecialService):
    """
    SpecialServiceDPNA
    """
    description: constr(strict=True, max_length=1024) = Field(..., alias="Description", description="Describes the Traveler development or intellectual disability")
    __properties = ["@type", "id", "Identifier", "AppliesTo", "Status", "ServiceAnimalType", "TravelerIdentifier", "Description"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SpecialServiceDPNA:
        """Create an instance of SpecialServiceDPNA from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of applies_to
        if self.applies_to:
            _dict['AppliesTo'] = self.applies_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['Status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of traveler_identifier
        if self.traveler_identifier:
            _dict['TravelerIdentifier'] = self.traveler_identifier.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SpecialServiceDPNA:
        """Create an instance of SpecialServiceDPNA from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SpecialServiceDPNA.parse_obj(obj)

        _obj = SpecialServiceDPNA.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "identifier": Identifier.from_dict(obj.get("Identifier")) if obj.get("Identifier") is not None else None,
            "applies_to": AppliesTo.from_dict(obj.get("AppliesTo")) if obj.get("AppliesTo") is not None else None,
            "status": Status.from_dict(obj.get("Status")) if obj.get("Status") is not None else None,
            "service_animal_type": obj.get("ServiceAnimalType"),
            "traveler_identifier": TravelerIdentifier.from_dict(obj.get("TravelerIdentifier")) if obj.get("TravelerIdentifier") is not None else None,
            "description": obj.get("Description")
        })
        return _obj


