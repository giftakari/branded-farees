# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, conlist, constr
from openapi_client.models.agency_info import AgencyInfo
from openapi_client.models.emd_segment import EMDSegment
from openapi_client.models.emdid import EMDID
from openapi_client.models.form_of_payment import FormOfPayment
from openapi_client.models.identifier import Identifier
from openapi_client.models.person_name import PersonName
from openapi_client.models.supplier_locator import SupplierLocator
from openapi_client.models.ticket_number import TicketNumber
from openapi_client.models.total_amount import TotalAmount

class EMD(EMDID):
    """
    EMD
    """
    person_name: PersonName = Field(..., alias="PersonName")
    reservation_locator: Optional[conlist(SupplierLocator, max_items=2)] = Field(None, alias="ReservationLocator")
    agency_info: AgencyInfo = Field(..., alias="AgencyInfo")
    emd_segment: conlist(EMDSegment, max_items=16, min_items=1) = Field(..., alias="EMDSegment")
    total_amount: Optional[TotalAmount] = Field(None, alias="TotalAmount")
    form_of_payment: FormOfPayment = Field(..., alias="FormOfPayment")
    esac: Optional[constr(strict=True, max_length=128)] = Field(None, alias="ESAC", description="The BSP ESAC code assign for a void or refund transaction\\nThe BSP E")
    associated_ticket_number: Optional[TicketNumber] = Field(None, alias="AssociatedTicketNumber")
    restrictions: Optional[conlist(constr(strict=True, max_length=512), max_items=5)] = Field(None, alias="Restrictions")
    __properties = ["@type", "id", "EMDRef", "Identifier", "PersonName", "ReservationLocator", "AgencyInfo", "EMDSegment", "TotalAmount", "FormOfPayment", "ESAC", "AssociatedTicketNumber", "Restrictions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EMD:
        """Create an instance of EMD from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of person_name
        if self.person_name:
            _dict['PersonName'] = self.person_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in reservation_locator (list)
        _items = []
        if self.reservation_locator:
            for _item in self.reservation_locator:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ReservationLocator'] = _items
        # override the default output from pydantic by calling `to_dict()` of agency_info
        if self.agency_info:
            _dict['AgencyInfo'] = self.agency_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in emd_segment (list)
        _items = []
        if self.emd_segment:
            for _item in self.emd_segment:
                if _item:
                    _items.append(_item.to_dict())
            _dict['EMDSegment'] = _items
        # override the default output from pydantic by calling `to_dict()` of total_amount
        if self.total_amount:
            _dict['TotalAmount'] = self.total_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of form_of_payment
        if self.form_of_payment:
            _dict['FormOfPayment'] = self.form_of_payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of associated_ticket_number
        if self.associated_ticket_number:
            _dict['AssociatedTicketNumber'] = self.associated_ticket_number.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EMD:
        """Create an instance of EMD from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EMD.parse_obj(obj)

        _obj = EMD.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "emd_ref": obj.get("EMDRef"),
            "identifier": Identifier.from_dict(obj.get("Identifier")) if obj.get("Identifier") is not None else None,
            "person_name": PersonName.from_dict(obj.get("PersonName")) if obj.get("PersonName") is not None else None,
            "reservation_locator": [SupplierLocator.from_dict(_item) for _item in obj.get("ReservationLocator")] if obj.get("ReservationLocator") is not None else None,
            "agency_info": AgencyInfo.from_dict(obj.get("AgencyInfo")) if obj.get("AgencyInfo") is not None else None,
            "emd_segment": [EMDSegment.from_dict(_item) for _item in obj.get("EMDSegment")] if obj.get("EMDSegment") is not None else None,
            "total_amount": TotalAmount.from_dict(obj.get("TotalAmount")) if obj.get("TotalAmount") is not None else None,
            "form_of_payment": FormOfPayment.from_dict(obj.get("FormOfPayment")) if obj.get("FormOfPayment") is not None else None,
            "esac": obj.get("ESAC"),
            "associated_ticket_number": TicketNumber.from_dict(obj.get("AssociatedTicketNumber")) if obj.get("AssociatedTicketNumber") is not None else None,
            "restrictions": obj.get("Restrictions")
        })
        return _obj


