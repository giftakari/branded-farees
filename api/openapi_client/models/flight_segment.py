# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from openapi_client.models.flight_id import FlightID
from openapi_client.models.measurement import Measurement
from openapi_client.models.operational_status_enum import OperationalStatusENUM

class FlightSegment(BaseModel):
    """
    FlightSegment
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    id: Optional[StrictStr] = Field(None, description="Local indentifier within a given message for this object.")
    sequence: StrictInt = Field(..., description="Segment sequence")
    connection_duration: Optional[StrictStr] = Field(None, alias="connectionDuration", description="The actual duration (in minutes) between")
    flight: FlightID = Field(..., alias="Flight")
    operational_status: Optional[OperationalStatusENUM] = Field(None, alias="OperationalStatus")
    bound_flights_ind: Optional[StrictBool] = Field(None, alias="boundFlightsInd", description="If present and true, the Segments in this Connection must be sold and cancelled together.")
    co2_actual: Optional[Measurement] = Field(None, alias="CO2Actual")
    __properties = ["@type", "id", "sequence", "connectionDuration", "Flight", "OperationalStatus", "boundFlightsInd", "CO2Actual"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FlightSegment:
        """Create an instance of FlightSegment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of flight
        if self.flight:
            _dict['Flight'] = self.flight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operational_status
        if self.operational_status:
            _dict['OperationalStatus'] = self.operational_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of co2_actual
        if self.co2_actual:
            _dict['CO2Actual'] = self.co2_actual.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FlightSegment:
        """Create an instance of FlightSegment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FlightSegment.parse_obj(obj)

        _obj = FlightSegment.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "sequence": obj.get("sequence"),
            "connection_duration": obj.get("connectionDuration"),
            "flight": FlightID.from_dict(obj.get("Flight")) if obj.get("Flight") is not None else None,
            "operational_status": OperationalStatusENUM.from_dict(obj.get("OperationalStatus")) if obj.get("OperationalStatus") is not None else None,
            "bound_flights_ind": obj.get("boundFlightsInd"),
            "co2_actual": Measurement.from_dict(obj.get("CO2Actual")) if obj.get("CO2Actual") is not None else None
        })
        return _obj


