# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictStr, constr, validator
from openapi_client.models.amount import Amount
from openapi_client.models.commission import Commission
from openapi_client.models.cumulative_value import CumulativeValue
from openapi_client.models.filed_amount import FiledAmount
from openapi_client.models.traveler_identifier_ref import TravelerIdentifierRef
from openapi_client.models.waiver_code import WaiverCode

class Document(BaseModel):
    """
    Document
    """
    type: StrictStr = Field(..., alias="@type")
    number: Optional[constr(strict=True, max_length=32)] = Field(None, alias="Number", description="The identifying number of the document")
    traveler_identifier_ref: Optional[TravelerIdentifierRef] = Field(None, alias="TravelerIdentifierRef")
    amount: Optional[Amount] = Field(None, alias="Amount")
    waiver_code: Optional[WaiverCode] = Field(None, alias="WaiverCode")
    commission: Optional[Commission] = Field(None, alias="Commission")
    cumulative_value: Optional[CumulativeValue] = Field(None, alias="CumulativeValue")
    issuing_pcc: Optional[constr(strict=True, max_length=10, min_length=2)] = Field(None, alias="IssuingPCC", description="Document issuing pcc")
    issuing_iata: Optional[constr(strict=True)] = Field(None, alias="IssuingIATA", description="Document issuing IATA")
    issuing_city: Optional[constr(strict=True, max_length=3, min_length=3)] = Field(None, alias="IssuingCity", description="Document issuing city")
    filed_amount: Optional[FiledAmount] = Field(None, alias="FiledAmount")
    __properties = ["@type", "Number", "TravelerIdentifierRef", "Amount", "WaiverCode", "Commission", "CumulativeValue", "IssuingPCC", "IssuingIATA", "IssuingCity", "FiledAmount"]

    @validator('issuing_pcc')
    def issuing_pcc_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{2,10})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{2,10})/")
        return value

    @validator('issuing_iata')
    def issuing_iata_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([0-9]{8})", value):
            raise ValueError(r"must validate the regular expression /([0-9]{8})/")
        return value

    @validator('issuing_city')
    def issuing_city_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z]{3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z]{3})/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = '@type'

    # discriminator mappings
    __discriminator_value_class_map = {
        'DocumentAgencyServiceFee': 'DocumentAgencyServiceFee',
        'DocumentAgencyServiceFeeVoid': 'DocumentAgencyServiceFeeVoid',
        'DocumentEMD': 'DocumentEMD',
        'DocumentEMDExchange': 'DocumentEMDExchange',
        'DocumentEMDRefund': 'DocumentEMDRefund',
        'DocumentEMDVoid': 'DocumentEMDVoid',
        'DocumentForfeit': 'DocumentForfeit',
        'DocumentMCO': 'DocumentMCO',
        'DocumentMCOExchange': 'DocumentMCOExchange',
        'DocumentMCORefund': 'DocumentMCORefund',
        'DocumentMCOVoid': 'DocumentMCOVoid',
        'DocumentTicket': 'DocumentTicket',
        'DocumentTicketExchange': 'DocumentTicketExchange',
        'DocumentTicketRefund': 'DocumentTicketRefund',
        'DocumentTicketRetained': 'DocumentTicketRetained',
        'DocumentTicketVoid': 'DocumentTicketVoid'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(DocumentAgencyServiceFee, DocumentAgencyServiceFeeVoid, DocumentEMD, DocumentEMDExchange, DocumentEMDRefund, DocumentEMDVoid, DocumentForfeit, DocumentMCO, DocumentMCOExchange, DocumentMCORefund, DocumentMCOVoid, DocumentTicket, DocumentTicketExchange, DocumentTicketRefund, DocumentTicketRetained, DocumentTicketVoid):
        """Create an instance of Document from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of traveler_identifier_ref
        if self.traveler_identifier_ref:
            _dict['TravelerIdentifierRef'] = self.traveler_identifier_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['Amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of waiver_code
        if self.waiver_code:
            _dict['WaiverCode'] = self.waiver_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of commission
        if self.commission:
            _dict['Commission'] = self.commission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cumulative_value
        if self.cumulative_value:
            _dict['CumulativeValue'] = self.cumulative_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filed_amount
        if self.filed_amount:
            _dict['FiledAmount'] = self.filed_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(DocumentAgencyServiceFee, DocumentAgencyServiceFeeVoid, DocumentEMD, DocumentEMDExchange, DocumentEMDRefund, DocumentEMDVoid, DocumentForfeit, DocumentMCO, DocumentMCOExchange, DocumentMCORefund, DocumentMCOVoid, DocumentTicket, DocumentTicketExchange, DocumentTicketRefund, DocumentTicketRetained, DocumentTicketVoid):
        """Create an instance of Document from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("Document failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.document_agency_service_fee import DocumentAgencyServiceFee
from openapi_client.models.document_agency_service_fee_void import DocumentAgencyServiceFeeVoid
from openapi_client.models.document_emd import DocumentEMD
from openapi_client.models.document_emd_exchange import DocumentEMDExchange
from openapi_client.models.document_emd_refund import DocumentEMDRefund
from openapi_client.models.document_emd_void import DocumentEMDVoid
from openapi_client.models.document_forfeit import DocumentForfeit
from openapi_client.models.document_mco import DocumentMCO
from openapi_client.models.document_mco_exchange import DocumentMCOExchange
from openapi_client.models.document_mco_refund import DocumentMCORefund
from openapi_client.models.document_mco_void import DocumentMCOVoid
from openapi_client.models.document_ticket import DocumentTicket
from openapi_client.models.document_ticket_exchange import DocumentTicketExchange
from openapi_client.models.document_ticket_refund import DocumentTicketRefund
from openapi_client.models.document_ticket_retained import DocumentTicketRetained
from openapi_client.models.document_ticket_void import DocumentTicketVoid
Document.update_forward_refs()

