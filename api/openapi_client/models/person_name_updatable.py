# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr

class PersonNameUpdatable(BaseModel):
    """
    PersonNameUpdatable
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    prefix: constr(strict=True, max_length=10) = Field(..., alias="Prefix", description="Salutation of honorific")
    given: constr(strict=True, max_length=30) = Field(..., alias="Given", description="The first given name of the person")
    middle: constr(strict=True, max_length=30) = Field(..., alias="Middle", description="The middle name of the person")
    surname: constr(strict=True, max_length=30, min_length=1) = Field(..., alias="Surname", description="Family name, last name")
    suffix: constr(strict=True, max_length=10) = Field(..., alias="Suffix", description="Name suffix")
    __properties = ["@type", "Prefix", "Given", "Middle", "Surname", "Suffix"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PersonNameUpdatable:
        """Create an instance of PersonNameUpdatable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PersonNameUpdatable:
        """Create an instance of PersonNameUpdatable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PersonNameUpdatable.parse_obj(obj)

        _obj = PersonNameUpdatable.parse_obj({
            "type": obj.get("@type"),
            "prefix": obj.get("Prefix"),
            "given": obj.get("Given"),
            "middle": obj.get("Middle"),
            "surname": obj.get("Surname"),
            "suffix": obj.get("Suffix")
        })
        return _obj


