# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr, validator

class AgencyInfo(BaseModel):
    """
    Detail of the travel agency that issues the ticket
    """
    ticketed_date: Optional[constr(strict=True)] = Field(None, alias="ticketedDate", description="Ticketed date")
    name: constr(strict=True, max_length=32) = Field(..., description="Name of the Agency")
    place: constr(strict=True, max_length=32) = Field(..., description="Place of the agency")
    ticketing_pcc: Optional[constr(strict=True, max_length=10, min_length=2)] = Field(None, alias="ticketingPCC", description="Ticketing PCC")
    code: Optional[constr(strict=True)] = Field(None, description="Agency code")
    sales_type: Optional[constr(strict=True, max_length=32)] = Field(None, alias="salesType", description="Sales type")
    ticketing_country: constr(strict=True, max_length=32) = Field(..., alias="ticketingCountry", description="Ticketing country")
    ticketing_city: constr(strict=True, max_length=32) = Field(..., alias="ticketingCity", description="Ticketing city")
    __properties = ["ticketedDate", "name", "place", "ticketingPCC", "code", "salesType", "ticketingCountry", "ticketingCity"]

    @validator('ticketed_date')
    def ticketed_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"(\d{4}-\d{2}-\d{2})", value):
            raise ValueError(r"must validate the regular expression /(\d{4}-\d{2}-\d{2})/")
        return value

    @validator('ticketing_pcc')
    def ticketing_pcc_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{2,10})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{2,10})/")
        return value

    @validator('code')
    def code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([0-9]{8})", value):
            raise ValueError(r"must validate the regular expression /([0-9]{8})/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AgencyInfo:
        """Create an instance of AgencyInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AgencyInfo:
        """Create an instance of AgencyInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AgencyInfo.parse_obj(obj)

        _obj = AgencyInfo.parse_obj({
            "ticketed_date": obj.get("ticketedDate"),
            "name": obj.get("name"),
            "place": obj.get("place"),
            "ticketing_pcc": obj.get("ticketingPCC"),
            "code": obj.get("code"),
            "sales_type": obj.get("salesType"),
            "ticketing_country": obj.get("ticketingCountry"),
            "ticketing_city": obj.get("ticketingCity")
        })
        return _obj


