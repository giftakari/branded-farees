# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint, constr

class AgeQualifying(BaseModel):
    """
    AgeQualifying
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    min_age: Optional[StrictInt] = Field(None, alias="minAge", description="MinAge: The minimum age to qualify for AgeQualifyingCode.")
    max_age: Optional[StrictInt] = Field(None, alias="maxAge", description="Max Age: The maximum age to qualify for AgeQualifyingCode.")
    age_bucket: Optional[constr(strict=True, max_length=32)] = Field(None, alias="ageBucket", description="The age bucket")
    count: Optional[conint(strict=True, ge=0)] = Field(None, description="The number of age qualifying")
    age_qualifying_code: Optional[constr(strict=True, max_length=32)] = Field(None, alias="ageQualifyingCode", description="Enter 10 for an adult or 08 for a child")
    __properties = ["@type", "minAge", "maxAge", "ageBucket", "count", "ageQualifyingCode"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AgeQualifying:
        """Create an instance of AgeQualifying from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AgeQualifying:
        """Create an instance of AgeQualifying from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AgeQualifying.parse_obj(obj)

        _obj = AgeQualifying.parse_obj({
            "type": obj.get("@type"),
            "min_age": obj.get("minAge"),
            "max_age": obj.get("maxAge"),
            "age_bucket": obj.get("ageBucket"),
            "count": obj.get("count"),
            "age_qualifying_code": obj.get("ageQualifyingCode")
        })
        return _obj


