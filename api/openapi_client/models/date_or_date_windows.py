# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.duration_unit_enum import DurationUnitEnum

class DateOrDateWindows(BaseModel):
    """
    Indicates the expiry date.
    """
    specific: Optional[date] = Field(None, description="A specific date. When used with a windows must fall between start and end.")
    start: Optional[date] = Field(None, description="The earliest and latest dates acceptable for the start date.")
    end: Optional[date] = Field(None, description="The earliest and latest dates acceptable for the end date.")
    duration: Optional[StrictStr] = Field(None, description="Duration from  start date.")
    duration_unit: Optional[DurationUnitEnum] = Field(None, alias="durationUnit")
    __properties = ["specific", "start", "end", "duration", "durationUnit"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DateOrDateWindows:
        """Create an instance of DateOrDateWindows from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DateOrDateWindows:
        """Create an instance of DateOrDateWindows from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DateOrDateWindows.parse_obj(obj)

        _obj = DateOrDateWindows.parse_obj({
            "specific": obj.get("specific"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "duration": obj.get("duration"),
            "duration_unit": obj.get("durationUnit")
        })
        return _obj


