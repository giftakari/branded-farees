# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr, validator

class AddressStreetNumber(BaseModel):
    """
    The street number alone is the numerical number that precedes the street name in the address
    """
    value: Optional[constr(strict=True, max_length=128)] = None
    street_nmbr_suffix: Optional[constr(strict=True, max_length=32)] = Field(None, alias="streetNmbrSuffix", description="Street Number Suffix")
    street_direction: Optional[constr(strict=True, max_length=32)] = Field(None, alias="streetDirection", description="Dircetion of the Street")
    rural_route_nmbr: Optional[constr(strict=True)] = Field(None, alias="ruralRouteNmbr", description="RuralRoute Number")
    po_box: Optional[constr(strict=True, max_length=128)] = Field(None, alias="po_Box", description="PO Box Number")
    __properties = ["value", "streetNmbrSuffix", "streetDirection", "ruralRouteNmbr", "po_Box"]

    @validator('rural_route_nmbr')
    def rural_route_nmbr_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9]{1,5}", value):
            raise ValueError(r"must validate the regular expression /[0-9]{1,5}/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AddressStreetNumber:
        """Create an instance of AddressStreetNumber from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AddressStreetNumber:
        """Create an instance of AddressStreetNumber from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AddressStreetNumber.parse_obj(obj)

        _obj = AddressStreetNumber.parse_obj({
            "value": obj.get("value"),
            "street_nmbr_suffix": obj.get("streetNmbrSuffix"),
            "street_direction": obj.get("streetDirection"),
            "rural_route_nmbr": obj.get("ruralRouteNmbr"),
            "po_box": obj.get("po_Box")
        })
        return _obj


