# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictStr, confloat, conint, conlist, constr
from openapi_client.models.best_combinable_price_detail import BestCombinablePriceDetail
from openapi_client.models.brand_id import BrandID
from openapi_client.models.brand_status_enum import BrandStatusEnum
from openapi_client.models.co2_emissions_data import CO2EmissionsData
from openapi_client.models.identifier import Identifier
from openapi_client.models.price_detail import PriceDetail
from openapi_client.models.product_id import ProductID
from openapi_client.models.terms_and_conditions_id import TermsAndConditionsID

class ProductBrandOffering(BaseModel):
    """
    ProductBrandOffering
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    identifier: Optional[Identifier] = Field(None, alias="Identifier")
    price: Optional[PriceDetail] = Field(None, alias="Price")
    brand: Optional[BrandID] = Field(None, alias="Brand")
    product: Optional[conlist(ProductID, max_items=1000)] = Field(None, alias="Product")
    terms_and_conditions: Optional[TermsAndConditionsID] = Field(None, alias="TermsAndConditions")
    combinability_code: Optional[conlist(constr(strict=True, max_length=32), max_items=1000)] = Field(None, alias="CombinabilityCode")
    best_combinable_price: Optional[BestCombinablePriceDetail] = Field(None, alias="BestCombinablePrice")
    desirability: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(None, alias="Desirability", description="The desirability of the offering expressed as a percentage. The higher the percentage the more desirable the offering.")
    matched_attributes: Optional[conint(strict=True, ge=0)] = Field(None, alias="MatchedAttributes", description="The number of matched attributes according to the request modifiers")
    brand_status: Optional[BrandStatusEnum] = Field(None, alias="BrandStatus")
    best_match_ind: Optional[StrictBool] = Field(None, alias="bestMatchInd", description="If true, this Offering is the best match according to the request modifiers")
    co2_emissions_data: Optional[CO2EmissionsData] = Field(None, alias="CO2EmissionsData")
    __properties = ["@type", "Identifier", "Price", "Brand", "Product", "TermsAndConditions", "CombinabilityCode", "BestCombinablePrice", "Desirability", "MatchedAttributes", "BrandStatus", "bestMatchInd", "CO2EmissionsData"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProductBrandOffering:
        """Create an instance of ProductBrandOffering from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['Price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of brand
        if self.brand:
            _dict['Brand'] = self.brand.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in product (list)
        _items = []
        if self.product:
            for _item in self.product:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Product'] = _items
        # override the default output from pydantic by calling `to_dict()` of terms_and_conditions
        if self.terms_and_conditions:
            _dict['TermsAndConditions'] = self.terms_and_conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of best_combinable_price
        if self.best_combinable_price:
            _dict['BestCombinablePrice'] = self.best_combinable_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of co2_emissions_data
        if self.co2_emissions_data:
            _dict['CO2EmissionsData'] = self.co2_emissions_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProductBrandOffering:
        """Create an instance of ProductBrandOffering from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProductBrandOffering.parse_obj(obj)

        _obj = ProductBrandOffering.parse_obj({
            "type": obj.get("@type"),
            "identifier": Identifier.from_dict(obj.get("Identifier")) if obj.get("Identifier") is not None else None,
            "price": PriceDetail.from_dict(obj.get("Price")) if obj.get("Price") is not None else None,
            "brand": BrandID.from_dict(obj.get("Brand")) if obj.get("Brand") is not None else None,
            "product": [ProductID.from_dict(_item) for _item in obj.get("Product")] if obj.get("Product") is not None else None,
            "terms_and_conditions": TermsAndConditionsID.from_dict(obj.get("TermsAndConditions")) if obj.get("TermsAndConditions") is not None else None,
            "combinability_code": obj.get("CombinabilityCode"),
            "best_combinable_price": BestCombinablePriceDetail.from_dict(obj.get("BestCombinablePrice")) if obj.get("BestCombinablePrice") is not None else None,
            "desirability": obj.get("Desirability"),
            "matched_attributes": obj.get("MatchedAttributes"),
            "brand_status": obj.get("BrandStatus"),
            "best_match_ind": obj.get("bestMatchInd"),
            "co2_emissions_data": CO2EmissionsData.from_dict(obj.get("CO2EmissionsData")) if obj.get("CO2EmissionsData") is not None else None
        })
        return _obj


