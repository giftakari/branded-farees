# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr, validator

class GSTRegistrationNumber(BaseModel):
    """
    The GST Registration Number for this Organization
    """
    value: Optional[constr(strict=True, max_length=512)] = None
    telephone: Optional[constr(strict=True, max_length=32)] = Field(None, description="Telephone Number")
    address: Optional[constr(strict=True, max_length=128)] = Field(None, description="Address of the GST customer")
    country: constr(strict=True) = Field(..., description="Country")
    company_name: Optional[constr(strict=True, max_length=512)] = Field(None, alias="companyName", description="Name of the Company")
    email: Optional[constr(strict=True, max_length=128)] = Field(None, description="E-Mail")
    __properties = ["value", "telephone", "address", "country", "companyName", "email"]

    @validator('country')
    def country_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"[a-zA-Z]{2}", value):
            raise ValueError(r"must validate the regular expression /[a-zA-Z]{2}/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GSTRegistrationNumber:
        """Create an instance of GSTRegistrationNumber from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GSTRegistrationNumber:
        """Create an instance of GSTRegistrationNumber from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GSTRegistrationNumber.parse_obj(obj)

        _obj = GSTRegistrationNumber.parse_obj({
            "value": obj.get("value"),
            "telephone": obj.get("telephone"),
            "address": obj.get("address"),
            "country": obj.get("country"),
            "company_name": obj.get("companyName"),
            "email": obj.get("email")
        })
        return _obj


