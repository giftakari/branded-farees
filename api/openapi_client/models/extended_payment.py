# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, constr

class ExtendedPayment(BaseModel):
    """
    Note this field is deprecated in Payment schema and should be passed in FormOfPaymentPaymentCardExtendPayment schema
    """
    number_of_installments: StrictInt = Field(..., alias="NumberOfInstallments", description="The number of installment payments to be charged by the payment card provider")
    first_installment: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="FirstInstallment", description="For Pagos Parceledos, specify the first installment amount. This will be the same currency as the payment")
    remaining_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="RemainingAmount", description="For Pagos Parceledos, specify the remaining amount to be charged that will be spread across the number of installments. This will be the same currency as the payment")
    otato_code: Optional[constr(strict=True, max_length=32)] = Field(None, alias="OTATOCode", description="For Pagos Parceledos the OTATOCode")
    __properties = ["NumberOfInstallments", "FirstInstallment", "RemainingAmount", "OTATOCode"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExtendedPayment:
        """Create an instance of ExtendedPayment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExtendedPayment:
        """Create an instance of ExtendedPayment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExtendedPayment.parse_obj(obj)

        _obj = ExtendedPayment.parse_obj({
            "number_of_installments": obj.get("NumberOfInstallments"),
            "first_installment": obj.get("FirstInstallment"),
            "remaining_amount": obj.get("RemainingAmount"),
            "otato_code": obj.get("OTATOCode")
        })
        return _obj


