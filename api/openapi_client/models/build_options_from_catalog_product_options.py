# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import Field
from openapi_client.models.build_from_catalog_product_offerings_request import BuildFromCatalogProductOfferingsRequest
from openapi_client.models.build_options import BuildOptions
from openapi_client.models.fare_rule_category_enum import FareRuleCategoryEnum
from openapi_client.models.fare_rule_enum import FareRuleEnum
from openapi_client.models.payment_criteria import PaymentCriteria

class BuildOptionsFromCatalogProductOptions(BuildOptions):
    """
    BuildOptionsFromCatalogProductOptions
    """
    build_from_catalog_product_offerings_request: BuildFromCatalogProductOfferingsRequest = Field(..., alias="BuildFromCatalogProductOfferingsRequest")
    __properties = ["@type", "maxNumberOfUpsellsToReturn", "PaymentCriteria", "FareRuleType", "FareRuleCategory", "returnBrandedFaresInd", "BuildFromCatalogProductOfferingsRequest"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BuildOptionsFromCatalogProductOptions:
        """Create an instance of BuildOptionsFromCatalogProductOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payment_criteria
        if self.payment_criteria:
            _dict['PaymentCriteria'] = self.payment_criteria.to_dict()
        # override the default output from pydantic by calling `to_dict()` of build_from_catalog_product_offerings_request
        if self.build_from_catalog_product_offerings_request:
            _dict['BuildFromCatalogProductOfferingsRequest'] = self.build_from_catalog_product_offerings_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BuildOptionsFromCatalogProductOptions:
        """Create an instance of BuildOptionsFromCatalogProductOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BuildOptionsFromCatalogProductOptions.parse_obj(obj)

        _obj = BuildOptionsFromCatalogProductOptions.parse_obj({
            "type": obj.get("@type"),
            "max_number_of_upsells_to_return": obj.get("maxNumberOfUpsellsToReturn"),
            "payment_criteria": PaymentCriteria.from_dict(obj.get("PaymentCriteria")) if obj.get("PaymentCriteria") is not None else None,
            "fare_rule_type": obj.get("FareRuleType"),
            "fare_rule_category": obj.get("FareRuleCategory"),
            "return_branded_fares_ind": obj.get("returnBrandedFaresInd"),
            "build_from_catalog_product_offerings_request": BuildFromCatalogProductOfferingsRequest.from_dict(obj.get("BuildFromCatalogProductOfferingsRequest")) if obj.get("BuildFromCatalogProductOfferingsRequest") is not None else None
        })
        return _obj


