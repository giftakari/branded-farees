# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from openapi_client.models.cabin_preference import CabinPreference
from openapi_client.models.catalog_product_offering_selection import CatalogProductOfferingSelection
from openapi_client.models.catalog_product_offerings_identifier import CatalogProductOfferingsIdentifier
from openapi_client.models.custom_response_modifiers_air import CustomResponseModifiersAir
from openapi_client.models.fare_rule_category_enum import FareRuleCategoryEnum
from openapi_client.models.fare_rule_enum import FareRuleEnum
from openapi_client.models.pricing_modifiers_air import PricingModifiersAir
from openapi_client.models.search_modifiers_air import SearchModifiersAir
from openapi_client.models.upsell_offering_identifier import UpsellOfferingIdentifier

class BuildFromCatalogProductOfferingsRequestAirSearch(BaseModel):
    """
    BuildFromCatalogProductOfferingsRequestAirSearch
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    catalog_product_offerings_identifier: CatalogProductOfferingsIdentifier = Field(..., alias="CatalogProductOfferingsIdentifier")
    catalog_product_offering_selection: conlist(CatalogProductOfferingSelection, max_items=16, min_items=1) = Field(..., alias="CatalogProductOfferingSelection")
    upsell_offering_identifier: Optional[conlist(UpsellOfferingIdentifier, max_items=100)] = Field(None, alias="UpsellOfferingIdentifier")
    pricing_modifiers_air: Optional[PricingModifiersAir] = Field(None, alias="PricingModifiersAir")
    cabin_preference: Optional[CabinPreference] = Field(None, alias="CabinPreference")
    fare_rule_category: Optional[conlist(FareRuleCategoryEnum, max_items=10)] = Field(None, alias="FareRuleCategory")
    fare_rule_type: Optional[FareRuleEnum] = Field(None, alias="FareRuleType")
    custom_response_modifiers_air: Optional[CustomResponseModifiersAir] = Field(None, alias="CustomResponseModifiersAir")
    low_fare_finder_ind: Optional[StrictBool] = Field(None, alias="lowFareFinderInd", description="If true, the price service will return the lowest fare available for the itinerary requested")
    re_check_inventory_ind: Optional[StrictBool] = Field(None, alias="reCheckInventoryInd", description="If true, the price service will recheck inventory at the time of pricing the Offer")
    inhibit_brand_content_ind: Optional[StrictBool] = Field(None, alias="inhibitBrandContentInd", description="If true, Brand content will not be returned with the Offer")
    validate_inventory_ind: Optional[StrictBool] = Field(None, alias="validateInventoryInd", description="If true, the flight inventory will be checked during the price step")
    search_modifiers_air: Optional[SearchModifiersAir] = Field(None, alias="SearchModifiersAir")
    __properties = ["@type", "CatalogProductOfferingsIdentifier", "CatalogProductOfferingSelection", "UpsellOfferingIdentifier", "PricingModifiersAir", "CabinPreference", "FareRuleCategory", "FareRuleType", "CustomResponseModifiersAir", "lowFareFinderInd", "reCheckInventoryInd", "inhibitBrandContentInd", "validateInventoryInd", "SearchModifiersAir"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BuildFromCatalogProductOfferingsRequestAirSearch:
        """Create an instance of BuildFromCatalogProductOfferingsRequestAirSearch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of catalog_product_offerings_identifier
        if self.catalog_product_offerings_identifier:
            _dict['CatalogProductOfferingsIdentifier'] = self.catalog_product_offerings_identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in catalog_product_offering_selection (list)
        _items = []
        if self.catalog_product_offering_selection:
            for _item in self.catalog_product_offering_selection:
                if _item:
                    _items.append(_item.to_dict())
            _dict['CatalogProductOfferingSelection'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in upsell_offering_identifier (list)
        _items = []
        if self.upsell_offering_identifier:
            for _item in self.upsell_offering_identifier:
                if _item:
                    _items.append(_item.to_dict())
            _dict['UpsellOfferingIdentifier'] = _items
        # override the default output from pydantic by calling `to_dict()` of pricing_modifiers_air
        if self.pricing_modifiers_air:
            _dict['PricingModifiersAir'] = self.pricing_modifiers_air.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cabin_preference
        if self.cabin_preference:
            _dict['CabinPreference'] = self.cabin_preference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_response_modifiers_air
        if self.custom_response_modifiers_air:
            _dict['CustomResponseModifiersAir'] = self.custom_response_modifiers_air.to_dict()
        # override the default output from pydantic by calling `to_dict()` of search_modifiers_air
        if self.search_modifiers_air:
            _dict['SearchModifiersAir'] = self.search_modifiers_air.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BuildFromCatalogProductOfferingsRequestAirSearch:
        """Create an instance of BuildFromCatalogProductOfferingsRequestAirSearch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BuildFromCatalogProductOfferingsRequestAirSearch.parse_obj(obj)

        _obj = BuildFromCatalogProductOfferingsRequestAirSearch.parse_obj({
            "type": obj.get("@type"),
            "catalog_product_offerings_identifier": CatalogProductOfferingsIdentifier.from_dict(obj.get("CatalogProductOfferingsIdentifier")) if obj.get("CatalogProductOfferingsIdentifier") is not None else None,
            "catalog_product_offering_selection": [CatalogProductOfferingSelection.from_dict(_item) for _item in obj.get("CatalogProductOfferingSelection")] if obj.get("CatalogProductOfferingSelection") is not None else None,
            "upsell_offering_identifier": [UpsellOfferingIdentifier.from_dict(_item) for _item in obj.get("UpsellOfferingIdentifier")] if obj.get("UpsellOfferingIdentifier") is not None else None,
            "pricing_modifiers_air": PricingModifiersAir.from_dict(obj.get("PricingModifiersAir")) if obj.get("PricingModifiersAir") is not None else None,
            "cabin_preference": CabinPreference.from_dict(obj.get("CabinPreference")) if obj.get("CabinPreference") is not None else None,
            "fare_rule_category": obj.get("FareRuleCategory"),
            "fare_rule_type": obj.get("FareRuleType"),
            "custom_response_modifiers_air": CustomResponseModifiersAir.from_dict(obj.get("CustomResponseModifiersAir")) if obj.get("CustomResponseModifiersAir") is not None else None,
            "low_fare_finder_ind": obj.get("lowFareFinderInd"),
            "re_check_inventory_ind": obj.get("reCheckInventoryInd"),
            "inhibit_brand_content_ind": obj.get("inhibitBrandContentInd"),
            "validate_inventory_ind": obj.get("validateInventoryInd"),
            "search_modifiers_air": SearchModifiersAir.from_dict(obj.get("SearchModifiersAir")) if obj.get("SearchModifiersAir") is not None else None
        })
        return _obj


