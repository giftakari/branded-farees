# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr, validator
from openapi_client.models.date_range import DateRange
from openapi_client.models.person_name import PersonName

class ReservationQuerySearchCriteriaReservation(BaseModel):
    """
    ReservationQuerySearchCriteriaReservation
    """
    type: StrictStr = Field(..., alias="@type")
    person_name: Optional[PersonName] = Field(None, alias="PersonName")
    departure_date: Optional[date] = Field(None, alias="DepartureDate", description="Local date of flight departure")
    departure_date_range: Optional[DateRange] = Field(None, alias="DepartureDateRange")
    departure: Optional[constr(strict=True, max_length=3, min_length=3)] = Field(None, alias="Departure", description="The city or airport code a flight is departing from in the Reservation")
    arrival: Optional[constr(strict=True, max_length=3, min_length=3)] = Field(None, alias="Arrival", description="The city or airport code a flight is arriving at in the Reservation")
    detail_view_ind: Optional[StrictBool] = Field(None, alias="detailViewInd", description="If true, ReservationDetail will be returned")
    __properties = ["@type", "PersonName", "DepartureDate", "DepartureDateRange", "Departure", "Arrival", "detailViewInd"]

    @validator('departure')
    def departure_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z]{3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z]{3})/")
        return value

    @validator('arrival')
    def arrival_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z]{3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z]{3})/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReservationQuerySearchCriteriaReservation:
        """Create an instance of ReservationQuerySearchCriteriaReservation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of person_name
        if self.person_name:
            _dict['PersonName'] = self.person_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of departure_date_range
        if self.departure_date_range:
            _dict['DepartureDateRange'] = self.departure_date_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReservationQuerySearchCriteriaReservation:
        """Create an instance of ReservationQuerySearchCriteriaReservation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReservationQuerySearchCriteriaReservation.parse_obj(obj)

        _obj = ReservationQuerySearchCriteriaReservation.parse_obj({
            "type": obj.get("@type"),
            "person_name": PersonName.from_dict(obj.get("PersonName")) if obj.get("PersonName") is not None else None,
            "departure_date": obj.get("DepartureDate"),
            "departure_date_range": DateRange.from_dict(obj.get("DepartureDateRange")) if obj.get("DepartureDateRange") is not None else None,
            "departure": obj.get("Departure"),
            "arrival": obj.get("Arrival"),
            "detail_view_ind": obj.get("detailViewInd")
        })
        return _obj


