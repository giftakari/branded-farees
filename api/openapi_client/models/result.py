# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.error import Error
from openapi_client.models.result_status_enum import ResultStatusEnum
from openapi_client.models.warning import Warning

class Result(BaseModel):
    """
    Result
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    status: Optional[ResultStatusEnum] = None
    error: Optional[conlist(Error, max_items=50)] = Field(None, alias="Error")
    warning: Optional[conlist(Warning, max_items=100)] = Field(None, alias="Warning")
    __properties = ["@type", "status", "Error", "Warning"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Result:
        """Create an instance of Result from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in error (list)
        _items = []
        if self.error:
            for _item in self.error:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Error'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warning (list)
        _items = []
        if self.warning:
            for _item in self.warning:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Warning'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Result:
        """Create an instance of Result from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Result.parse_obj(obj)

        _obj = Result.parse_obj({
            "type": obj.get("@type"),
            "status": obj.get("status"),
            "error": [Error.from_dict(_item) for _item in obj.get("Error")] if obj.get("Error") is not None else None,
            "warning": [Warning.from_dict(_item) for _item in obj.get("Warning")] if obj.get("Warning") is not None else None
        })
        return _obj


