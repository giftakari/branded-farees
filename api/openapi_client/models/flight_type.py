# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from openapi_client.models.connection_type_enum import ConnectionTypeEnum

class FlightType(BaseModel):
    """
    FlightType
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    connection_type: Optional[ConnectionTypeEnum] = Field(None, alias="connectionType")
    exclude_interline_connections_ind: Optional[StrictBool] = Field(None, alias="excludeInterlineConnectionsInd", description="If present and true, exclude interline connections")
    __properties = ["@type", "connectionType", "excludeInterlineConnectionsInd"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FlightType:
        """Create an instance of FlightType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FlightType:
        """Create an instance of FlightType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FlightType.parse_obj(obj)

        _obj = FlightType.parse_obj({
            "type": obj.get("@type"),
            "connection_type": obj.get("connectionType"),
            "exclude_interline_connections_ind": obj.get("excludeInterlineConnectionsInd")
        })
        return _obj


