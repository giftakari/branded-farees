# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import Field, StrictStr, conlist, constr
from openapi_client.models.agency_service_fee_id import AgencyServiceFeeID
from openapi_client.models.currency_amount import CurrencyAmount
from openapi_client.models.document_number import DocumentNumber
from openapi_client.models.tax import Tax

class AgencyServiceFee(AgencyServiceFeeID):
    """
    AgencyServiceFee
    """
    expiry_date: Optional[datetime] = Field(None, alias="ExpiryDate", description="The service fee expiry date. Once expiry date has been reached, the service fee information will only be stored in the ReservationReceipt")
    description: Optional[constr(strict=True, max_length=512)] = Field(None, alias="Description", description="The description of the service fee")
    amount: CurrencyAmount = Field(..., alias="Amount")
    tax: Optional[conlist(Tax, max_items=10)] = Field(None, alias="Tax")
    related_document_number: Optional[DocumentNumber] = Field(None, alias="RelatedDocumentNumber")
    traveler_ref: Optional[StrictStr] = Field(None, alias="TravelerRef", description="Reference to a Traveler within the Reservation that this service fee applies to")
    offer_ref: Optional[StrictStr] = Field(None, alias="OfferRef", description="Reference to an Offer within the Reservation that this service fee applies to")
    __properties = ["@type", "id", "ExpiryDate", "Description", "Amount", "Tax", "RelatedDocumentNumber", "TravelerRef", "OfferRef"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AgencyServiceFee:
        """Create an instance of AgencyServiceFee from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['Amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tax (list)
        _items = []
        if self.tax:
            for _item in self.tax:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Tax'] = _items
        # override the default output from pydantic by calling `to_dict()` of related_document_number
        if self.related_document_number:
            _dict['RelatedDocumentNumber'] = self.related_document_number.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AgencyServiceFee:
        """Create an instance of AgencyServiceFee from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AgencyServiceFee.parse_obj(obj)

        _obj = AgencyServiceFee.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "expiry_date": obj.get("ExpiryDate"),
            "description": obj.get("Description"),
            "amount": CurrencyAmount.from_dict(obj.get("Amount")) if obj.get("Amount") is not None else None,
            "tax": [Tax.from_dict(_item) for _item in obj.get("Tax")] if obj.get("Tax") is not None else None,
            "related_document_number": DocumentNumber.from_dict(obj.get("RelatedDocumentNumber")) if obj.get("RelatedDocumentNumber") is not None else None,
            "traveler_ref": obj.get("TravelerRef"),
            "offer_ref": obj.get("OfferRef")
        })
        return _obj


