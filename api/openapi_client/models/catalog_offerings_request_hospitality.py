# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr, validator
from openapi_client.models.currency_amount import CurrencyAmount
from openapi_client.models.date_or_date_windows import DateOrDateWindows
from openapi_client.models.hotel_search_criterion import HotelSearchCriterion
from openapi_client.models.search_control_console_channel_id import SearchControlConsoleChannelID

class CatalogOfferingsRequestHospitality(BaseModel):
    """
    CatalogOfferingsRequestHospitality
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    search_control_console_channel_id: Optional[SearchControlConsoleChannelID] = Field(None, alias="SearchControlConsoleChannelID")
    requested_currency: Optional[constr(strict=True)] = Field(None, alias="requestedCurrency", description="You can use requested currency to request conversion rate information. The response will return the currencyRateConversion object which will contain conversion rate of the requested currency.")
    max_response_wait_time: Optional[StrictInt] = Field(None, alias="maxResponseWaitTime", description="Maximum time (in milliseconds) to wait for provider responses before returning a response to the consumer of this service")
    stay_dates: DateOrDateWindows = Field(..., alias="StayDates")
    hotel_search_criterion: Optional[HotelSearchCriterion] = Field(None, alias="HotelSearchCriterion")
    minimum_amount: Optional[CurrencyAmount] = Field(None, alias="MinimumAmount")
    maximum_amount: Optional[CurrencyAmount] = Field(None, alias="MaximumAmount")
    verbose_response_ind: Optional[StrictBool] = Field(None, alias="verboseResponseInd", description="Used to specify that a verbose response is to be returned.  Verbose responses repeat the Property information in each Product and do not return the reference list.")
    __properties = ["@type", "SearchControlConsoleChannelID", "requestedCurrency", "maxResponseWaitTime", "StayDates", "HotelSearchCriterion", "MinimumAmount", "MaximumAmount", "verboseResponseInd"]

    @validator('requested_currency')
    def requested_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[a-zA-Z]{3}", value):
            raise ValueError(r"must validate the regular expression /[a-zA-Z]{3}/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CatalogOfferingsRequestHospitality:
        """Create an instance of CatalogOfferingsRequestHospitality from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of search_control_console_channel_id
        if self.search_control_console_channel_id:
            _dict['SearchControlConsoleChannelID'] = self.search_control_console_channel_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stay_dates
        if self.stay_dates:
            _dict['StayDates'] = self.stay_dates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hotel_search_criterion
        if self.hotel_search_criterion:
            _dict['HotelSearchCriterion'] = self.hotel_search_criterion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of minimum_amount
        if self.minimum_amount:
            _dict['MinimumAmount'] = self.minimum_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maximum_amount
        if self.maximum_amount:
            _dict['MaximumAmount'] = self.maximum_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CatalogOfferingsRequestHospitality:
        """Create an instance of CatalogOfferingsRequestHospitality from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CatalogOfferingsRequestHospitality.parse_obj(obj)

        _obj = CatalogOfferingsRequestHospitality.parse_obj({
            "type": obj.get("@type"),
            "search_control_console_channel_id": SearchControlConsoleChannelID.from_dict(obj.get("SearchControlConsoleChannelID")) if obj.get("SearchControlConsoleChannelID") is not None else None,
            "requested_currency": obj.get("requestedCurrency"),
            "max_response_wait_time": obj.get("maxResponseWaitTime"),
            "stay_dates": DateOrDateWindows.from_dict(obj.get("StayDates")) if obj.get("StayDates") is not None else None,
            "hotel_search_criterion": HotelSearchCriterion.from_dict(obj.get("HotelSearchCriterion")) if obj.get("HotelSearchCriterion") is not None else None,
            "minimum_amount": CurrencyAmount.from_dict(obj.get("MinimumAmount")) if obj.get("MinimumAmount") is not None else None,
            "maximum_amount": CurrencyAmount.from_dict(obj.get("MaximumAmount")) if obj.get("MaximumAmount") is not None else None,
            "verbose_response_ind": obj.get("verboseResponseInd")
        })
        return _obj


