# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, constr, validator
from openapi_client.models.baggage_item import BaggageItem
from openapi_client.models.baggage_type_enum import BaggageTypeEnum

class BaggageAllowance(BaseModel):
    """
    BaggageAllowance
    """
    type: StrictStr = Field(..., alias="@type")
    passenger_type_codes: Optional[conlist(constr(strict=True, max_length=5, min_length=3))] = Field(None, alias="passengerTypeCodes", description="List of passenger type codes")
    baggage_type: Optional[BaggageTypeEnum] = Field(None, alias="baggageType")
    product_ref: Optional[conlist(StrictStr)] = Field(None, alias="ProductRef", description="A product is any product, service or package of products and services  that can be priced and purchased by a specific supplier.")
    baggage_item: Optional[conlist(BaggageItem, max_items=10)] = Field(None, alias="BaggageItem")
    segment_sequence_list: Optional[conlist(StrictInt)] = Field(None, alias="SegmentSequenceList", description="Segment sequence is only to be used when the baggage allowance differs between segments within a product. If so, then the ProducRef must be specified.")
    text: Optional[conlist(constr(strict=True, max_length=128), max_items=35)] = Field(None, alias="Text")
    __properties = ["@type", "passengerTypeCodes", "baggageType", "ProductRef", "BaggageItem", "SegmentSequenceList", "Text"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = '@type'

    # discriminator mappings
    __discriminator_value_class_map = {
        'BaggageAllowanceDetail': 'BaggageAllowanceDetail',
        'ImportsCatalogAir_ReservationResource': 'ImportsCatalogAirReservationResource'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(BaggageAllowanceDetail):
        """Create an instance of BaggageAllowance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in baggage_item (list)
        _items = []
        if self.baggage_item:
            for _item in self.baggage_item:
                if _item:
                    _items.append(_item.to_dict())
            _dict['BaggageItem'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(BaggageAllowanceDetail):
        """Create an instance of BaggageAllowance from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("BaggageAllowance failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.baggage_allowance_detail import BaggageAllowanceDetail
from openapi_client.models.imports_catalog_air_reservation_resource import ImportsCatalogAir_ReservationResource
BaggageAllowance.update_forward_refs()

