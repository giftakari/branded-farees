# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from openapi_client.models.catalog_product_offering_identifier import CatalogProductOfferingIdentifier
from openapi_client.models.identifier import Identifier
from openapi_client.models.product_identifier import ProductIdentifier

class CatalogProductOfferingSelection(BaseModel):
    """
    CatalogProductOfferingSelection
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    catalog_product_offering_identifier: CatalogProductOfferingIdentifier = Field(..., alias="CatalogProductOfferingIdentifier")
    product_brand_offering_identifier: Identifier = Field(..., alias="ProductBrandOfferingIdentifier")
    product_identifier: Optional[conlist(ProductIdentifier, max_items=10)] = Field(None, alias="ProductIdentifier")
    segment_sequence: Optional[conlist(StrictInt)] = Field(None, alias="SegmentSequence")
    __properties = ["@type", "CatalogProductOfferingIdentifier", "ProductBrandOfferingIdentifier", "ProductIdentifier", "SegmentSequence"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CatalogProductOfferingSelection:
        """Create an instance of CatalogProductOfferingSelection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of catalog_product_offering_identifier
        if self.catalog_product_offering_identifier:
            _dict['CatalogProductOfferingIdentifier'] = self.catalog_product_offering_identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_brand_offering_identifier
        if self.product_brand_offering_identifier:
            _dict['ProductBrandOfferingIdentifier'] = self.product_brand_offering_identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in product_identifier (list)
        _items = []
        if self.product_identifier:
            for _item in self.product_identifier:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ProductIdentifier'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CatalogProductOfferingSelection:
        """Create an instance of CatalogProductOfferingSelection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CatalogProductOfferingSelection.parse_obj(obj)

        _obj = CatalogProductOfferingSelection.parse_obj({
            "type": obj.get("@type"),
            "catalog_product_offering_identifier": CatalogProductOfferingIdentifier.from_dict(obj.get("CatalogProductOfferingIdentifier")) if obj.get("CatalogProductOfferingIdentifier") is not None else None,
            "product_brand_offering_identifier": Identifier.from_dict(obj.get("ProductBrandOfferingIdentifier")) if obj.get("ProductBrandOfferingIdentifier") is not None else None,
            "product_identifier": [ProductIdentifier.from_dict(_item) for _item in obj.get("ProductIdentifier")] if obj.get("ProductIdentifier") is not None else None,
            "segment_sequence": obj.get("SegmentSequence")
        })
        return _obj


