# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr
from openapi_client.models.traveler_geographic_type_enum import TravelerGeographicTypeEnum

class TravelerGeographicLocation(BaseModel):
    """
    Specifies which location the Traveler resides in. Used for resident fares
    """
    value: Optional[constr(strict=True, max_length=32)] = None
    traveler_geographic_location_type: Optional[TravelerGeographicTypeEnum] = Field(None, alias="travelerGeographicLocationType")
    resident_geographic_code: Optional[StrictStr] = Field(None, alias="residentGeographicCode", description="Resident code, currently used to handle Spanish residency fares for NDC channel where this code is required in addition to the city of residence")
    general_large_family_resident_discount_ind: Optional[StrictBool] = Field(None, alias="generalLargeFamilyResidentDiscountInd", description="if true, this request qualifies for general large family resident discount. General large families (up to 3 children) from Spain, from the EU/EEA or of any other nationality, whose residency in Spain is recognised and who are in possession of a large-family certificate issued by the autonomous community in which they live.")
    special_large_family_resident_discount_ind: Optional[StrictBool] = Field(None, alias="specialLargeFamilyResidentDiscountInd", description="if true, this request qualifies for special large family resident discount. Special large families (4 or more children) from Spain, from the EU/EEA or of any other nationality, whose residency in Spain is recognised and who are in possession of a large-family certificate issued by the autonomous community in which they live.")
    __properties = ["value", "travelerGeographicLocationType", "residentGeographicCode", "generalLargeFamilyResidentDiscountInd", "specialLargeFamilyResidentDiscountInd"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TravelerGeographicLocation:
        """Create an instance of TravelerGeographicLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TravelerGeographicLocation:
        """Create an instance of TravelerGeographicLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TravelerGeographicLocation.parse_obj(obj)

        _obj = TravelerGeographicLocation.parse_obj({
            "value": obj.get("value"),
            "traveler_geographic_location_type": obj.get("travelerGeographicLocationType"),
            "resident_geographic_code": obj.get("residentGeographicCode"),
            "general_large_family_resident_discount_ind": obj.get("generalLargeFamilyResidentDiscountInd"),
            "special_large_family_resident_discount_ind": obj.get("specialLargeFamilyResidentDiscountInd")
        })
        return _obj


