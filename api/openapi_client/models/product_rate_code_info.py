# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.rate_code_info import RateCodeInfo

class ProductRateCodeInfo(BaseModel):
    """
    ProductRateCodeInfo
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    product_ref: Optional[StrictStr] = Field(None, alias="ProductRef", description="Product reference")
    rate_code_info: RateCodeInfo = Field(..., alias="RateCodeInfo")
    __properties = ["@type", "ProductRef", "RateCodeInfo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProductRateCodeInfo:
        """Create an instance of ProductRateCodeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of rate_code_info
        if self.rate_code_info:
            _dict['RateCodeInfo'] = self.rate_code_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProductRateCodeInfo:
        """Create an instance of ProductRateCodeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProductRateCodeInfo.parse_obj(obj)

        _obj = ProductRateCodeInfo.parse_obj({
            "type": obj.get("@type"),
            "product_ref": obj.get("ProductRef"),
            "rate_code_info": RateCodeInfo.from_dict(obj.get("RateCodeInfo")) if obj.get("RateCodeInfo") is not None else None
        })
        return _obj


