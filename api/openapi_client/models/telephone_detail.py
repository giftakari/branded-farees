# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import Field, StrictBool, conint, constr, validator
from openapi_client.models.comment import Comment
from openapi_client.models.enum_telephone_role import EnumTelephoneRole
from openapi_client.models.privacy import Privacy
from openapi_client.models.telephone import Telephone

class TelephoneDetail(Telephone):
    """
    TelephoneDetail
    """
    phone_location_type: Optional[constr(strict=True)] = Field(None, alias="phoneLocationType", description="Location of the phone")
    phone_tech_type: Optional[constr(strict=True)] = Field(None, alias="phoneTechType", description="Indicates the type of technology associated with the telephone number")
    phone_use_type: Optional[constr(strict=True)] = Field(None, alias="phoneUseType", description="Use of the phone")
    pin: Optional[constr(strict=True, max_length=32)] = Field(None, description="Additional codes used for telephone")
    priority: Optional[conint(strict=True, le=300, ge=0)] = Field(None, description="Priority")
    privacy: Optional[Privacy] = Field(None, alias="Privacy")
    enum_telephone_role: Optional[EnumTelephoneRole] = Field(None, alias="Enum_TelephoneRole")
    comment: Optional[Comment] = Field(None, alias="Comment")
    default_ind: Optional[StrictBool] = Field(None, alias="defaultInd", description="When true, indicates a default value should be used.")
    provisioned_ind: Optional[StrictBool] = Field(None, alias="provisionedInd", description="true indicates this phone number was created through provisioned")
    __properties = ["@type", "countryAccessCode", "areaCityCode", "phoneNumber", "extension", "id", "cityCode", "role", "phoneLocationType", "phoneTechType", "phoneUseType", "pin", "priority", "Privacy", "Enum_TelephoneRole", "Comment", "defaultInd", "provisionedInd"]

    @validator('phone_location_type')
    def phone_location_type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}", value):
            raise ValueError(r"must validate the regular expression /[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}/")
        return value

    @validator('phone_tech_type')
    def phone_tech_type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}", value):
            raise ValueError(r"must validate the regular expression /[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}/")
        return value

    @validator('phone_use_type')
    def phone_use_type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}", value):
            raise ValueError(r"must validate the regular expression /[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TelephoneDetail:
        """Create an instance of TelephoneDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of privacy
        if self.privacy:
            _dict['Privacy'] = self.privacy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of comment
        if self.comment:
            _dict['Comment'] = self.comment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TelephoneDetail:
        """Create an instance of TelephoneDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TelephoneDetail.parse_obj(obj)

        _obj = TelephoneDetail.parse_obj({
            "type": obj.get("@type"),
            "country_access_code": obj.get("countryAccessCode"),
            "area_city_code": obj.get("areaCityCode"),
            "phone_number": obj.get("phoneNumber"),
            "extension": obj.get("extension"),
            "id": obj.get("id"),
            "city_code": obj.get("cityCode"),
            "role": obj.get("role"),
            "phone_location_type": obj.get("phoneLocationType"),
            "phone_tech_type": obj.get("phoneTechType"),
            "phone_use_type": obj.get("phoneUseType"),
            "pin": obj.get("pin"),
            "priority": obj.get("priority"),
            "privacy": Privacy.from_dict(obj.get("Privacy")) if obj.get("Privacy") is not None else None,
            "enum_telephone_role": obj.get("Enum_TelephoneRole"),
            "comment": Comment.from_dict(obj.get("Comment")) if obj.get("Comment") is not None else None,
            "default_ind": obj.get("defaultInd"),
            "provisioned_ind": obj.get("provisionedInd")
        })
        return _obj


