# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, constr, validator
from openapi_client.models.brand_id import BrandID
from openapi_client.models.cabin_air_enum import CabinAirEnum
from openapi_client.models.class_of_service_availability import ClassOfServiceAvailability
from openapi_client.models.customer_loyalty_credit import CustomerLoyaltyCredit
from openapi_client.models.fare_qualifier_enum import FareQualifierENUM
from openapi_client.models.fare_type_enum import FareTypeEnum
from openapi_client.models.yes_no_unknown_enum import YesNoUnknownEnum

class FlightProduct(BaseModel):
    """
    FlightProduct
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    segment_sequence: conlist(StrictInt) = Field(..., alias="segmentSequence", description="The Segment sequence")
    class_of_service: Optional[constr(strict=True, max_length=2, min_length=1)] = Field(None, alias="classOfService", description="The class of service")
    cabin: Optional[CabinAirEnum] = None
    fare_basis_code: Optional[constr(strict=True, max_length=32)] = Field(None, alias="fareBasisCode", description="Fare basis code")
    fare_type: Optional[FareTypeEnum] = Field(None, alias="fareType")
    car_code: Optional[constr(strict=True, max_length=32)] = Field(None, alias="carCode", description="The car code")
    value_code: Optional[constr(strict=True, max_length=32)] = Field(None, alias="valueCode", description="The value code")
    brand: Optional[BrandID] = Field(None, alias="Brand")
    customer_loyalty_credit: Optional[conlist(CustomerLoyaltyCredit, max_items=100)] = Field(None, alias="CustomerLoyaltyCredit")
    class_of_service_availability: Optional[conlist(ClassOfServiceAvailability, max_items=100)] = Field(None, alias="ClassOfServiceAvailability")
    fare_qualifier: Optional[FareQualifierENUM] = Field(None, alias="FareQualifier")
    stopover_priced: Optional[YesNoUnknownEnum] = Field(None, alias="stopoverPriced")
    ticket_designator: Optional[constr(strict=True, max_length=32)] = Field(None, alias="ticketDesignator", description="The ticket designator")
    fare_type_code: Optional[constr(strict=True, max_length=32)] = Field(None, alias="fareTypeCode", description="The ATPCO fare type code")
    __properties = ["@type", "segmentSequence", "classOfService", "cabin", "fareBasisCode", "fareType", "carCode", "valueCode", "Brand", "CustomerLoyaltyCredit", "ClassOfServiceAvailability", "FareQualifier", "stopoverPriced", "ticketDesignator", "fareTypeCode"]

    @validator('class_of_service')
    def class_of_service_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{1,2})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{1,2})/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FlightProduct:
        """Create an instance of FlightProduct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of brand
        if self.brand:
            _dict['Brand'] = self.brand.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in customer_loyalty_credit (list)
        _items = []
        if self.customer_loyalty_credit:
            for _item in self.customer_loyalty_credit:
                if _item:
                    _items.append(_item.to_dict())
            _dict['CustomerLoyaltyCredit'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in class_of_service_availability (list)
        _items = []
        if self.class_of_service_availability:
            for _item in self.class_of_service_availability:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ClassOfServiceAvailability'] = _items
        # override the default output from pydantic by calling `to_dict()` of fare_qualifier
        if self.fare_qualifier:
            _dict['FareQualifier'] = self.fare_qualifier.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FlightProduct:
        """Create an instance of FlightProduct from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FlightProduct.parse_obj(obj)

        _obj = FlightProduct.parse_obj({
            "type": obj.get("@type"),
            "segment_sequence": obj.get("segmentSequence"),
            "class_of_service": obj.get("classOfService"),
            "cabin": obj.get("cabin"),
            "fare_basis_code": obj.get("fareBasisCode"),
            "fare_type": obj.get("fareType"),
            "car_code": obj.get("carCode"),
            "value_code": obj.get("valueCode"),
            "brand": BrandID.from_dict(obj.get("Brand")) if obj.get("Brand") is not None else None,
            "customer_loyalty_credit": [CustomerLoyaltyCredit.from_dict(_item) for _item in obj.get("CustomerLoyaltyCredit")] if obj.get("CustomerLoyaltyCredit") is not None else None,
            "class_of_service_availability": [ClassOfServiceAvailability.from_dict(_item) for _item in obj.get("ClassOfServiceAvailability")] if obj.get("ClassOfServiceAvailability") is not None else None,
            "fare_qualifier": FareQualifierENUM.from_dict(obj.get("FareQualifier")) if obj.get("FareQualifier") is not None else None,
            "stopover_priced": obj.get("stopoverPriced"),
            "ticket_designator": obj.get("ticketDesignator"),
            "fare_type_code": obj.get("fareTypeCode")
        })
        return _obj


