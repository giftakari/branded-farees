# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr

class SpaceFeature(BaseModel):
    """
    Discriptive information about the seat.
    """
    value: Optional[constr(strict=True, max_length=1024)] = None
    context: Optional[constr(strict=True, max_length=32)] = Field(None, description="The source of the code")
    seat_type: Optional[constr(strict=True, max_length=32)] = Field(None, alias="seatType", description="The type of object that occupies the space")
    description: Optional[constr(strict=True, max_length=1024)] = Field(None, description="The description of the space feature")
    power: Optional[constr(strict=True, max_length=32)] = Field(None, description="The type of power provided, if any")
    video: Optional[constr(strict=True, max_length=32)] = Field(None, description="The type of video provided, if any")
    rating: Optional[constr(strict=True, max_length=32)] = Field(None, description="The seat guru rating of the seat")
    __properties = ["value", "context", "seatType", "description", "power", "video", "rating"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SpaceFeature:
        """Create an instance of SpaceFeature from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SpaceFeature:
        """Create an instance of SpaceFeature from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SpaceFeature.parse_obj(obj)

        _obj = SpaceFeature.parse_obj({
            "value": obj.get("value"),
            "context": obj.get("context"),
            "seat_type": obj.get("seatType"),
            "description": obj.get("description"),
            "power": obj.get("power"),
            "video": obj.get("video"),
            "rating": obj.get("rating")
        })
        return _obj


