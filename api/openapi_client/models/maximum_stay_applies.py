# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import Field, StrictBool, StrictStr, constr, validator
from openapi_client.models.maximum_stay import MaximumStay

class MaximumStayApplies(MaximumStay):
    """
    MaximumStayApplies
    """
    maximum_stay_duration: Optional[StrictStr] = Field(None, alias="maximumStayDuration")
    maximum_stay_date: Optional[date] = Field(None, alias="maximumStayDate")
    return_time: Optional[constr(strict=True)] = Field(None, alias="returnTime", description="Return time")
    must_commence_by_ind: Optional[StrictBool] = Field(None, alias="mustCommenceByInd", description="Indicates if travel must commence by this date/duration")
    must_complete_by_ind: Optional[StrictBool] = Field(None, alias="mustCompleteByInd", description="Indicates if travel must complete by this date/duration")
    from_date_of_issue_ind: Optional[StrictBool] = Field(None, alias="fromDateOfIssueInd", description="If true the Maximum stay is calculated from the date of ticket issuance")
    earliest_applies_ind: Optional[StrictBool] = Field(None, alias="earliestAppliesInd", description="If true, the earlier of the Maximum stay conditions apply")
    latest_applies_ind: Optional[StrictBool] = Field(None, alias="latestAppliesInd", description="If true, the later of the Maximum stay conditions apply")
    __properties = ["@type", "maximumStayDuration", "maximumStayDate", "returnTime", "mustCommenceByInd", "mustCompleteByInd", "fromDateOfIssueInd", "earliestAppliesInd", "latestAppliesInd"]

    @validator('return_time')
    def return_time_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"(([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)((:?)[0-5]\d)?([\.,]\d+(?!:))?", value):
            raise ValueError(r"must validate the regular expression /(([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)((:?)[0-5]\d)?([\.,]\d+(?!:))?/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MaximumStayApplies:
        """Create an instance of MaximumStayApplies from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MaximumStayApplies:
        """Create an instance of MaximumStayApplies from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MaximumStayApplies.parse_obj(obj)

        _obj = MaximumStayApplies.parse_obj({
            "type": obj.get("@type"),
            "maximum_stay_duration": obj.get("maximumStayDuration"),
            "maximum_stay_date": obj.get("maximumStayDate"),
            "return_time": obj.get("returnTime"),
            "must_commence_by_ind": obj.get("mustCommenceByInd"),
            "must_complete_by_ind": obj.get("mustCompleteByInd"),
            "from_date_of_issue_ind": obj.get("fromDateOfIssueInd"),
            "earliest_applies_ind": obj.get("earliestAppliesInd"),
            "latest_applies_ind": obj.get("latestAppliesInd")
        })
        return _obj


