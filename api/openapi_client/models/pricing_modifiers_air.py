# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist, constr, validator
from openapi_client.models.fare_selection_detail import FareSelectionDetail
from openapi_client.models.organization_information import OrganizationInformation
from openapi_client.models.promotional_code import PromotionalCode
from openapi_client.models.tax_exemption import TaxExemption

class PricingModifiersAir(BaseModel):
    """
    PricingModifiersAir
    """
    type: StrictStr = Field(..., alias="@type")
    currency_code: Optional[constr(strict=True)] = Field(None, alias="currencyCode", description="Currency Code ISO")
    fare_selection: Optional[FareSelectionDetail] = Field(None, alias="FareSelection")
    organization_information: Optional[OrganizationInformation] = Field(None, alias="OrganizationInformation")
    tax_exemption: Optional[TaxExemption] = Field(None, alias="TaxExemption")
    promotional_code: Optional[conlist(PromotionalCode, max_items=10)] = Field(None, alias="PromotionalCode")
    sell_city: Optional[constr(strict=True, max_length=3, min_length=3)] = Field(None, alias="SellCity", description="Overrides the sell city of the requestor.")
    ticket_city: Optional[constr(strict=True, max_length=3, min_length=3)] = Field(None, alias="TicketCity", description="Overrides the ticket city of the requestor.")
    pricing_pcc: Optional[constr(strict=True, max_length=10, min_length=2)] = Field(None, alias="PricingPCC")
    ticketing_pcc: Optional[constr(strict=True, max_length=10, min_length=2)] = Field(None, alias="TicketingPCC")
    include_split_payment_ind: Optional[StrictBool] = Field(None, alias="includeSplitPaymentInd", description="If true, split payment (split ticket) offerings/offers will be returned")
    return_most_restrictive_brand_ind: Optional[StrictBool] = Field(None, alias="returnMostRestrictiveBrandInd", description="if true, the most restrictive brand will be returned in the response when there are different brands present in the Offering")
    split_payment_offerings: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="splitPaymentOfferings", description="The percentage, between 0 and 99, of round trip offerings the user would like returned in the result set.")
    __properties = ["@type", "currencyCode", "FareSelection", "OrganizationInformation", "TaxExemption", "PromotionalCode", "SellCity", "TicketCity", "PricingPCC", "TicketingPCC", "includeSplitPaymentInd", "returnMostRestrictiveBrandInd", "splitPaymentOfferings"]

    @validator('currency_code')
    def currency_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[a-zA-Z]{3}", value):
            raise ValueError(r"must validate the regular expression /[a-zA-Z]{3}/")
        return value

    @validator('sell_city')
    def sell_city_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z]{3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z]{3})/")
        return value

    @validator('ticket_city')
    def ticket_city_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z]{3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z]{3})/")
        return value

    @validator('pricing_pcc')
    def pricing_pcc_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{2,10})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{2,10})/")
        return value

    @validator('ticketing_pcc')
    def ticketing_pcc_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{2,10})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{2,10})/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = '@type'

    # discriminator mappings
    __discriminator_value_class_map = {
        'PricingModifiersAirDetail': 'PricingModifiersAirDetail'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(PricingModifiersAirDetail):
        """Create an instance of PricingModifiersAir from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of fare_selection
        if self.fare_selection:
            _dict['FareSelection'] = self.fare_selection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization_information
        if self.organization_information:
            _dict['OrganizationInformation'] = self.organization_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_exemption
        if self.tax_exemption:
            _dict['TaxExemption'] = self.tax_exemption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in promotional_code (list)
        _items = []
        if self.promotional_code:
            for _item in self.promotional_code:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PromotionalCode'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(PricingModifiersAirDetail):
        """Create an instance of PricingModifiersAir from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("PricingModifiersAir failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.pricing_modifiers_air_detail import PricingModifiersAirDetail
PricingModifiersAir.update_forward_refs()

