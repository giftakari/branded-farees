# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from openapi_client.models.cabin_air_enum import CabinAirEnum
from openapi_client.models.cabin_preference_type_enum import CabinPreferenceTypeEnum

class CabinPreference(BaseModel):
    """
    CabinPreference
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    preference_type: Optional[CabinPreferenceTypeEnum] = Field(None, alias="preferenceType")
    cabins: Optional[conlist(CabinAirEnum)] = None
    leg_sequence: Optional[conlist(StrictInt)] = Field(None, alias="legSequence", description="Leg sequence")
    __properties = ["@type", "preferenceType", "cabins", "legSequence"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CabinPreference:
        """Create an instance of CabinPreference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CabinPreference:
        """Create an instance of CabinPreference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CabinPreference.parse_obj(obj)

        _obj = CabinPreference.parse_obj({
            "type": obj.get("@type"),
            "preference_type": obj.get("preferenceType"),
            "cabins": obj.get("cabins"),
            "leg_sequence": obj.get("legSequence")
        })
        return _obj


