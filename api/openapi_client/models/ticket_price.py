# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, constr
from openapi_client.models.alternate_amount import AlternateAmount
from openapi_client.models.commission import Commission
from openapi_client.models.currency_code import CurrencyCode
from openapi_client.models.fees import Fees
from openapi_client.models.filed_amount import FiledAmount
from openapi_client.models.paid_taxes import PaidTaxes
from openapi_client.models.taxes import Taxes

class TicketPrice(BaseModel):
    """
    TicketPrice
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    fare_calculation: Optional[constr(strict=True, max_length=512)] = Field(None, alias="fareCalculation", description="Calculation of applicable fare")
    fare_breakdown: Optional[constr(strict=True, max_length=512)] = Field(None, alias="fareBreakdown", description="An itineraray used as the start and finish of a particular fare")
    currency_code: CurrencyCode = Field(..., alias="CurrencyCode")
    base: Union[StrictFloat, StrictInt] = Field(..., alias="Base")
    taxes: Optional[PaidTaxes] = Field(None, alias="Taxes")
    fees: Optional[Fees] = Field(None, alias="Fees")
    total: Union[StrictFloat, StrictInt] = Field(..., alias="Total")
    commission: Optional[Commission] = Field(None, alias="Commission")
    filed_amount: Optional[FiledAmount] = Field(None, alias="FiledAmount")
    paid_taxes: Optional[Taxes] = Field(None, alias="PaidTaxes")
    i_t_fare_ind: Optional[StrictBool] = Field(None, alias="iTFareInd", description="if true, this is an IT fare and the base amount is not exposed")
    b_t_fare_ind: Optional[StrictBool] = Field(None, alias="bTFareInd", description="if true, this is a BT fare and the base amount is not exposed")
    additional_collection: Optional[FiledAmount] = Field(None, alias="AdditionalCollection")
    net_amount: Optional[AlternateAmount] = Field(None, alias="NetAmount")
    __properties = ["@type", "fareCalculation", "fareBreakdown", "CurrencyCode", "Base", "Taxes", "Fees", "Total", "Commission", "FiledAmount", "PaidTaxes", "iTFareInd", "bTFareInd", "AdditionalCollection", "NetAmount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TicketPrice:
        """Create an instance of TicketPrice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of currency_code
        if self.currency_code:
            _dict['CurrencyCode'] = self.currency_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of taxes
        if self.taxes:
            _dict['Taxes'] = self.taxes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fees
        if self.fees:
            _dict['Fees'] = self.fees.to_dict()
        # override the default output from pydantic by calling `to_dict()` of commission
        if self.commission:
            _dict['Commission'] = self.commission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filed_amount
        if self.filed_amount:
            _dict['FiledAmount'] = self.filed_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of paid_taxes
        if self.paid_taxes:
            _dict['PaidTaxes'] = self.paid_taxes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of additional_collection
        if self.additional_collection:
            _dict['AdditionalCollection'] = self.additional_collection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of net_amount
        if self.net_amount:
            _dict['NetAmount'] = self.net_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TicketPrice:
        """Create an instance of TicketPrice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TicketPrice.parse_obj(obj)

        _obj = TicketPrice.parse_obj({
            "type": obj.get("@type"),
            "fare_calculation": obj.get("fareCalculation"),
            "fare_breakdown": obj.get("fareBreakdown"),
            "currency_code": CurrencyCode.from_dict(obj.get("CurrencyCode")) if obj.get("CurrencyCode") is not None else None,
            "base": obj.get("Base"),
            "taxes": PaidTaxes.from_dict(obj.get("Taxes")) if obj.get("Taxes") is not None else None,
            "fees": Fees.from_dict(obj.get("Fees")) if obj.get("Fees") is not None else None,
            "total": obj.get("Total"),
            "commission": Commission.from_dict(obj.get("Commission")) if obj.get("Commission") is not None else None,
            "filed_amount": FiledAmount.from_dict(obj.get("FiledAmount")) if obj.get("FiledAmount") is not None else None,
            "paid_taxes": Taxes.from_dict(obj.get("PaidTaxes")) if obj.get("PaidTaxes") is not None else None,
            "i_t_fare_ind": obj.get("iTFareInd"),
            "b_t_fare_ind": obj.get("bTFareInd"),
            "additional_collection": FiledAmount.from_dict(obj.get("AdditionalCollection")) if obj.get("AdditionalCollection") is not None else None,
            "net_amount": AlternateAmount.from_dict(obj.get("NetAmount")) if obj.get("NetAmount") is not None else None
        })
        return _obj


