# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, conlist
from openapi_client.models.change_fee_collection_method import ChangeFeeCollectionMethod
from openapi_client.models.commissions import Commissions
from openapi_client.models.destination_purpose import DestinationPurpose
from openapi_client.models.document_overrides_id import DocumentOverridesID
from openapi_client.models.identifier import Identifier
from openapi_client.models.net_remit_info import NetRemitInfo
from openapi_client.models.offer_identifier import OfferIdentifier
from openapi_client.models.product_identifier import ProductIdentifier
from openapi_client.models.restrictions import Restrictions
from openapi_client.models.tour_codes import TourCodes

class DocumentOverrides(DocumentOverridesID):
    """
    DocumentOverrides
    """
    offer_identifier: Optional[OfferIdentifier] = Field(None, alias="OfferIdentifier")
    product_identifier: Optional[ProductIdentifier] = Field(None, alias="ProductIdentifier")
    commissions: Optional[conlist(Commissions, max_items=10)] = Field(None, alias="Commissions")
    destination_purpose: Optional[conlist(DestinationPurpose, max_items=10)] = Field(None, alias="DestinationPurpose")
    restrictions: Optional[conlist(Restrictions, max_items=10)] = Field(None, alias="Restrictions")
    tour_codes: Optional[conlist(TourCodes, max_items=10)] = Field(None, alias="TourCodes")
    change_fee_collection_method: Optional[ChangeFeeCollectionMethod] = Field(None, alias="ChangeFeeCollectionMethod")
    net_remit_info: Optional[NetRemitInfo] = Field(None, alias="NetRemitInfo")
    __properties = ["@type", "id", "DocumentOverridesRef", "Identifier", "OfferIdentifier", "ProductIdentifier", "Commissions", "DestinationPurpose", "Restrictions", "TourCodes", "ChangeFeeCollectionMethod", "NetRemitInfo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DocumentOverrides:
        """Create an instance of DocumentOverrides from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of offer_identifier
        if self.offer_identifier:
            _dict['OfferIdentifier'] = self.offer_identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_identifier
        if self.product_identifier:
            _dict['ProductIdentifier'] = self.product_identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in commissions (list)
        _items = []
        if self.commissions:
            for _item in self.commissions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Commissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in destination_purpose (list)
        _items = []
        if self.destination_purpose:
            for _item in self.destination_purpose:
                if _item:
                    _items.append(_item.to_dict())
            _dict['DestinationPurpose'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in restrictions (list)
        _items = []
        if self.restrictions:
            for _item in self.restrictions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Restrictions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tour_codes (list)
        _items = []
        if self.tour_codes:
            for _item in self.tour_codes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['TourCodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of change_fee_collection_method
        if self.change_fee_collection_method:
            _dict['ChangeFeeCollectionMethod'] = self.change_fee_collection_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of net_remit_info
        if self.net_remit_info:
            _dict['NetRemitInfo'] = self.net_remit_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DocumentOverrides:
        """Create an instance of DocumentOverrides from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DocumentOverrides.parse_obj(obj)

        _obj = DocumentOverrides.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "document_overrides_ref": obj.get("DocumentOverridesRef"),
            "identifier": Identifier.from_dict(obj.get("Identifier")) if obj.get("Identifier") is not None else None,
            "offer_identifier": OfferIdentifier.from_dict(obj.get("OfferIdentifier")) if obj.get("OfferIdentifier") is not None else None,
            "product_identifier": ProductIdentifier.from_dict(obj.get("ProductIdentifier")) if obj.get("ProductIdentifier") is not None else None,
            "commissions": [Commissions.from_dict(_item) for _item in obj.get("Commissions")] if obj.get("Commissions") is not None else None,
            "destination_purpose": [DestinationPurpose.from_dict(_item) for _item in obj.get("DestinationPurpose")] if obj.get("DestinationPurpose") is not None else None,
            "restrictions": [Restrictions.from_dict(_item) for _item in obj.get("Restrictions")] if obj.get("Restrictions") is not None else None,
            "tour_codes": [TourCodes.from_dict(_item) for _item in obj.get("TourCodes")] if obj.get("TourCodes") is not None else None,
            "change_fee_collection_method": ChangeFeeCollectionMethod.from_dict(obj.get("ChangeFeeCollectionMethod")) if obj.get("ChangeFeeCollectionMethod") is not None else None,
            "net_remit_info": NetRemitInfo.from_dict(obj.get("NetRemitInfo")) if obj.get("NetRemitInfo") is not None else None
        })
        return _obj


