# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, StrictInt, conlist
from openapi_client.models.ancillary_offering_identifier import AncillaryOfferingIdentifier
from openapi_client.models.build_from_catalog_offerings_request import BuildFromCatalogOfferingsRequest
from openapi_client.models.catalog_offering_identifier import CatalogOfferingIdentifier
from openapi_client.models.catalog_offerings_identifier import CatalogOfferingsIdentifier
from openapi_client.models.pricing_modifiers_air import PricingModifiersAir
from openapi_client.models.product_identifier import ProductIdentifier

class BuildFromCatalogOfferingsRequestAir(BuildFromCatalogOfferingsRequest):
    """
    BuildFromCatalogOfferingsRequestAir
    """
    pricing_modifiers_air: Optional[PricingModifiersAir] = Field(None, alias="PricingModifiersAir")
    segment_sequence: Optional[conlist(StrictInt)] = Field(None, alias="SegmentSequence", description="The segmentSequence within the product the action is being requested for. Used when multiple flights exist within a product. Only one product may be selected with this option.")
    __properties = ["@type", "CatalogOfferingsIdentifier", "CatalogOfferingIdentifier", "ProductIdentifier", "AncillaryOfferingIdentifier", "PricingModifiersAir", "SegmentSequence"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BuildFromCatalogOfferingsRequestAir:
        """Create an instance of BuildFromCatalogOfferingsRequestAir from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of catalog_offerings_identifier
        if self.catalog_offerings_identifier:
            _dict['CatalogOfferingsIdentifier'] = self.catalog_offerings_identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of catalog_offering_identifier
        if self.catalog_offering_identifier:
            _dict['CatalogOfferingIdentifier'] = self.catalog_offering_identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in product_identifier (list)
        _items = []
        if self.product_identifier:
            for _item in self.product_identifier:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ProductIdentifier'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ancillary_offering_identifier (list)
        _items = []
        if self.ancillary_offering_identifier:
            for _item in self.ancillary_offering_identifier:
                if _item:
                    _items.append(_item.to_dict())
            _dict['AncillaryOfferingIdentifier'] = _items
        # override the default output from pydantic by calling `to_dict()` of pricing_modifiers_air
        if self.pricing_modifiers_air:
            _dict['PricingModifiersAir'] = self.pricing_modifiers_air.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BuildFromCatalogOfferingsRequestAir:
        """Create an instance of BuildFromCatalogOfferingsRequestAir from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BuildFromCatalogOfferingsRequestAir.parse_obj(obj)

        _obj = BuildFromCatalogOfferingsRequestAir.parse_obj({
            "type": obj.get("@type"),
            "catalog_offerings_identifier": CatalogOfferingsIdentifier.from_dict(obj.get("CatalogOfferingsIdentifier")) if obj.get("CatalogOfferingsIdentifier") is not None else None,
            "catalog_offering_identifier": CatalogOfferingIdentifier.from_dict(obj.get("CatalogOfferingIdentifier")) if obj.get("CatalogOfferingIdentifier") is not None else None,
            "product_identifier": [ProductIdentifier.from_dict(_item) for _item in obj.get("ProductIdentifier")] if obj.get("ProductIdentifier") is not None else None,
            "ancillary_offering_identifier": [AncillaryOfferingIdentifier.from_dict(_item) for _item in obj.get("AncillaryOfferingIdentifier")] if obj.get("AncillaryOfferingIdentifier") is not None else None,
            "pricing_modifiers_air": PricingModifiersAir.from_dict(obj.get("PricingModifiersAir")) if obj.get("PricingModifiersAir") is not None else None,
            "segment_sequence": obj.get("SegmentSequence")
        })
        return _obj


