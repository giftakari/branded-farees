# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, StrictInt, conlist, constr, validator
from openapi_client.models.brand_id import BrandID
from openapi_client.models.catalog_product_offering_id import CatalogProductOfferingID
from openapi_client.models.identifier import Identifier
from openapi_client.models.product_brand_options import ProductBrandOptions
from openapi_client.models.sponsored_product_brand_options import SponsoredProductBrandOptions

class CatalogProductOffering(CatalogProductOfferingID):
    """
    CatalogProductOffering
    """
    sequence: Optional[StrictInt] = Field(None, description="NumberDoubleDigit")
    departure: Optional[constr(strict=True, max_length=3, min_length=3)] = Field(None, alias="Departure", description="Departure location")
    arrival: Optional[constr(strict=True, max_length=3, min_length=3)] = Field(None, alias="Arrival", description="Arrival location")
    brand: Optional[conlist(BrandID, max_items=1000)] = Field(None, alias="Brand")
    product_brand_options: conlist(ProductBrandOptions, max_items=1000, min_items=1) = Field(..., alias="ProductBrandOptions")
    sponsored_product_brand_options: Optional[conlist(SponsoredProductBrandOptions, max_items=1000)] = Field(None, alias="SponsoredProductBrandOptions")
    __properties = ["@type", "id", "Identifier", "CatalogProductOfferingRef", "sequence", "Departure", "Arrival", "Brand", "ProductBrandOptions", "SponsoredProductBrandOptions"]

    @validator('departure')
    def departure_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z]{3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z]{3})/")
        return value

    @validator('arrival')
    def arrival_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z]{3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z]{3})/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CatalogProductOffering:
        """Create an instance of CatalogProductOffering from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in brand (list)
        _items = []
        if self.brand:
            for _item in self.brand:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Brand'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product_brand_options (list)
        _items = []
        if self.product_brand_options:
            for _item in self.product_brand_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ProductBrandOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sponsored_product_brand_options (list)
        _items = []
        if self.sponsored_product_brand_options:
            for _item in self.sponsored_product_brand_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['SponsoredProductBrandOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CatalogProductOffering:
        """Create an instance of CatalogProductOffering from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CatalogProductOffering.parse_obj(obj)

        _obj = CatalogProductOffering.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "identifier": Identifier.from_dict(obj.get("Identifier")) if obj.get("Identifier") is not None else None,
            "catalog_product_offering_ref": obj.get("CatalogProductOfferingRef"),
            "sequence": obj.get("sequence"),
            "departure": obj.get("Departure"),
            "arrival": obj.get("Arrival"),
            "brand": [BrandID.from_dict(_item) for _item in obj.get("Brand")] if obj.get("Brand") is not None else None,
            "product_brand_options": [ProductBrandOptions.from_dict(_item) for _item in obj.get("ProductBrandOptions")] if obj.get("ProductBrandOptions") is not None else None,
            "sponsored_product_brand_options": [SponsoredProductBrandOptions.from_dict(_item) for _item in obj.get("SponsoredProductBrandOptions")] if obj.get("SponsoredProductBrandOptions") is not None else None
        })
        return _obj


