# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, constr
from openapi_client.models.list_payment_card_issuer_enum import ListPaymentCardIssuerEnum

class PaymentCardTypeIssuer(BaseModel):
    """
    This object contains Cards details for Payment
    """
    payment_card_issuers: Optional[ListPaymentCardIssuerEnum] = Field(None, alias="paymentCardIssuers")
    payment_card_issuers_extension: Optional[constr(strict=True, max_length=128, min_length=1)] = Field(None, alias="paymentCardIssuersExtension")
    issue_number: Optional[StrictInt] = Field(None, alias="issueNumber", description="Assigned Type: c-1100:NumberDoubleDigit")
    __properties = ["paymentCardIssuers", "paymentCardIssuersExtension", "issueNumber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentCardTypeIssuer:
        """Create an instance of PaymentCardTypeIssuer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payment_card_issuers
        if self.payment_card_issuers:
            _dict['paymentCardIssuers'] = self.payment_card_issuers.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentCardTypeIssuer:
        """Create an instance of PaymentCardTypeIssuer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentCardTypeIssuer.parse_obj(obj)

        _obj = PaymentCardTypeIssuer.parse_obj({
            "payment_card_issuers": ListPaymentCardIssuerEnum.from_dict(obj.get("paymentCardIssuers")) if obj.get("paymentCardIssuers") is not None else None,
            "payment_card_issuers_extension": obj.get("paymentCardIssuersExtension"),
            "issue_number": obj.get("issueNumber")
        })
        return _obj


