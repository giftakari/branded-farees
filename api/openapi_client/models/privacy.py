# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.opt_in_status_enum import OptInStatusEnum
from openapi_client.models.yes_no_inherit_enum import YesNoInheritEnum

class Privacy(BaseModel):
    """
    Confidential details for marketing purpose
    """
    id: Optional[StrictStr] = Field(None, description="Optional internally referenced id")
    share_marketing: Optional[YesNoInheritEnum] = Field(None, alias="shareMarketing")
    share_sync: Optional[YesNoInheritEnum] = Field(None, alias="shareSync")
    opt_out_ind: Optional[YesNoInheritEnum] = Field(None, alias="optOutInd")
    opt_in_status: Optional[OptInStatusEnum] = Field(None, alias="optInStatus")
    opt_in_date: Optional[datetime] = Field(None, alias="optInDate", description="The datetime of receiving the opt in notice")
    opt_out_date: Optional[datetime] = Field(None, alias="optOutDate", description="The datetime the opt out notice was received")
    __properties = ["id", "shareMarketing", "shareSync", "optOutInd", "optInStatus", "optInDate", "optOutDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Privacy:
        """Create an instance of Privacy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Privacy:
        """Create an instance of Privacy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Privacy.parse_obj(obj)

        _obj = Privacy.parse_obj({
            "id": obj.get("id"),
            "share_marketing": obj.get("shareMarketing"),
            "share_sync": obj.get("shareSync"),
            "opt_out_ind": obj.get("optOutInd"),
            "opt_in_status": obj.get("optInStatus"),
            "opt_in_date": obj.get("optInDate"),
            "opt_out_date": obj.get("optOutDate")
        })
        return _obj


