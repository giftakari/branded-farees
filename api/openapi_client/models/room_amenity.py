# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, conlist, constr, validator

class RoomAmenity(BaseModel):
    """
    RoomAmenity
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    description: Optional[constr(strict=True, max_length=512)] = Field(None, description="description of the room amenity")
    quantity: Optional[conint(strict=True, ge=0)] = Field(None, description="quantity of amenity")
    name: Optional[constr(strict=True, max_length=32)] = Field(None, alias="Name", description="Room Amenity Name")
    inclusion: Optional[conlist(constr(strict=True, max_length=32), max_items=10)] = Field(None, alias="Inclusion")
    included_ind: Optional[StrictBool] = Field(None, alias="includedInd", description="To represent if the Amenity is included in the rate")
    surcharge_ind: Optional[StrictBool] = Field(None, alias="surchargeInd", description="To represent if the Amenity attracts a surcharge")
    code: Optional[constr(strict=True)] = Field(None, description="OTA code used to describe the room amenity. This is optional in the Properties Search request but mandatory in the response")
    __properties = ["@type", "description", "quantity", "Name", "Inclusion", "includedInd", "surchargeInd", "code"]

    @validator('code')
    def code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}", value):
            raise ValueError(r"must validate the regular expression /[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RoomAmenity:
        """Create an instance of RoomAmenity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RoomAmenity:
        """Create an instance of RoomAmenity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RoomAmenity.parse_obj(obj)

        _obj = RoomAmenity.parse_obj({
            "type": obj.get("@type"),
            "description": obj.get("description"),
            "quantity": obj.get("quantity"),
            "name": obj.get("Name"),
            "inclusion": obj.get("Inclusion"),
            "included_ind": obj.get("includedInd"),
            "surcharge_ind": obj.get("surchargeInd"),
            "code": obj.get("code")
        })
        return _obj


