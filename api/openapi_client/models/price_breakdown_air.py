# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import Field, StrictInt, constr, validator
from openapi_client.models.amount import Amount
from openapi_client.models.commission import Commission
from openapi_client.models.discount import Discount
from openapi_client.models.filed_amount import FiledAmount
from openapi_client.models.net_fare_info import NetFareInfo
from openapi_client.models.price_breakdown import PriceBreakdown
from openapi_client.models.surcharges import Surcharges
from openapi_client.models.traveler_identifier_ref import TravelerIdentifierRef

class PriceBreakdownAir(PriceBreakdown):
    """
    PriceBreakdownAir
    """
    quantity: Optional[StrictInt] = Field(None, description="The quantity value")
    requested_passenger_type: Optional[constr(strict=True, max_length=5, min_length=3)] = Field(None, alias="requestedPassengerType", description="The requested passenger type code")
    filed_amount: Optional[FiledAmount] = Field(None, alias="FiledAmount")
    discount: Optional[Discount] = Field(None, alias="Discount")
    net_fare_info: Optional[NetFareInfo] = Field(None, alias="NetFareInfo")
    traveler_identifier_ref: Optional[TravelerIdentifierRef] = Field(None, alias="TravelerIdentifierRef")
    net_base_amount: Optional[FiledAmount] = Field(None, alias="NetBaseAmount")
    fare_calculation: Optional[constr(strict=True, max_length=512)] = Field(None, alias="FareCalculation")
    surcharges: Optional[Surcharges] = Field(None, alias="Surcharges")
    __properties = ["@type", "Amount", "Commission", "quantity", "requestedPassengerType", "FiledAmount", "Discount", "NetFareInfo", "TravelerIdentifierRef", "NetBaseAmount", "FareCalculation", "Surcharges"]

    @validator('requested_passenger_type')
    def requested_passenger_type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{3,5})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{3,5})/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PriceBreakdownAir:
        """Create an instance of PriceBreakdownAir from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['Amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of commission
        if self.commission:
            _dict['Commission'] = self.commission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filed_amount
        if self.filed_amount:
            _dict['FiledAmount'] = self.filed_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict['Discount'] = self.discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of net_fare_info
        if self.net_fare_info:
            _dict['NetFareInfo'] = self.net_fare_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of traveler_identifier_ref
        if self.traveler_identifier_ref:
            _dict['TravelerIdentifierRef'] = self.traveler_identifier_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of net_base_amount
        if self.net_base_amount:
            _dict['NetBaseAmount'] = self.net_base_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of surcharges
        if self.surcharges:
            _dict['Surcharges'] = self.surcharges.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PriceBreakdownAir:
        """Create an instance of PriceBreakdownAir from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PriceBreakdownAir.parse_obj(obj)

        _obj = PriceBreakdownAir.parse_obj({
            "type": obj.get("@type"),
            "amount": Amount.from_dict(obj.get("Amount")) if obj.get("Amount") is not None else None,
            "commission": Commission.from_dict(obj.get("Commission")) if obj.get("Commission") is not None else None,
            "quantity": obj.get("quantity"),
            "requested_passenger_type": obj.get("requestedPassengerType"),
            "filed_amount": FiledAmount.from_dict(obj.get("FiledAmount")) if obj.get("FiledAmount") is not None else None,
            "discount": Discount.from_dict(obj.get("Discount")) if obj.get("Discount") is not None else None,
            "net_fare_info": NetFareInfo.from_dict(obj.get("NetFareInfo")) if obj.get("NetFareInfo") is not None else None,
            "traveler_identifier_ref": TravelerIdentifierRef.from_dict(obj.get("TravelerIdentifierRef")) if obj.get("TravelerIdentifierRef") is not None else None,
            "net_base_amount": FiledAmount.from_dict(obj.get("NetBaseAmount")) if obj.get("NetBaseAmount") is not None else None,
            "fare_calculation": obj.get("FareCalculation"),
            "surcharges": Surcharges.from_dict(obj.get("Surcharges")) if obj.get("Surcharges") is not None else None
        })
        return _obj


