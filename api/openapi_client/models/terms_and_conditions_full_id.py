# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.identifier import Identifier

class TermsAndConditionsFullID(BaseModel):
    """
    TermsAndConditionsFullID
    """
    type: StrictStr = Field(..., alias="@type")
    id: Optional[StrictStr] = Field(None, description="Local indentifier within a given message for this object.")
    terms_and_conditions_ref: Optional[StrictStr] = Field(None, alias="termsAndConditionsRef", description="Used to reference another instance of this object in the same message.")
    identifier: Optional[Identifier] = Field(None, alias="Identifier")
    __properties = ["@type", "id", "termsAndConditionsRef", "Identifier"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = '@type'

    # discriminator mappings
    __discriminator_value_class_map = {
        'ImportsCatalogAir_ReservationResource': 'ImportsCatalogAirReservationResource',
        'TermsAndConditionsFull': 'TermsAndConditionsFull',
        'TermsAndConditionsFullAir': 'TermsAndConditionsFullAir',
        'TermsAndConditionsFullAirChange': 'TermsAndConditionsFullAirChange',
        'TermsAndConditionsFullAncillary': 'TermsAndConditionsFullAncillary',
        'TermsAndConditionsFullHospitality': 'TermsAndConditionsFullHospitality',
        'TermsAndConditionsFullVehicle': 'TermsAndConditionsFullVehicle'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(TermsAndConditionsFull, TermsAndConditionsFullAir, TermsAndConditionsFullAirChange, TermsAndConditionsFullAncillary, TermsAndConditionsFullHospitality, TermsAndConditionsFullVehicle):
        """Create an instance of TermsAndConditionsFullID from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(TermsAndConditionsFull, TermsAndConditionsFullAir, TermsAndConditionsFullAirChange, TermsAndConditionsFullAncillary, TermsAndConditionsFullHospitality, TermsAndConditionsFullVehicle):
        """Create an instance of TermsAndConditionsFullID from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("TermsAndConditionsFullID failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.imports_catalog_air_reservation_resource import ImportsCatalogAir_ReservationResource
from openapi_client.models.terms_and_conditions_full import TermsAndConditionsFull
from openapi_client.models.terms_and_conditions_full_air import TermsAndConditionsFullAir
from openapi_client.models.terms_and_conditions_full_air_change import TermsAndConditionsFullAirChange
from openapi_client.models.terms_and_conditions_full_ancillary import TermsAndConditionsFullAncillary
from openapi_client.models.terms_and_conditions_full_hospitality import TermsAndConditionsFullHospitality
from openapi_client.models.terms_and_conditions_full_vehicle import TermsAndConditionsFullVehicle
TermsAndConditionsFullID.update_forward_refs()

