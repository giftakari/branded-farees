# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.currency_amount import CurrencyAmount

class ApproximateRate(BaseModel):
    """
    ApproximateRate
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    base_rate: Optional[CurrencyAmount] = Field(None, alias="BaseRate")
    rate_for_period: Optional[CurrencyAmount] = Field(None, alias="RateForPeriod")
    drop_off_charge: Optional[CurrencyAmount] = Field(None, alias="DropOffCharge")
    extra_mileage_charge: Optional[CurrencyAmount] = Field(None, alias="ExtraMileageCharge")
    estimated_total_amount: Optional[CurrencyAmount] = Field(None, alias="EstimatedTotalAmount")
    __properties = ["@type", "BaseRate", "RateForPeriod", "DropOffCharge", "ExtraMileageCharge", "EstimatedTotalAmount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApproximateRate:
        """Create an instance of ApproximateRate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of base_rate
        if self.base_rate:
            _dict['BaseRate'] = self.base_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rate_for_period
        if self.rate_for_period:
            _dict['RateForPeriod'] = self.rate_for_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of drop_off_charge
        if self.drop_off_charge:
            _dict['DropOffCharge'] = self.drop_off_charge.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extra_mileage_charge
        if self.extra_mileage_charge:
            _dict['ExtraMileageCharge'] = self.extra_mileage_charge.to_dict()
        # override the default output from pydantic by calling `to_dict()` of estimated_total_amount
        if self.estimated_total_amount:
            _dict['EstimatedTotalAmount'] = self.estimated_total_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApproximateRate:
        """Create an instance of ApproximateRate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApproximateRate.parse_obj(obj)

        _obj = ApproximateRate.parse_obj({
            "type": obj.get("@type"),
            "base_rate": CurrencyAmount.from_dict(obj.get("BaseRate")) if obj.get("BaseRate") is not None else None,
            "rate_for_period": CurrencyAmount.from_dict(obj.get("RateForPeriod")) if obj.get("RateForPeriod") is not None else None,
            "drop_off_charge": CurrencyAmount.from_dict(obj.get("DropOffCharge")) if obj.get("DropOffCharge") is not None else None,
            "extra_mileage_charge": CurrencyAmount.from_dict(obj.get("ExtraMileageCharge")) if obj.get("ExtraMileageCharge") is not None else None,
            "estimated_total_amount": CurrencyAmount.from_dict(obj.get("EstimatedTotalAmount")) if obj.get("EstimatedTotalAmount") is not None else None
        })
        return _obj


