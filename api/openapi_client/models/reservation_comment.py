# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, conlist, constr
from openapi_client.models.applies_to import AppliesTo
from openapi_client.models.comment import Comment
from openapi_client.models.comment_source_enum import CommentSourceEnum
from openapi_client.models.reservation_comment_id import ReservationCommentID
from openapi_client.models.share_with_enum import ShareWithEnum

class ReservationComment(ReservationCommentID):
    """
    ReservationComment
    """
    comment_source: Optional[CommentSourceEnum] = Field(None, alias="commentSource")
    share_with: Optional[ShareWithEnum] = Field(None, alias="shareWith")
    share_with_supplier: Optional[conlist(constr(strict=True, max_length=32))] = Field(None, alias="shareWithSupplier", description="Reservation comment shared with supplier")
    comment: Optional[conlist(Comment, max_items=1000)] = Field(None, alias="Comment")
    applies_to: Optional[conlist(AppliesTo, max_items=1000)] = Field(None, alias="AppliesTo")
    __properties = ["@type", "id", "commentSource", "shareWith", "shareWithSupplier", "Comment", "AppliesTo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReservationComment:
        """Create an instance of ReservationComment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in comment (list)
        _items = []
        if self.comment:
            for _item in self.comment:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Comment'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in applies_to (list)
        _items = []
        if self.applies_to:
            for _item in self.applies_to:
                if _item:
                    _items.append(_item.to_dict())
            _dict['AppliesTo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReservationComment:
        """Create an instance of ReservationComment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReservationComment.parse_obj(obj)

        _obj = ReservationComment.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "comment_source": obj.get("commentSource"),
            "share_with": obj.get("shareWith"),
            "share_with_supplier": obj.get("shareWithSupplier"),
            "comment": [Comment.from_dict(_item) for _item in obj.get("Comment")] if obj.get("Comment") is not None else None,
            "applies_to": [AppliesTo.from_dict(_item) for _item in obj.get("AppliesTo")] if obj.get("AppliesTo") is not None else None
        })
        return _obj


