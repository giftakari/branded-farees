# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator
from openapi_client.models.document_number import DocumentNumber

class PaymentCriteria(BaseModel):
    """
    PaymentCriteria
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    issuer_identification_number: Optional[constr(strict=True, max_length=32)] = Field(None, alias="IssuerIdentificationNumber", description="This the BIN/IIN")
    payment_card_code: Optional[constr(strict=True, max_length=2)] = Field(None, alias="PaymentCardCode", description="A two character code for a credit card, like MC, AX")
    document_number: Optional[conlist(DocumentNumber, max_items=100)] = Field(None, alias="DocumentNumber")
    agency_account_ind: Optional[StrictBool] = Field(None, alias="agencyAccountInd", description="If true, payment will be made by agency account")
    bsp_ind: Optional[StrictBool] = Field(None, alias="bspInd", description="If true, payment will be made by BSP")
    cash_ind: Optional[StrictBool] = Field(None, alias="cashInd", description="If true, payment will be made by cash")
    invoice_ind: Optional[StrictBool] = Field(None, alias="invoiceInd", description="If true, payment will be made by invoice")
    __properties = ["@type", "IssuerIdentificationNumber", "PaymentCardCode", "DocumentNumber", "agencyAccountInd", "bspInd", "cashInd", "invoiceInd"]

    @validator('issuer_identification_number')
    def issuer_identification_number_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9]{6,11}", value):
            raise ValueError(r"must validate the regular expression /[0-9]{6,11}/")
        return value

    @validator('payment_card_code')
    def payment_card_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([A-Z0-9]+)?", value):
            raise ValueError(r"must validate the regular expression /([A-Z0-9]+)?/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentCriteria:
        """Create an instance of PaymentCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in document_number (list)
        _items = []
        if self.document_number:
            for _item in self.document_number:
                if _item:
                    _items.append(_item.to_dict())
            _dict['DocumentNumber'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentCriteria:
        """Create an instance of PaymentCriteria from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentCriteria.parse_obj(obj)

        _obj = PaymentCriteria.parse_obj({
            "type": obj.get("@type"),
            "issuer_identification_number": obj.get("IssuerIdentificationNumber"),
            "payment_card_code": obj.get("PaymentCardCode"),
            "document_number": [DocumentNumber.from_dict(_item) for _item in obj.get("DocumentNumber")] if obj.get("DocumentNumber") is not None else None,
            "agency_account_ind": obj.get("agencyAccountInd"),
            "bsp_ind": obj.get("bspInd"),
            "cash_ind": obj.get("cashInd"),
            "invoice_ind": obj.get("invoiceInd")
        })
        return _obj


