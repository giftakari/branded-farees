# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr, validator
from openapi_client.models.arrival import Arrival
from openapi_client.models.date_range import DateRange
from openapi_client.models.departure import Departure
from openapi_client.models.ticket_baggage import TicketBaggage
from openapi_client.models.ticket_status_enum import TicketStatusEnum

class TicketSegment(BaseModel):
    """
    TicketSegment
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    sequence: Optional[StrictInt] = Field(None, description="The order in which you checked in to your flight")
    class_of_service: Optional[constr(strict=True, max_length=2, min_length=1)] = Field(None, alias="ClassOfService", description="The booking class of service fare bases code assigned to this ticket segment example :F - First Class, J - Business Class, W - Premium Economy, Y - Economy/Coach")
    fare_basis_code: Optional[constr(strict=True, max_length=32)] = Field(None, alias="FareBasisCode", description="The Fare Basis is the code that appears on the ticket in the Fare Basis box")
    status: Optional[TicketStatusEnum] = Field(None, alias="Status")
    carrier: constr(strict=True) = Field(..., alias="Carrier", description="The marketing carrier of the flight on this ticket segment.")
    number: constr(strict=True) = Field(..., alias="Number", description="The flight number.")
    departure: Departure = Field(..., alias="Departure")
    arrival: Arrival = Field(..., alias="Arrival")
    flight_status_code: constr(strict=True, max_length=32) = Field(..., alias="FlightStatusCode", description="A status code indicates the status of an air segment")
    valid_date_range: DateRange = Field(..., alias="ValidDateRange")
    ticket_baggage: TicketBaggage = Field(..., alias="TicketBaggage")
    connection_ind: Optional[StrictBool] = Field(None, alias="connectionInd", description="If true, the ticketSegment is a connecting segment")
    __properties = ["@type", "sequence", "ClassOfService", "FareBasisCode", "Status", "Carrier", "Number", "Departure", "Arrival", "FlightStatusCode", "ValidDateRange", "TicketBaggage", "connectionInd"]

    @validator('class_of_service')
    def class_of_service_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{1,2})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{1,2})/")
        return value

    @validator('carrier')
    def carrier_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"([a-zA-Z0-9]{2,3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{2,3})/")
        return value

    @validator('number')
    def number_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"[0-9]{1,4}[A-Z]?|OPEN|ARNK", value):
            raise ValueError(r"must validate the regular expression /[0-9]{1,4}[A-Z]?|OPEN|ARNK/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TicketSegment:
        """Create an instance of TicketSegment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of departure
        if self.departure:
            _dict['Departure'] = self.departure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of arrival
        if self.arrival:
            _dict['Arrival'] = self.arrival.to_dict()
        # override the default output from pydantic by calling `to_dict()` of valid_date_range
        if self.valid_date_range:
            _dict['ValidDateRange'] = self.valid_date_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ticket_baggage
        if self.ticket_baggage:
            _dict['TicketBaggage'] = self.ticket_baggage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TicketSegment:
        """Create an instance of TicketSegment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TicketSegment.parse_obj(obj)

        _obj = TicketSegment.parse_obj({
            "type": obj.get("@type"),
            "sequence": obj.get("sequence"),
            "class_of_service": obj.get("ClassOfService"),
            "fare_basis_code": obj.get("FareBasisCode"),
            "status": obj.get("Status"),
            "carrier": obj.get("Carrier"),
            "number": obj.get("Number"),
            "departure": Departure.from_dict(obj.get("Departure")) if obj.get("Departure") is not None else None,
            "arrival": Arrival.from_dict(obj.get("Arrival")) if obj.get("Arrival") is not None else None,
            "flight_status_code": obj.get("FlightStatusCode"),
            "valid_date_range": DateRange.from_dict(obj.get("ValidDateRange")) if obj.get("ValidDateRange") is not None else None,
            "ticket_baggage": TicketBaggage.from_dict(obj.get("TicketBaggage")) if obj.get("TicketBaggage") is not None else None,
            "connection_ind": obj.get("connectionInd")
        })
        return _obj


