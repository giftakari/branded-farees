# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator
from openapi_client.models.bed_configuration import BedConfiguration
from openapi_client.models.yes_no_unknown_enum import YesNoUnknownEnum

class RoomCharacteristics(BaseModel):
    """
    RoomCharacteristics
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    type_code: Optional[constr(strict=True, max_length=32)] = Field(None, alias="typeCode", description="Type code")
    view_code: Optional[constr(strict=True)] = Field(None, alias="viewCode", description="Free text describing the view.")
    category: Optional[constr(strict=True)] = Field(None, description="Category of the room.")
    smoking_allowed: Optional[YesNoUnknownEnum] = Field(None, alias="smokingAllowed")
    wifi_included: Optional[YesNoUnknownEnum] = Field(None, alias="wifiIncluded")
    bed_configuration: Optional[conlist(BedConfiguration, max_items=10)] = Field(None, alias="BedConfiguration")
    non_smoking_ind: Optional[StrictBool] = Field(None, alias="nonSmokingInd")
    __properties = ["@type", "typeCode", "viewCode", "category", "smokingAllowed", "wifiIncluded", "BedConfiguration", "nonSmokingInd"]

    @validator('view_code')
    def view_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}", value):
            raise ValueError(r"must validate the regular expression /[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}/")
        return value

    @validator('category')
    def category_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}", value):
            raise ValueError(r"must validate the regular expression /[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RoomCharacteristics:
        """Create an instance of RoomCharacteristics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in bed_configuration (list)
        _items = []
        if self.bed_configuration:
            for _item in self.bed_configuration:
                if _item:
                    _items.append(_item.to_dict())
            _dict['BedConfiguration'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RoomCharacteristics:
        """Create an instance of RoomCharacteristics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RoomCharacteristics.parse_obj(obj)

        _obj = RoomCharacteristics.parse_obj({
            "type": obj.get("@type"),
            "type_code": obj.get("typeCode"),
            "view_code": obj.get("viewCode"),
            "category": obj.get("category"),
            "smoking_allowed": obj.get("smokingAllowed"),
            "wifi_included": obj.get("wifiIncluded"),
            "bed_configuration": [BedConfiguration.from_dict(_item) for _item in obj.get("BedConfiguration")] if obj.get("BedConfiguration") is not None else None,
            "non_smoking_ind": obj.get("nonSmokingInd")
        })
        return _obj


