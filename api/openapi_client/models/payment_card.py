# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator
from openapi_client.models.card_number import CardNumber
from openapi_client.models.magnetic_stripe import MagneticStripe
from openapi_client.models.payment_card_type_enum import PaymentCardTypeEnum
from openapi_client.models.payment_card_type_issuer import PaymentCardTypeIssuer
from openapi_client.models.privacy import Privacy
from openapi_client.models.series_code import SeriesCode

class PaymentCard(BaseModel):
    """
    PaymentCard
    """
    type: StrictStr = Field(..., alias="@type")
    id: Optional[StrictStr] = Field(None, description="Payment card reference ID.")
    effective_date: Optional[date] = Field(None, alias="effectiveDate", description="Indicated starting date.")
    expire_date: Optional[constr(strict=True)] = Field(None, alias="expireDate", description="The expiration date value")
    approval_code: Optional[constr(strict=True, max_length=16)] = Field(None, alias="approvalCode", description="The approval code value")
    privacy_group: Optional[Privacy] = Field(None, alias="PrivacyGroup")
    card_type: Optional[PaymentCardTypeEnum] = Field(None, alias="CardType")
    card_code: Optional[constr(strict=True, max_length=2)] = Field(None, alias="CardCode", description="Specifies the two character code (MC, VI, AX, etc) for the payment card (open enumeration)")
    card_brand: Optional[PaymentCardTypeIssuer] = Field(None, alias="CardBrand")
    card_issuer: Optional[PaymentCardTypeIssuer] = Field(None, alias="CardIssuer")
    card_holder_name: Optional[constr(strict=True, max_length=128)] = Field(None, alias="CardHolderName", description="Name as displayed on Payment Card")
    card_number: Optional[CardNumber] = Field(None, alias="CardNumber")
    series_code: Optional[SeriesCode] = Field(None, alias="SeriesCode")
    magnetic_stripe: Optional[conlist(MagneticStripe, max_items=3)] = Field(None, alias="MagneticStripe")
    secure_ind: Optional[StrictBool] = Field(None, alias="secureInd", description="Implementer: If true, all or a portion of this data is secure, via tokenization, encryption and/or masking.")
    __properties = ["@type", "id", "effectiveDate", "expireDate", "approvalCode", "PrivacyGroup", "CardType", "CardCode", "CardBrand", "CardIssuer", "CardHolderName", "CardNumber", "SeriesCode", "MagneticStripe", "secureInd"]

    @validator('expire_date')
    def expire_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"(0[1-9]|1[0-2])[0-9][0-9]", value):
            raise ValueError(r"must validate the regular expression /(0[1-9]|1[0-2])[0-9][0-9]/")
        return value

    @validator('approval_code')
    def approval_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([A-Z0-9]+)?", value):
            raise ValueError(r"must validate the regular expression /([A-Z0-9]+)?/")
        return value

    @validator('card_code')
    def card_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([A-Z0-9]+)?", value):
            raise ValueError(r"must validate the regular expression /([A-Z0-9]+)?/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = '@type'

    # discriminator mappings
    __discriminator_value_class_map = {
        'PaymentCardDetail': 'PaymentCardDetail'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(PaymentCardDetail):
        """Create an instance of PaymentCard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of privacy_group
        if self.privacy_group:
            _dict['PrivacyGroup'] = self.privacy_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card_brand
        if self.card_brand:
            _dict['CardBrand'] = self.card_brand.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card_issuer
        if self.card_issuer:
            _dict['CardIssuer'] = self.card_issuer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card_number
        if self.card_number:
            _dict['CardNumber'] = self.card_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of series_code
        if self.series_code:
            _dict['SeriesCode'] = self.series_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in magnetic_stripe (list)
        _items = []
        if self.magnetic_stripe:
            for _item in self.magnetic_stripe:
                if _item:
                    _items.append(_item.to_dict())
            _dict['MagneticStripe'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(PaymentCardDetail):
        """Create an instance of PaymentCard from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("PaymentCard failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.payment_card_detail import PaymentCardDetail
PaymentCard.update_forward_refs()

