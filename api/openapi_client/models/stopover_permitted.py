# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, StrictBool, StrictStr, conint, conlist
from openapi_client.models.journey_type_enum import JourneyTypeEnum
from openapi_client.models.stopover import Stopover
from openapi_client.models.stopover_charge import StopoverCharge
from openapi_client.models.stopover_restriction import StopoverRestriction

class StopoverPermitted(Stopover):
    """
    StopoverPermitted
    """
    journey_types: Optional[conlist(JourneyTypeEnum)] = Field(None, alias="journeyTypes")
    minimum_duration: StrictStr = Field(..., alias="minimumDuration", description="The minimum amount of time permitted for a stopover")
    maximum_duration: StrictStr = Field(..., alias="maximumDuration", description="The maximum amount of time permitted for a stopover")
    minimum: conint(strict=True, ge=0) = Field(..., description="The minimum permitted for a stopover")
    maximum: conint(strict=True, ge=0) = Field(..., description="The maximum permitted for a stopover")
    outbound: Optional[conint(strict=True, ge=0)] = Field(None, description="Stopover outbound")
    inbound: Optional[conint(strict=True, ge=0)] = Field(None, description="Stopover inbound")
    stopover_charge: conlist(StopoverCharge, max_items=10, min_items=1) = Field(..., alias="StopoverCharge")
    stopover_restriction: Optional[conlist(StopoverRestriction, max_items=10)] = Field(None, alias="StopoverRestriction")
    permitted_at_gateway_only_ind: Optional[StrictBool] = Field(None, alias="permittedAtGatewayOnlyInd", description="If true, stopovers are permitted at gateway points only")
    __properties = ["@type", "journeyTypes", "minimumDuration", "maximumDuration", "minimum", "maximum", "outbound", "inbound", "StopoverCharge", "StopoverRestriction", "permittedAtGatewayOnlyInd"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StopoverPermitted:
        """Create an instance of StopoverPermitted from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in stopover_charge (list)
        _items = []
        if self.stopover_charge:
            for _item in self.stopover_charge:
                if _item:
                    _items.append(_item.to_dict())
            _dict['StopoverCharge'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stopover_restriction (list)
        _items = []
        if self.stopover_restriction:
            for _item in self.stopover_restriction:
                if _item:
                    _items.append(_item.to_dict())
            _dict['StopoverRestriction'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StopoverPermitted:
        """Create an instance of StopoverPermitted from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StopoverPermitted.parse_obj(obj)

        _obj = StopoverPermitted.parse_obj({
            "type": obj.get("@type"),
            "journey_types": obj.get("journeyTypes"),
            "minimum_duration": obj.get("minimumDuration"),
            "maximum_duration": obj.get("maximumDuration"),
            "minimum": obj.get("minimum"),
            "maximum": obj.get("maximum"),
            "outbound": obj.get("outbound"),
            "inbound": obj.get("inbound"),
            "stopover_charge": [StopoverCharge.from_dict(_item) for _item in obj.get("StopoverCharge")] if obj.get("StopoverCharge") is not None else None,
            "stopover_restriction": [StopoverRestriction.from_dict(_item) for _item in obj.get("StopoverRestriction")] if obj.get("StopoverRestriction") is not None else None,
            "permitted_at_gateway_only_ind": obj.get("permittedAtGatewayOnlyInd")
        })
        return _obj


