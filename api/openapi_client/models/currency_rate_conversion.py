# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.conversion_rate import ConversionRate
from openapi_client.models.currency_code import CurrencyCode

class CurrencyRateConversion(BaseModel):
    """
    CurrencyRateConversion
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    source_currency: CurrencyCode = Field(..., alias="SourceCurrency")
    target_currency: CurrencyCode = Field(..., alias="TargetCurrency")
    conversion_rate: ConversionRate = Field(..., alias="ConversionRate")
    __properties = ["@type", "SourceCurrency", "TargetCurrency", "ConversionRate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CurrencyRateConversion:
        """Create an instance of CurrencyRateConversion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of source_currency
        if self.source_currency:
            _dict['SourceCurrency'] = self.source_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_currency
        if self.target_currency:
            _dict['TargetCurrency'] = self.target_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conversion_rate
        if self.conversion_rate:
            _dict['ConversionRate'] = self.conversion_rate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CurrencyRateConversion:
        """Create an instance of CurrencyRateConversion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CurrencyRateConversion.parse_obj(obj)

        _obj = CurrencyRateConversion.parse_obj({
            "type": obj.get("@type"),
            "source_currency": CurrencyCode.from_dict(obj.get("SourceCurrency")) if obj.get("SourceCurrency") is not None else None,
            "target_currency": CurrencyCode.from_dict(obj.get("TargetCurrency")) if obj.get("TargetCurrency") is not None else None,
            "conversion_rate": ConversionRate.from_dict(obj.get("ConversionRate")) if obj.get("ConversionRate") is not None else None
        })
        return _obj


