# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from openapi_client.models.cabin_preference import CabinPreference
from openapi_client.models.carrier_preference import CarrierPreference
from openapi_client.models.class_of_service_preference import ClassOfServicePreference
from openapi_client.models.connection_preferences_air import ConnectionPreferencesAir
from openapi_client.models.exclude_ground_type_enum import ExcludeGroundTypeEnum
from openapi_client.models.product_inclusion_preference import ProductInclusionPreference

class SearchModifiersAir(BaseModel):
    """
    SearchModifiersAir
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    exclude_ground: Optional[ExcludeGroundTypeEnum] = Field(None, alias="excludeGround")
    carrier_preference: Optional[conlist(CarrierPreference, max_items=20)] = Field(None, alias="CarrierPreference")
    cabin_preference: Optional[conlist(CabinPreference, max_items=20)] = Field(None, alias="CabinPreference")
    class_of_service_preference: Optional[conlist(ClassOfServicePreference, max_items=20)] = Field(None, alias="ClassOfServicePreference")
    product_inclusion_preference: Optional[conlist(ProductInclusionPreference, max_items=20)] = Field(None, alias="ProductInclusionPreference")
    connection_preferences: Optional[conlist(ConnectionPreferencesAir, max_items=20)] = Field(None, alias="ConnectionPreferences")
    prohibit_change_of_airport_ind: Optional[StrictBool] = Field(None, alias="prohibitChangeOfAirportInd", description="If present and true, connections that require a change of airports are not returned")
    __properties = ["@type", "excludeGround", "CarrierPreference", "CabinPreference", "ClassOfServicePreference", "ProductInclusionPreference", "ConnectionPreferences", "prohibitChangeOfAirportInd"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SearchModifiersAir:
        """Create an instance of SearchModifiersAir from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in carrier_preference (list)
        _items = []
        if self.carrier_preference:
            for _item in self.carrier_preference:
                if _item:
                    _items.append(_item.to_dict())
            _dict['CarrierPreference'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cabin_preference (list)
        _items = []
        if self.cabin_preference:
            for _item in self.cabin_preference:
                if _item:
                    _items.append(_item.to_dict())
            _dict['CabinPreference'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in class_of_service_preference (list)
        _items = []
        if self.class_of_service_preference:
            for _item in self.class_of_service_preference:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ClassOfServicePreference'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product_inclusion_preference (list)
        _items = []
        if self.product_inclusion_preference:
            for _item in self.product_inclusion_preference:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ProductInclusionPreference'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in connection_preferences (list)
        _items = []
        if self.connection_preferences:
            for _item in self.connection_preferences:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ConnectionPreferences'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SearchModifiersAir:
        """Create an instance of SearchModifiersAir from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SearchModifiersAir.parse_obj(obj)

        _obj = SearchModifiersAir.parse_obj({
            "type": obj.get("@type"),
            "exclude_ground": obj.get("excludeGround"),
            "carrier_preference": [CarrierPreference.from_dict(_item) for _item in obj.get("CarrierPreference")] if obj.get("CarrierPreference") is not None else None,
            "cabin_preference": [CabinPreference.from_dict(_item) for _item in obj.get("CabinPreference")] if obj.get("CabinPreference") is not None else None,
            "class_of_service_preference": [ClassOfServicePreference.from_dict(_item) for _item in obj.get("ClassOfServicePreference")] if obj.get("ClassOfServicePreference") is not None else None,
            "product_inclusion_preference": [ProductInclusionPreference.from_dict(_item) for _item in obj.get("ProductInclusionPreference")] if obj.get("ProductInclusionPreference") is not None else None,
            "connection_preferences": [ConnectionPreferencesAir.from_dict(_item) for _item in obj.get("ConnectionPreferences")] if obj.get("ConnectionPreferences") is not None else None,
            "prohibit_change_of_airport_ind": obj.get("prohibitChangeOfAirportInd")
        })
        return _obj


