# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import Field, StrictBool, conlist, constr, validator
from openapi_client.models.address import Address
from openapi_client.models.alternate_contact import AlternateContact
from openapi_client.models.comments import Comments
from openapi_client.models.customer_loyalty import CustomerLoyalty
from openapi_client.models.email import Email
from openapi_client.models.gender_enum import GenderEnum
from openapi_client.models.identifier import Identifier
from openapi_client.models.person_name import PersonName
from openapi_client.models.rail_discount_card import RailDiscountCard
from openapi_client.models.telephone import Telephone
from openapi_client.models.travel_document import TravelDocument
from openapi_client.models.traveler_id import TravelerID

class Traveler(TravelerID):
    """
    Traveler
    """
    birth_date: Optional[date] = Field(None, alias="birthDate", description="Date of Birth YYYY-MM-DD")
    gender: Optional[GenderEnum] = None
    person_name: PersonName = Field(..., alias="PersonName")
    address: Optional[conlist(Address, max_items=10)] = Field(None, alias="Address")
    telephone: Optional[conlist(Telephone, max_items=10)] = Field(None, alias="Telephone")
    email: Optional[conlist(Email, max_items=10)] = Field(None, alias="Email")
    passenger_type_code: Optional[constr(strict=True, max_length=5, min_length=3)] = Field(None, alias="passengerTypeCode", description="Passenger type code")
    nationality: Optional[constr(strict=True)] = Field(None, description="Nationality on country code ISO")
    customer_loyalty: Optional[conlist(CustomerLoyalty, max_items=10)] = Field(None, alias="CustomerLoyalty")
    alternate_contact: Optional[conlist(AlternateContact, max_items=20)] = Field(None, alias="AlternateContact")
    travel_document: Optional[conlist(TravelDocument, max_items=10)] = Field(None, alias="TravelDocument")
    comments: Optional[Comments] = Field(None, alias="Comments")
    rail_discount_card: Optional[conlist(RailDiscountCard, max_items=50)] = Field(None, alias="RailDiscountCard")
    accompanied_by_infant_ind: Optional[StrictBool] = Field(None, alias="accompaniedByInfantInd")
    __properties = ["@type", "id", "TravelerRef", "Identifier", "birthDate", "gender", "PersonName", "Address", "Telephone", "Email", "passengerTypeCode", "nationality", "CustomerLoyalty", "AlternateContact", "TravelDocument", "Comments", "RailDiscountCard", "accompaniedByInfantInd"]

    @validator('passenger_type_code')
    def passenger_type_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{3,5})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{3,5})/")
        return value

    @validator('nationality')
    def nationality_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[a-zA-Z]{2}", value):
            raise ValueError(r"must validate the regular expression /[a-zA-Z]{2}/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Traveler:
        """Create an instance of Traveler from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of person_name
        if self.person_name:
            _dict['PersonName'] = self.person_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in address (list)
        _items = []
        if self.address:
            for _item in self.address:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Address'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in telephone (list)
        _items = []
        if self.telephone:
            for _item in self.telephone:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Telephone'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in email (list)
        _items = []
        if self.email:
            for _item in self.email:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Email'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in customer_loyalty (list)
        _items = []
        if self.customer_loyalty:
            for _item in self.customer_loyalty:
                if _item:
                    _items.append(_item.to_dict())
            _dict['CustomerLoyalty'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in alternate_contact (list)
        _items = []
        if self.alternate_contact:
            for _item in self.alternate_contact:
                if _item:
                    _items.append(_item.to_dict())
            _dict['AlternateContact'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in travel_document (list)
        _items = []
        if self.travel_document:
            for _item in self.travel_document:
                if _item:
                    _items.append(_item.to_dict())
            _dict['TravelDocument'] = _items
        # override the default output from pydantic by calling `to_dict()` of comments
        if self.comments:
            _dict['Comments'] = self.comments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rail_discount_card (list)
        _items = []
        if self.rail_discount_card:
            for _item in self.rail_discount_card:
                if _item:
                    _items.append(_item.to_dict())
            _dict['RailDiscountCard'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Traveler:
        """Create an instance of Traveler from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Traveler.parse_obj(obj)

        _obj = Traveler.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "traveler_ref": obj.get("TravelerRef"),
            "identifier": Identifier.from_dict(obj.get("Identifier")) if obj.get("Identifier") is not None else None,
            "birth_date": obj.get("birthDate"),
            "gender": obj.get("gender"),
            "person_name": PersonName.from_dict(obj.get("PersonName")) if obj.get("PersonName") is not None else None,
            "address": [Address.from_dict(_item) for _item in obj.get("Address")] if obj.get("Address") is not None else None,
            "telephone": [Telephone.from_dict(_item) for _item in obj.get("Telephone")] if obj.get("Telephone") is not None else None,
            "email": [Email.from_dict(_item) for _item in obj.get("Email")] if obj.get("Email") is not None else None,
            "passenger_type_code": obj.get("passengerTypeCode"),
            "nationality": obj.get("nationality"),
            "customer_loyalty": [CustomerLoyalty.from_dict(_item) for _item in obj.get("CustomerLoyalty")] if obj.get("CustomerLoyalty") is not None else None,
            "alternate_contact": [AlternateContact.from_dict(_item) for _item in obj.get("AlternateContact")] if obj.get("AlternateContact") is not None else None,
            "travel_document": [TravelDocument.from_dict(_item) for _item in obj.get("TravelDocument")] if obj.get("TravelDocument") is not None else None,
            "comments": Comments.from_dict(obj.get("Comments")) if obj.get("Comments") is not None else None,
            "rail_discount_card": [RailDiscountCard.from_dict(_item) for _item in obj.get("RailDiscountCard")] if obj.get("RailDiscountCard") is not None else None,
            "accompanied_by_infant_ind": obj.get("accompaniedByInfantInd")
        })
        return _obj


