# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr
from openapi_client.models.geo_political_area_level_enum import GeoPoliticalAreaLevelEnum

class GeoPoliticalArea(BaseModel):
    """
    The location code of the geographical location. Codes from Ref Pub
    """
    value: Optional[constr(strict=True, max_length=32)] = None
    level: Optional[GeoPoliticalAreaLevelEnum] = None
    id: Optional[StrictStr] = Field(None, description="Optional internally referenced id")
    __properties = ["value", "level", "id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GeoPoliticalArea:
        """Create an instance of GeoPoliticalArea from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GeoPoliticalArea:
        """Create an instance of GeoPoliticalArea from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GeoPoliticalArea.parse_obj(obj)

        _obj = GeoPoliticalArea.parse_obj({
            "value": obj.get("value"),
            "level": obj.get("level"),
            "id": obj.get("id")
        })
        return _obj


