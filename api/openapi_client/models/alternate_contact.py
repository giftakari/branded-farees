# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr
from openapi_client.models.address import Address
from openapi_client.models.email import Email
from openapi_client.models.person_name import PersonName
from openapi_client.models.telephone import Telephone

class AlternateContact(BaseModel):
    """
    AlternateContact
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    id: Optional[StrictStr] = None
    contact_type: Optional[constr(strict=True, max_length=128)] = Field(None, alias="contactType", description="Contact type value")
    relation: Optional[constr(strict=True, max_length=128)] = Field(None, description="Relation value")
    person_name: PersonName = Field(..., alias="PersonName")
    address: Optional[conlist(Address, max_items=3)] = Field(None, alias="Address")
    telephone: Optional[conlist(Telephone, max_items=5)] = Field(None, alias="Telephone")
    email: Optional[conlist(Email, max_items=5)] = Field(None, alias="Email")
    emergency_ind: Optional[StrictBool] = Field(None, alias="emergencyInd", description="This is the contact in case of an emergency")
    default_ind: Optional[StrictBool] = Field(None, alias="defaultInd", description="This is the default contact")
    __properties = ["@type", "id", "contactType", "relation", "PersonName", "Address", "Telephone", "Email", "emergencyInd", "defaultInd"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AlternateContact:
        """Create an instance of AlternateContact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of person_name
        if self.person_name:
            _dict['PersonName'] = self.person_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in address (list)
        _items = []
        if self.address:
            for _item in self.address:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Address'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in telephone (list)
        _items = []
        if self.telephone:
            for _item in self.telephone:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Telephone'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in email (list)
        _items = []
        if self.email:
            for _item in self.email:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Email'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AlternateContact:
        """Create an instance of AlternateContact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AlternateContact.parse_obj(obj)

        _obj = AlternateContact.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "contact_type": obj.get("contactType"),
            "relation": obj.get("relation"),
            "person_name": PersonName.from_dict(obj.get("PersonName")) if obj.get("PersonName") is not None else None,
            "address": [Address.from_dict(_item) for _item in obj.get("Address")] if obj.get("Address") is not None else None,
            "telephone": [Telephone.from_dict(_item) for _item in obj.get("Telephone")] if obj.get("Telephone") is not None else None,
            "email": [Email.from_dict(_item) for _item in obj.get("Email")] if obj.get("Email") is not None else None,
            "emergency_ind": obj.get("emergencyInd"),
            "default_ind": obj.get("defaultInd")
        })
        return _obj


