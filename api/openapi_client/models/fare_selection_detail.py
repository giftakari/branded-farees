# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import Field, StrictBool, constr, validator
from openapi_client.models.change_options import ChangeOptions
from openapi_client.models.fare_qualifier_enum import FareQualifierENUM
from openapi_client.models.fare_selection import FareSelection
from openapi_client.models.fares_filter_enum import FaresFilterEnum
from openapi_client.models.refund_options import RefundOptions

class FareSelectionDetail(FareSelection):
    """
    FareSelectionDetail
    """
    validating_carrier: Optional[constr(strict=True)] = Field(None, alias="validatingCarrier", description="Airline code")
    prohibit_min_stay_fares_ind: Optional[StrictBool] = Field(None, alias="prohibitMinStayFaresInd", description="If present and true, fares with minimum stays will not be returned")
    prohibit_max_stay_fares_ind: Optional[StrictBool] = Field(None, alias="prohibitMaxStayFaresInd", description="If present and true, fares with maximum stays will not be returned")
    refundable_only_ind: Optional[StrictBool] = Field(None, alias="refundableOnlyInd", description="This field is deprecated. Use RefundOptions for refunadability options")
    prohibit_advance_purchase_fares_ind: Optional[StrictBool] = Field(None, alias="prohibitAdvancePurchaseFaresInd", description="If present and true, fares with advance purchase requirements will not be returned")
    prohibit_unbundled_fares_ind: Optional[StrictBool] = Field(None, alias="prohibitUnbundledFaresInd")
    prohibit_refundable_fares_ind: Optional[StrictBool] = Field(None, alias="prohibitRefundableFaresInd", description="This field is deprecated. Use RefundOptions for refunadability options")
    __properties = ["@type", "fareType", "RefundOptions", "ChangeOptions", "FareQualifier", "validatingCarrier", "prohibitMinStayFaresInd", "prohibitMaxStayFaresInd", "refundableOnlyInd", "prohibitAdvancePurchaseFaresInd", "prohibitUnbundledFaresInd", "prohibitRefundableFaresInd"]

    @validator('validating_carrier')
    def validating_carrier_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{2,3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{2,3})/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FareSelectionDetail:
        """Create an instance of FareSelectionDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of refund_options
        if self.refund_options:
            _dict['RefundOptions'] = self.refund_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of change_options
        if self.change_options:
            _dict['ChangeOptions'] = self.change_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fare_qualifier
        if self.fare_qualifier:
            _dict['FareQualifier'] = self.fare_qualifier.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FareSelectionDetail:
        """Create an instance of FareSelectionDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FareSelectionDetail.parse_obj(obj)

        _obj = FareSelectionDetail.parse_obj({
            "type": obj.get("@type"),
            "fare_type": obj.get("fareType"),
            "refund_options": RefundOptions.from_dict(obj.get("RefundOptions")) if obj.get("RefundOptions") is not None else None,
            "change_options": ChangeOptions.from_dict(obj.get("ChangeOptions")) if obj.get("ChangeOptions") is not None else None,
            "fare_qualifier": FareQualifierENUM.from_dict(obj.get("FareQualifier")) if obj.get("FareQualifier") is not None else None,
            "validating_carrier": obj.get("validatingCarrier"),
            "prohibit_min_stay_fares_ind": obj.get("prohibitMinStayFaresInd"),
            "prohibit_max_stay_fares_ind": obj.get("prohibitMaxStayFaresInd"),
            "refundable_only_ind": obj.get("refundableOnlyInd"),
            "prohibit_advance_purchase_fares_ind": obj.get("prohibitAdvancePurchaseFaresInd"),
            "prohibit_unbundled_fares_ind": obj.get("prohibitUnbundledFaresInd"),
            "prohibit_refundable_fares_ind": obj.get("prohibitRefundableFaresInd")
        })
        return _obj


