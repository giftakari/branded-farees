# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr
from openapi_client.models.document_type_enum import DocumentTypeEnum
from openapi_client.models.traveler_identifier_ref import TravelerIdentifierRef

class Restrictions(BaseModel):
    """
    Restrictions
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    traveler_identifier_ref: Optional[conlist(TravelerIdentifierRef, max_items=10)] = Field(None, alias="TravelerIdentifierRef")
    restriction: conlist(constr(strict=True, max_length=128), max_items=10, min_items=1) = Field(..., alias="Restriction")
    document_type: Optional[DocumentTypeEnum] = Field(None, alias="DocumentType")
    __properties = ["@type", "TravelerIdentifierRef", "Restriction", "DocumentType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Restrictions:
        """Create an instance of Restrictions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in traveler_identifier_ref (list)
        _items = []
        if self.traveler_identifier_ref:
            for _item in self.traveler_identifier_ref:
                if _item:
                    _items.append(_item.to_dict())
            _dict['TravelerIdentifierRef'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Restrictions:
        """Create an instance of Restrictions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Restrictions.parse_obj(obj)

        _obj = Restrictions.parse_obj({
            "type": obj.get("@type"),
            "traveler_identifier_ref": [TravelerIdentifierRef.from_dict(_item) for _item in obj.get("TravelerIdentifierRef")] if obj.get("TravelerIdentifierRef") is not None else None,
            "restriction": obj.get("Restriction"),
            "document_type": obj.get("DocumentType")
        })
        return _obj


