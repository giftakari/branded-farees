# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import Field, StrictBool, constr, validator
from openapi_client.models.amount import Amount
from openapi_client.models.ancillary_description import AncillaryDescription
from openapi_client.models.commission import Commission
from openapi_client.models.discount import Discount
from openapi_client.models.price_breakdown_ancillary import PriceBreakdownAncillary
from openapi_client.models.traveler_identifier_ref import TravelerIdentifierRef

class PriceBreakdownAncillaryAir(PriceBreakdownAncillary):
    """
    PriceBreakdownAncillaryAir
    """
    passenger_type_code: Optional[constr(strict=True, max_length=5, min_length=3)] = Field(None, alias="PassengerTypeCode", description="The passenger type code the ancillary is valid for")
    approximate_ind: Optional[StrictBool] = Field(None, alias="approximateInd", description="Used to indicate that the Price is approximate. Often used to allow for currency fluctuations when supplier currency is different to agency currency.")
    __properties = ["@type", "Amount", "Commission", "quantity", "Description", "ProductRef", "Discount", "TravelerIdentifierRef", "PassengerTypeCode", "approximateInd"]

    @validator('passenger_type_code')
    def passenger_type_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z0-9]{3,5})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z0-9]{3,5})/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PriceBreakdownAncillaryAir:
        """Create an instance of PriceBreakdownAncillaryAir from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['Amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of commission
        if self.commission:
            _dict['Commission'] = self.commission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['Description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict['Discount'] = self.discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of traveler_identifier_ref
        if self.traveler_identifier_ref:
            _dict['TravelerIdentifierRef'] = self.traveler_identifier_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PriceBreakdownAncillaryAir:
        """Create an instance of PriceBreakdownAncillaryAir from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PriceBreakdownAncillaryAir.parse_obj(obj)

        _obj = PriceBreakdownAncillaryAir.parse_obj({
            "type": obj.get("@type"),
            "amount": Amount.from_dict(obj.get("Amount")) if obj.get("Amount") is not None else None,
            "commission": Commission.from_dict(obj.get("Commission")) if obj.get("Commission") is not None else None,
            "quantity": obj.get("quantity"),
            "description": AncillaryDescription.from_dict(obj.get("Description")) if obj.get("Description") is not None else None,
            "product_ref": obj.get("ProductRef"),
            "discount": Discount.from_dict(obj.get("Discount")) if obj.get("Discount") is not None else None,
            "traveler_identifier_ref": TravelerIdentifierRef.from_dict(obj.get("TravelerIdentifierRef")) if obj.get("TravelerIdentifierRef") is not None else None,
            "passenger_type_code": obj.get("PassengerTypeCode"),
            "approximate_ind": obj.get("approximateInd")
        })
        return _obj


