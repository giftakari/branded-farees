# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, conlist, constr
from openapi_client.models.accounting_id import AccountingID
from openapi_client.models.identifier import Identifier
from openapi_client.models.name_value_pair import NameValuePair

class Accounting(AccountingID):
    """
    Accounting
    """
    data_type: Optional[constr(strict=True, max_length=32)] = Field(None, alias="dataType", description="Accounting data type")
    template: Optional[constr(strict=True, max_length=512)] = Field(None, description="Accounting template")
    name_value_pair: Optional[conlist(NameValuePair, max_items=50)] = Field(None, alias="NameValuePair")
    __properties = ["@type", "id", "AccountingRef", "Identifier", "dataType", "template", "NameValuePair"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Accounting:
        """Create an instance of Accounting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in name_value_pair (list)
        _items = []
        if self.name_value_pair:
            for _item in self.name_value_pair:
                if _item:
                    _items.append(_item.to_dict())
            _dict['NameValuePair'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Accounting:
        """Create an instance of Accounting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Accounting.parse_obj(obj)

        _obj = Accounting.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "accounting_ref": obj.get("AccountingRef"),
            "identifier": Identifier.from_dict(obj.get("Identifier")) if obj.get("Identifier") is not None else None,
            "data_type": obj.get("dataType"),
            "template": obj.get("template"),
            "name_value_pair": [NameValuePair.from_dict(_item) for _item in obj.get("NameValuePair")] if obj.get("NameValuePair") is not None else None
        })
        return _obj


