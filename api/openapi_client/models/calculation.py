# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, confloat, conint
from openapi_client.models.comment import Comment
from openapi_client.models.currency_amount import CurrencyAmount
from openapi_client.models.rate_period_enum import RatePeriodEnum

class Calculation(BaseModel):
    """
    Calculation
    """
    unit_amount: Optional[CurrencyAmount] = Field(None, alias="UnitAmount")
    unit_name: Optional[RatePeriodEnum] = Field(None, alias="UnitName")
    quantity: Optional[conint(strict=True, ge=0)] = Field(None, alias="Quantity", description="The quantity used in the calculation of the vehicle charge e.g 2 x $500 per week")
    max_quantity: Optional[conint(strict=True, ge=0)] = Field(None, alias="MaxQuantity", description="The maximum quantity allowed for a charge e.g Baby seat charged at $10 per day for a maximum of 10 days")
    total_amount: Optional[CurrencyAmount] = Field(None, alias="TotalAmount")
    percent: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(None, alias="Percent", description="Used when the charge is based on a percentage of a TotalAmount")
    applicability: Optional[Comment] = Field(None, alias="Applicability")
    __properties = ["UnitAmount", "UnitName", "Quantity", "MaxQuantity", "TotalAmount", "Percent", "Applicability"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Calculation:
        """Create an instance of Calculation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of unit_amount
        if self.unit_amount:
            _dict['UnitAmount'] = self.unit_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_amount
        if self.total_amount:
            _dict['TotalAmount'] = self.total_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of applicability
        if self.applicability:
            _dict['Applicability'] = self.applicability.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Calculation:
        """Create an instance of Calculation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Calculation.parse_obj(obj)

        _obj = Calculation.parse_obj({
            "unit_amount": CurrencyAmount.from_dict(obj.get("UnitAmount")) if obj.get("UnitAmount") is not None else None,
            "unit_name": obj.get("UnitName"),
            "quantity": obj.get("Quantity"),
            "max_quantity": obj.get("MaxQuantity"),
            "total_amount": CurrencyAmount.from_dict(obj.get("TotalAmount")) if obj.get("TotalAmount") is not None else None,
            "percent": obj.get("Percent"),
            "applicability": Comment.from_dict(obj.get("Applicability")) if obj.get("Applicability") is not None else None
        })
        return _obj


