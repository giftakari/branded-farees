# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator

class IntermediateStop(BaseModel):
    """
    An intermediate stop location and duration
    """
    value: Optional[constr(strict=True, max_length=3, min_length=3)] = None
    arrival_flight_duration: Optional[StrictStr] = Field(None, alias="arrivalFlightDuration", description="ArrivalFlight Duration stopped at this location")
    departure_flight_duration: Optional[StrictStr] = Field(None, alias="departureFlightDuration", description="DepartureFlight Duration stopped at this location")
    duration: Optional[StrictStr] = Field(None, description="Duration stopped at this location")
    equipment: Optional[constr(strict=True)] = Field(None, description="Aircraft equipment.")
    arrival_date: Optional[constr(strict=True)] = Field(None, alias="arrivalDate", description="The local date the aircraft arrives at the intermediate stop")
    departure_date: Optional[constr(strict=True)] = Field(None, alias="departureDate", description="The local date the aircraft departs from the intermediate stop")
    arrival_time: Optional[constr(strict=True)] = Field(None, alias="arrivalTime", description="The local time the aircraft arrives at the intermediate stop")
    departurel_time: Optional[constr(strict=True)] = Field(None, alias="departurelTime", description="The local time the aircraft departs from the intermediate stop")
    arrival_terminal: Optional[constr(strict=True, max_length=4096)] = Field(None, alias="arrivalTerminal", description="Arrival Terminal of the Airport")
    departure_terminal: Optional[constr(strict=True, max_length=4096)] = Field(None, alias="departureTerminal", description="Departure Terminal of the Airport")
    __properties = ["value", "arrivalFlightDuration", "departureFlightDuration", "duration", "equipment", "arrivalDate", "departureDate", "arrivalTime", "departurelTime", "arrivalTerminal", "departureTerminal"]

    @validator('value')
    def value_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([a-zA-Z]{3})", value):
            raise ValueError(r"must validate the regular expression /([a-zA-Z]{3})/")
        return value

    @validator('equipment')
    def equipment_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([A-Z0-9]{3})?", value):
            raise ValueError(r"must validate the regular expression /([A-Z0-9]{3})?/")
        return value

    @validator('arrival_date')
    def arrival_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"(\d{4}-\d{2}-\d{2})", value):
            raise ValueError(r"must validate the regular expression /(\d{4}-\d{2}-\d{2})/")
        return value

    @validator('departure_date')
    def departure_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"(\d{4}-\d{2}-\d{2})", value):
            raise ValueError(r"must validate the regular expression /(\d{4}-\d{2}-\d{2})/")
        return value

    @validator('arrival_time')
    def arrival_time_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"(([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)((:?)[0-5]\d)?([\.,]\d+(?!:))?", value):
            raise ValueError(r"must validate the regular expression /(([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)((:?)[0-5]\d)?([\.,]\d+(?!:))?/")
        return value

    @validator('departurel_time')
    def departurel_time_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"(([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)((:?)[0-5]\d)?([\.,]\d+(?!:))?", value):
            raise ValueError(r"must validate the regular expression /(([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)((:?)[0-5]\d)?([\.,]\d+(?!:))?/")
        return value

    @validator('arrival_terminal')
    def arrival_terminal_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([0-9a-zA-Z]+)?", value):
            raise ValueError(r"must validate the regular expression /([0-9a-zA-Z]+)?/")
        return value

    @validator('departure_terminal')
    def departure_terminal_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([0-9a-zA-Z]+)?", value):
            raise ValueError(r"must validate the regular expression /([0-9a-zA-Z]+)?/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IntermediateStop:
        """Create an instance of IntermediateStop from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IntermediateStop:
        """Create an instance of IntermediateStop from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IntermediateStop.parse_obj(obj)

        _obj = IntermediateStop.parse_obj({
            "value": obj.get("value"),
            "arrival_flight_duration": obj.get("arrivalFlightDuration"),
            "departure_flight_duration": obj.get("departureFlightDuration"),
            "duration": obj.get("duration"),
            "equipment": obj.get("equipment"),
            "arrival_date": obj.get("arrivalDate"),
            "departure_date": obj.get("departureDate"),
            "arrival_time": obj.get("arrivalTime"),
            "departurel_time": obj.get("departurelTime"),
            "arrival_terminal": obj.get("arrivalTerminal"),
            "departure_terminal": obj.get("departureTerminal")
        })
        return _obj


