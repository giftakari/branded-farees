# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, conlist, constr
from openapi_client.models.company_name import CompanyName
from openapi_client.models.identifier import Identifier
from openapi_client.models.organization_type_enum import OrganizationTypeEnum
from openapi_client.models.travel_agency_id import TravelAgencyID

class TravelAgency(TravelAgencyID):
    """
    TravelAgency
    """
    organization_type: Optional[OrganizationTypeEnum] = Field(None, alias="organizationType")
    organization_name: CompanyName = Field(..., alias="OrganizationName")
    corporate_code: Optional[constr(strict=True, max_length=32)] = Field(None, alias="CorporateCode", description="A reference assigned by the Travel Agency to identify the corporate organization")
    profile_name: Optional[conlist(constr(strict=True, max_length=64), max_items=200)] = Field(None, alias="ProfileName")
    __properties = ["@type", "id", "TravelOrganizationRef", "Identifier", "organizationType", "OrganizationName", "CorporateCode", "ProfileName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TravelAgency:
        """Create an instance of TravelAgency from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization_name
        if self.organization_name:
            _dict['OrganizationName'] = self.organization_name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TravelAgency:
        """Create an instance of TravelAgency from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TravelAgency.parse_obj(obj)

        _obj = TravelAgency.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "travel_organization_ref": obj.get("TravelOrganizationRef"),
            "identifier": Identifier.from_dict(obj.get("Identifier")) if obj.get("Identifier") is not None else None,
            "organization_type": obj.get("organizationType"),
            "organization_name": CompanyName.from_dict(obj.get("OrganizationName")) if obj.get("OrganizationName") is not None else None,
            "corporate_code": obj.get("CorporateCode"),
            "profile_name": obj.get("ProfileName")
        })
        return _obj


