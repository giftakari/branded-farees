# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import Field, conint
from openapi_client.models.ancillary import Ancillary
from openapi_client.models.code import Code
from openapi_client.models.identifier import Identifier
from openapi_client.models.product_ancillary import ProductAncillary

class ProductAncillaryVehicle(ProductAncillary):
    """
    ProductAncillaryVehicle
    """
    equipment_type_code: Optional[Code] = Field(None, alias="EquipmentTypeCode")
    free_quantity_included_in_price: Optional[conint(strict=True, ge=0)] = Field(None, alias="freeQuantityIncludedInPrice", description="The mount of this ancillary that is included with the vehicle rental")
    max_bookable_quantity: Optional[conint(strict=True, ge=0)] = Field(None, alias="maxBookableQuantity", description="The maximum amount of this ancillary that may be booked with the vehicle rental")
    __properties = ["@type", "id", "productRef", "Identifier", "Quantity", "Ancillary", "selectedByDefaultInd", "EquipmentTypeCode", "freeQuantityIncludedInPrice", "maxBookableQuantity"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProductAncillaryVehicle:
        """Create an instance of ProductAncillaryVehicle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ancillary
        if self.ancillary:
            _dict['Ancillary'] = self.ancillary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of equipment_type_code
        if self.equipment_type_code:
            _dict['EquipmentTypeCode'] = self.equipment_type_code.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProductAncillaryVehicle:
        """Create an instance of ProductAncillaryVehicle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProductAncillaryVehicle.parse_obj(obj)

        _obj = ProductAncillaryVehicle.parse_obj({
            "type": obj.get("@type"),
            "id": obj.get("id"),
            "product_ref": obj.get("productRef"),
            "identifier": Identifier.from_dict(obj.get("Identifier")) if obj.get("Identifier") is not None else None,
            "quantity": obj.get("Quantity"),
            "ancillary": Ancillary.from_dict(obj.get("Ancillary")) if obj.get("Ancillary") is not None else None,
            "selected_by_default_ind": obj.get("selectedByDefaultInd"),
            "equipment_type_code": Code.from_dict(obj.get("EquipmentTypeCode")) if obj.get("EquipmentTypeCode") is not None else None,
            "free_quantity_included_in_price": obj.get("freeQuantityIncludedInPrice"),
            "max_bookable_quantity": obj.get("maxBookableQuantity")
        })
        return _obj


