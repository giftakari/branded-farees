# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, conint, constr, validator
from openapi_client.models.currency_source_enum import CurrencySourceEnum

class CurrencyAmount(BaseModel):
    """
    A monetary amount, up to 4 decimal places. Decimal place needs to be included.
    """
    value: Optional[Union[StrictFloat, StrictInt]] = None
    code: Optional[constr(strict=True)] = Field(None, description="An ISO 4217 alpha character code that specifies a money unit")
    minor_unit: Optional[conint(strict=True, ge=0)] = Field(None, alias="minorUnit", description="Minor units are a mechanism for expressing the relationship between a major currency unit and its corresponding minor currency unit.")
    currency_source: Optional[CurrencySourceEnum] = Field(None, alias="currencySource")
    approximate_ind: Optional[StrictBool] = Field(None, alias="approximateInd", description="True if the currency amount has been converted from the original amount")
    __properties = ["value", "code", "minorUnit", "currencySource", "approximateInd"]

    @validator('code')
    def code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[a-zA-Z]{3}", value):
            raise ValueError(r"must validate the regular expression /[a-zA-Z]{3}/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CurrencyAmount:
        """Create an instance of CurrencyAmount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CurrencyAmount:
        """Create an instance of CurrencyAmount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CurrencyAmount.parse_obj(obj)

        _obj = CurrencyAmount.parse_obj({
            "value": obj.get("value"),
            "code": obj.get("code"),
            "minor_unit": obj.get("minorUnit"),
            "currency_source": obj.get("currencySource"),
            "approximate_ind": obj.get("approximateInd")
        })
        return _obj


