# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import Field
from openapi_client.models.brand import Brand
from openapi_client.models.fare_selection_detail import FareSelectionDetail
from openapi_client.models.organization_information import OrganizationInformation
from openapi_client.models.pricing_modifiers_air import PricingModifiersAir
from openapi_client.models.promotional_code import PromotionalCode
from openapi_client.models.tax_exemption import TaxExemption

class PricingModifiersAirDetail(PricingModifiersAir):
    """
    PricingModifiersAirDetail
    """
    brand: Optional[Brand] = Field(None, alias="Brand")
    __properties = ["@type", "currencyCode", "FareSelection", "OrganizationInformation", "TaxExemption", "PromotionalCode", "SellCity", "TicketCity", "PricingPCC", "TicketingPCC", "includeSplitPaymentInd", "returnMostRestrictiveBrandInd", "splitPaymentOfferings", "Brand"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PricingModifiersAirDetail:
        """Create an instance of PricingModifiersAirDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of fare_selection
        if self.fare_selection:
            _dict['FareSelection'] = self.fare_selection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization_information
        if self.organization_information:
            _dict['OrganizationInformation'] = self.organization_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_exemption
        if self.tax_exemption:
            _dict['TaxExemption'] = self.tax_exemption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in promotional_code (list)
        _items = []
        if self.promotional_code:
            for _item in self.promotional_code:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PromotionalCode'] = _items
        # override the default output from pydantic by calling `to_dict()` of brand
        if self.brand:
            _dict['Brand'] = self.brand.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PricingModifiersAirDetail:
        """Create an instance of PricingModifiersAirDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PricingModifiersAirDetail.parse_obj(obj)

        _obj = PricingModifiersAirDetail.parse_obj({
            "type": obj.get("@type"),
            "currency_code": obj.get("currencyCode"),
            "fare_selection": FareSelectionDetail.from_dict(obj.get("FareSelection")) if obj.get("FareSelection") is not None else None,
            "organization_information": OrganizationInformation.from_dict(obj.get("OrganizationInformation")) if obj.get("OrganizationInformation") is not None else None,
            "tax_exemption": TaxExemption.from_dict(obj.get("TaxExemption")) if obj.get("TaxExemption") is not None else None,
            "promotional_code": [PromotionalCode.from_dict(_item) for _item in obj.get("PromotionalCode")] if obj.get("PromotionalCode") is not None else None,
            "sell_city": obj.get("SellCity"),
            "ticket_city": obj.get("TicketCity"),
            "pricing_pcc": obj.get("PricingPCC"),
            "ticketing_pcc": obj.get("TicketingPCC"),
            "include_split_payment_ind": obj.get("includeSplitPaymentInd"),
            "return_most_restrictive_brand_ind": obj.get("returnMostRestrictiveBrandInd"),
            "split_payment_offerings": obj.get("splitPaymentOfferings"),
            "brand": Brand.from_dict(obj.get("Brand")) if obj.get("Brand") is not None else None
        })
        return _obj


