# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr

class TravelerUpdatedItem(BaseModel):
    """
    TravelerUpdatedItem
    """
    type: StrictStr = Field(..., alias="@type")
    traveler_updatable_item_id: Optional[constr(strict=True, max_length=128)] = Field(None, alias="TravelerUpdatableItemID", description="A unique GUID to identify the TravelerUpdatedItem")
    add_ind: Optional[StrictBool] = Field(None, alias="addInd", description="If true the TravelerUpdatedItem is being added to the Traveler")
    modify_ind: Optional[StrictBool] = Field(None, alias="modifyInd", description="If true the TravelerUpdatedItem is being modified in the Traveler")
    delete_ind: Optional[StrictBool] = Field(None, alias="deleteInd", description="If true the TravelerUpdatedItem is being deleted from the Traveler")
    __properties = ["@type", "TravelerUpdatableItemID", "addInd", "modifyInd", "deleteInd"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = '@type'

    # discriminator mappings
    __discriminator_value_class_map = {
        'TravelerUpdatedItemAddress': 'TravelerUpdatedItemAddress',
        'TravelerUpdatedItemBirthDate': 'TravelerUpdatedItemBirthDate',
        'TravelerUpdatedItemCustomerLoyalty': 'TravelerUpdatedItemCustomerLoyalty',
        'TravelerUpdatedItemEmail': 'TravelerUpdatedItemEmail',
        'TravelerUpdatedItemGender': 'TravelerUpdatedItemGender',
        'TravelerUpdatedItemPersonName': 'TravelerUpdatedItemPersonName',
        'TravelerUpdatedItemTelephone': 'TravelerUpdatedItemTelephone',
        'TravelerUpdatedItemTravelDocument': 'TravelerUpdatedItemTravelDocument'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(TravelerUpdatedItemAddress, TravelerUpdatedItemBirthDate, TravelerUpdatedItemCustomerLoyalty, TravelerUpdatedItemEmail, TravelerUpdatedItemGender, TravelerUpdatedItemPersonName, TravelerUpdatedItemTelephone, TravelerUpdatedItemTravelDocument):
        """Create an instance of TravelerUpdatedItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(TravelerUpdatedItemAddress, TravelerUpdatedItemBirthDate, TravelerUpdatedItemCustomerLoyalty, TravelerUpdatedItemEmail, TravelerUpdatedItemGender, TravelerUpdatedItemPersonName, TravelerUpdatedItemTelephone, TravelerUpdatedItemTravelDocument):
        """Create an instance of TravelerUpdatedItem from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("TravelerUpdatedItem failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.traveler_updated_item_address import TravelerUpdatedItemAddress
from openapi_client.models.traveler_updated_item_birth_date import TravelerUpdatedItemBirthDate
from openapi_client.models.traveler_updated_item_customer_loyalty import TravelerUpdatedItemCustomerLoyalty
from openapi_client.models.traveler_updated_item_email import TravelerUpdatedItemEmail
from openapi_client.models.traveler_updated_item_gender import TravelerUpdatedItemGender
from openapi_client.models.traveler_updated_item_person_name import TravelerUpdatedItemPersonName
from openapi_client.models.traveler_updated_item_telephone import TravelerUpdatedItemTelephone
from openapi_client.models.traveler_updated_item_travel_document import TravelerUpdatedItemTravelDocument
TravelerUpdatedItem.update_forward_refs()

