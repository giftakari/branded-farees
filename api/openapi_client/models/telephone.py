# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictStr, constr, validator
from openapi_client.models.enum_telephone_role import EnumTelephoneRole

class Telephone(BaseModel):
    """
    Telephone
    """
    type: StrictStr = Field(..., alias="@type")
    country_access_code: Optional[constr(strict=True)] = Field(None, alias="countryAccessCode", description="TelephoneCountry AccessCode")
    area_city_code: Optional[constr(strict=True)] = Field(None, alias="areaCityCode", description="Telephone Area CityCode")
    phone_number: constr(strict=True, max_length=32) = Field(..., alias="phoneNumber", description="Mobile/Telephone Number")
    extension: Optional[constr(strict=True)] = Field(None, description="Telephone extension number")
    id: Optional[StrictStr] = Field(None, description="UOptional internally referenced id")
    city_code: Optional[constr(strict=True, max_length=10)] = Field(None, alias="cityCode", description="City Code")
    role: Optional[EnumTelephoneRole] = None
    __properties = ["@type", "countryAccessCode", "areaCityCode", "phoneNumber", "extension", "id", "cityCode", "role"]

    @validator('country_access_code')
    def country_access_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9]{1,3}", value):
            raise ValueError(r"must validate the regular expression /[0-9]{1,3}/")
        return value

    @validator('area_city_code')
    def area_city_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9]{1,8}", value):
            raise ValueError(r"must validate the regular expression /[0-9]{1,8}/")
        return value

    @validator('extension')
    def extension_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9]{0,5}", value):
            raise ValueError(r"must validate the regular expression /[0-9]{0,5}/")
        return value

    @validator('city_code')
    def city_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([A-Z0-9]+)?", value):
            raise ValueError(r"must validate the regular expression /([A-Z0-9]+)?/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = '@type'

    # discriminator mappings
    __discriminator_value_class_map = {
        'TelephoneDetail': 'TelephoneDetail'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(TelephoneDetail):
        """Create an instance of Telephone from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(TelephoneDetail):
        """Create an instance of Telephone from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("Telephone failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.telephone_detail import TelephoneDetail
Telephone.update_forward_refs()

