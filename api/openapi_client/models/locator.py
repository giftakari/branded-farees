# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, constr, validator

class Locator(BaseModel):
    """
    Contains the locator (PNR or external locator) or cancellation number for the reservation, order, or offer
    """
    value: Optional[constr(strict=True, max_length=16)] = None
    locator_type: Optional[constr(strict=True, max_length=32)] = Field(None, alias="locatorType", description="Specifies the type of reservation ID")
    source: Optional[constr(strict=True, max_length=128)] = Field(None, description="Specifies a unique identifier to indicate the source system which generated the resid")
    source_context: Optional[constr(strict=True, max_length=128)] = Field(None, alias="sourceContext", description="Specifies the context of the source")
    ota_type: Optional[constr(strict=True)] = Field(None, alias="otaType", description="Used for codes")
    creation_date: Optional[date] = Field(None, alias="creationDate", description="Reservation Creation date")
    __properties = ["value", "locatorType", "source", "sourceContext", "otaType", "creationDate"]

    @validator('value')
    def value_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([A-Z0-9]+)?", value):
            raise ValueError(r"must validate the regular expression /([A-Z0-9]+)?/")
        return value

    @validator('ota_type')
    def ota_type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}", value):
            raise ValueError(r"must validate the regular expression /[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Locator:
        """Create an instance of Locator from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Locator:
        """Create an instance of Locator from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Locator.parse_obj(obj)

        _obj = Locator.parse_obj({
            "value": obj.get("value"),
            "locator_type": obj.get("locatorType"),
            "source": obj.get("source"),
            "source_context": obj.get("sourceContext"),
            "ota_type": obj.get("otaType"),
            "creation_date": obj.get("creationDate")
        })
        return _obj


