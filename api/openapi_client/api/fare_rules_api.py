# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictStr, conlist, constr

from typing import Optional

from openapi_client.models.fare_rule_list_response_wrapper import FareRuleListResponseWrapper

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class FareRulesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_rules_from_catalog_offerings(self, catalog_offerings_identifier : constr(strict=True, max_length=128), catalog_offering_id : StrictStr, fare_rule_type : Annotated[constr(strict=True, max_length=32), Field(..., description="The type of fare rule structure required")], product_ids : Optional[conlist(StrictStr)] = None, flight_ids : Optional[conlist(StrictStr)] = None, fare_rule_categories : Annotated[Optional[conlist(constr(strict=True, max_length=32))], Field(description="Penalties MinimumStay")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, **kwargs) -> FareRuleListResponseWrapper:  # noqa: E501
        """Return standalone fare rules with reference to CatalogOfferings  # noqa: E501

        Fare rules are the conditions and restrictions that apply to any booking based on its fare type. These determine the price of the fare. Generally, less expensive fares have more restrictions and more expensive fares have fewer restrictions. Fare rules can include blackout dates, advanced reservation requirements, minimum and maximum stay requirements, and cancellation and change penalties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_rules_from_catalog_offerings(catalog_offerings_identifier, catalog_offering_id, fare_rule_type, product_ids, flight_ids, fare_rule_categories, travelport_plus_session_id, trace_id, xauth_travelport_accessgroup, async_req=True)
        >>> result = thread.get()

        :param catalog_offerings_identifier: (required)
        :type catalog_offerings_identifier: str
        :param catalog_offering_id: (required)
        :type catalog_offering_id: str
        :param fare_rule_type: The type of fare rule structure required (required)
        :type fare_rule_type: str
        :param product_ids:
        :type product_ids: List[str]
        :param flight_ids:
        :type flight_ids: List[str]
        :param fare_rule_categories: Penalties MinimumStay
        :type fare_rule_categories: List[str]
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FareRuleListResponseWrapper
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_rules_from_catalog_offerings_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_rules_from_catalog_offerings_with_http_info(catalog_offerings_identifier, catalog_offering_id, fare_rule_type, product_ids, flight_ids, fare_rule_categories, travelport_plus_session_id, trace_id, xauth_travelport_accessgroup, **kwargs)  # noqa: E501

    @validate_arguments
    def get_rules_from_catalog_offerings_with_http_info(self, catalog_offerings_identifier : constr(strict=True, max_length=128), catalog_offering_id : StrictStr, fare_rule_type : Annotated[constr(strict=True, max_length=32), Field(..., description="The type of fare rule structure required")], product_ids : Optional[conlist(StrictStr)] = None, flight_ids : Optional[conlist(StrictStr)] = None, fare_rule_categories : Annotated[Optional[conlist(constr(strict=True, max_length=32))], Field(description="Penalties MinimumStay")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Return standalone fare rules with reference to CatalogOfferings  # noqa: E501

        Fare rules are the conditions and restrictions that apply to any booking based on its fare type. These determine the price of the fare. Generally, less expensive fares have more restrictions and more expensive fares have fewer restrictions. Fare rules can include blackout dates, advanced reservation requirements, minimum and maximum stay requirements, and cancellation and change penalties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_rules_from_catalog_offerings_with_http_info(catalog_offerings_identifier, catalog_offering_id, fare_rule_type, product_ids, flight_ids, fare_rule_categories, travelport_plus_session_id, trace_id, xauth_travelport_accessgroup, async_req=True)
        >>> result = thread.get()

        :param catalog_offerings_identifier: (required)
        :type catalog_offerings_identifier: str
        :param catalog_offering_id: (required)
        :type catalog_offering_id: str
        :param fare_rule_type: The type of fare rule structure required (required)
        :type fare_rule_type: str
        :param product_ids:
        :type product_ids: List[str]
        :param flight_ids:
        :type flight_ids: List[str]
        :param fare_rule_categories: Penalties MinimumStay
        :type fare_rule_categories: List[str]
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FareRuleListResponseWrapper, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'catalog_offerings_identifier',
            'catalog_offering_id',
            'fare_rule_type',
            'product_ids',
            'flight_ids',
            'fare_rule_categories',
            'travelport_plus_session_id',
            'trace_id',
            'xauth_travelport_accessgroup'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rules_from_catalog_offerings" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('catalog_offerings_identifier') is not None:  # noqa: E501
            _query_params.append(('catalogOfferingsIdentifier', _params['catalog_offerings_identifier']))

        if _params.get('catalog_offering_id') is not None:  # noqa: E501
            _query_params.append(('catalogOfferingID', _params['catalog_offering_id']))

        if _params.get('product_ids') is not None:  # noqa: E501
            _query_params.append(('productIDs', _params['product_ids']))
            _collection_formats['productIDs'] = 'multi'

        if _params.get('flight_ids') is not None:  # noqa: E501
            _query_params.append(('flightIDs', _params['flight_ids']))
            _collection_formats['flightIDs'] = 'multi'

        if _params.get('fare_rule_categories') is not None:  # noqa: E501
            _query_params.append(('fareRuleCategories', _params['fare_rule_categories']))
            _collection_formats['fareRuleCategories'] = 'multi'

        if _params.get('fare_rule_type') is not None:  # noqa: E501
            _query_params.append(('fareRuleType', _params['fare_rule_type']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['travelport_plus_session_id']:
            _header_params['TravelportPlusSessionID'] = _params['travelport_plus_session_id']

        if _params['trace_id']:
            _header_params['TraceId'] = _params['trace_id']

        if _params['xauth_travelport_accessgroup']:
            _header_params['XAUTH_TRAVELPORT_ACCESSGROUP'] = _params['xauth_travelport_accessgroup']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {
            '200': "FareRuleListResponseWrapper",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '402': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/farerule/farerules/fromcatalogofferings', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_rules_from_catalog_product_offerings(self, catalog_product_offerings_identifier : constr(strict=True, max_length=128), catalog_product_offering_id : StrictStr, fare_rule_type : Annotated[constr(strict=True, max_length=32), Field(..., description="The type of fare rule structure required")], product_brand_offering_ids : Optional[conlist(StrictStr)] = None, product_ids : Optional[conlist(StrictStr)] = None, flight_ids : Optional[conlist(StrictStr)] = None, fare_rule_categories : Annotated[Optional[conlist(constr(strict=True, max_length=32))], Field(description="Space separated list of fare rule categories required")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, **kwargs) -> FareRuleListResponseWrapper:  # noqa: E501
        """Return standalone fare rules with reference to CatalogProductOfferings  # noqa: E501

        Fare rules are the conditions and restrictions that apply to any booking based on its fare type. These determine the price of the fare. Generally, less expensive fares have more restrictions and more expensive fares have fewer restrictions. Fare rules can include blackout dates, advanced reservation requirements, minimum and maximum stay requirements, and cancellation and change penalties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_rules_from_catalog_product_offerings(catalog_product_offerings_identifier, catalog_product_offering_id, fare_rule_type, product_brand_offering_ids, product_ids, flight_ids, fare_rule_categories, travelport_plus_session_id, trace_id, xauth_travelport_accessgroup, async_req=True)
        >>> result = thread.get()

        :param catalog_product_offerings_identifier: (required)
        :type catalog_product_offerings_identifier: str
        :param catalog_product_offering_id: (required)
        :type catalog_product_offering_id: str
        :param fare_rule_type: The type of fare rule structure required (required)
        :type fare_rule_type: str
        :param product_brand_offering_ids:
        :type product_brand_offering_ids: List[str]
        :param product_ids:
        :type product_ids: List[str]
        :param flight_ids:
        :type flight_ids: List[str]
        :param fare_rule_categories: Space separated list of fare rule categories required
        :type fare_rule_categories: List[str]
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FareRuleListResponseWrapper
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_rules_from_catalog_product_offerings_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_rules_from_catalog_product_offerings_with_http_info(catalog_product_offerings_identifier, catalog_product_offering_id, fare_rule_type, product_brand_offering_ids, product_ids, flight_ids, fare_rule_categories, travelport_plus_session_id, trace_id, xauth_travelport_accessgroup, **kwargs)  # noqa: E501

    @validate_arguments
    def get_rules_from_catalog_product_offerings_with_http_info(self, catalog_product_offerings_identifier : constr(strict=True, max_length=128), catalog_product_offering_id : StrictStr, fare_rule_type : Annotated[constr(strict=True, max_length=32), Field(..., description="The type of fare rule structure required")], product_brand_offering_ids : Optional[conlist(StrictStr)] = None, product_ids : Optional[conlist(StrictStr)] = None, flight_ids : Optional[conlist(StrictStr)] = None, fare_rule_categories : Annotated[Optional[conlist(constr(strict=True, max_length=32))], Field(description="Space separated list of fare rule categories required")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Return standalone fare rules with reference to CatalogProductOfferings  # noqa: E501

        Fare rules are the conditions and restrictions that apply to any booking based on its fare type. These determine the price of the fare. Generally, less expensive fares have more restrictions and more expensive fares have fewer restrictions. Fare rules can include blackout dates, advanced reservation requirements, minimum and maximum stay requirements, and cancellation and change penalties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_rules_from_catalog_product_offerings_with_http_info(catalog_product_offerings_identifier, catalog_product_offering_id, fare_rule_type, product_brand_offering_ids, product_ids, flight_ids, fare_rule_categories, travelport_plus_session_id, trace_id, xauth_travelport_accessgroup, async_req=True)
        >>> result = thread.get()

        :param catalog_product_offerings_identifier: (required)
        :type catalog_product_offerings_identifier: str
        :param catalog_product_offering_id: (required)
        :type catalog_product_offering_id: str
        :param fare_rule_type: The type of fare rule structure required (required)
        :type fare_rule_type: str
        :param product_brand_offering_ids:
        :type product_brand_offering_ids: List[str]
        :param product_ids:
        :type product_ids: List[str]
        :param flight_ids:
        :type flight_ids: List[str]
        :param fare_rule_categories: Space separated list of fare rule categories required
        :type fare_rule_categories: List[str]
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FareRuleListResponseWrapper, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'catalog_product_offerings_identifier',
            'catalog_product_offering_id',
            'fare_rule_type',
            'product_brand_offering_ids',
            'product_ids',
            'flight_ids',
            'fare_rule_categories',
            'travelport_plus_session_id',
            'trace_id',
            'xauth_travelport_accessgroup'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rules_from_catalog_product_offerings" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('catalog_product_offerings_identifier') is not None:  # noqa: E501
            _query_params.append(('catalogProductOfferingsIdentifier', _params['catalog_product_offerings_identifier']))

        if _params.get('catalog_product_offering_id') is not None:  # noqa: E501
            _query_params.append(('catalogProductOfferingID', _params['catalog_product_offering_id']))

        if _params.get('product_brand_offering_ids') is not None:  # noqa: E501
            _query_params.append(('productBrandOfferingIDs', _params['product_brand_offering_ids']))
            _collection_formats['productBrandOfferingIDs'] = 'multi'

        if _params.get('product_ids') is not None:  # noqa: E501
            _query_params.append(('productIDs', _params['product_ids']))
            _collection_formats['productIDs'] = 'multi'

        if _params.get('flight_ids') is not None:  # noqa: E501
            _query_params.append(('flightIDs', _params['flight_ids']))
            _collection_formats['flightIDs'] = 'multi'

        if _params.get('fare_rule_categories') is not None:  # noqa: E501
            _query_params.append(('fareRuleCategories', _params['fare_rule_categories']))
            _collection_formats['fareRuleCategories'] = 'multi'

        if _params.get('fare_rule_type') is not None:  # noqa: E501
            _query_params.append(('fareRuleType', _params['fare_rule_type']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['travelport_plus_session_id']:
            _header_params['TravelportPlusSessionID'] = _params['travelport_plus_session_id']

        if _params['trace_id']:
            _header_params['TraceId'] = _params['trace_id']

        if _params['xauth_travelport_accessgroup']:
            _header_params['XAUTH_TRAVELPORT_ACCESSGROUP'] = _params['xauth_travelport_accessgroup']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {
            '200': "FareRuleListResponseWrapper",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '402': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/farerule/farerules/fromcatalogproductofferings', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_rules_from_offer(self, offer_identifier : constr(strict=True, max_length=128), fare_rule_type : Annotated[constr(strict=True, max_length=32), Field(..., description="The type of fare rule structure required")], product_ids : Optional[conlist(StrictStr)] = None, flight_ids : Optional[conlist(StrictStr)] = None, fare_rule_categories : Annotated[Optional[conlist(constr(strict=True, max_length=32))], Field(description="Space separated list of fare rule categories required")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, **kwargs) -> FareRuleListResponseWrapper:  # noqa: E501
        """Return standalone fare rules with reference to an Offer  # noqa: E501

        Fare rules are the conditions and restrictions that apply to any booking based on its fare type. These determine the price of the fare. Generally, less expensive fares have more restrictions and more expensive fares have fewer restrictions. Fare rules can include blackout dates, advanced reservation requirements, minimum and maximum stay requirements, and cancellation and change penalties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_rules_from_offer(offer_identifier, fare_rule_type, product_ids, flight_ids, fare_rule_categories, travelport_plus_session_id, trace_id, xauth_travelport_accessgroup, async_req=True)
        >>> result = thread.get()

        :param offer_identifier: (required)
        :type offer_identifier: str
        :param fare_rule_type: The type of fare rule structure required (required)
        :type fare_rule_type: str
        :param product_ids:
        :type product_ids: List[str]
        :param flight_ids:
        :type flight_ids: List[str]
        :param fare_rule_categories: Space separated list of fare rule categories required
        :type fare_rule_categories: List[str]
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FareRuleListResponseWrapper
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_rules_from_offer_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_rules_from_offer_with_http_info(offer_identifier, fare_rule_type, product_ids, flight_ids, fare_rule_categories, travelport_plus_session_id, trace_id, xauth_travelport_accessgroup, **kwargs)  # noqa: E501

    @validate_arguments
    def get_rules_from_offer_with_http_info(self, offer_identifier : constr(strict=True, max_length=128), fare_rule_type : Annotated[constr(strict=True, max_length=32), Field(..., description="The type of fare rule structure required")], product_ids : Optional[conlist(StrictStr)] = None, flight_ids : Optional[conlist(StrictStr)] = None, fare_rule_categories : Annotated[Optional[conlist(constr(strict=True, max_length=32))], Field(description="Space separated list of fare rule categories required")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Return standalone fare rules with reference to an Offer  # noqa: E501

        Fare rules are the conditions and restrictions that apply to any booking based on its fare type. These determine the price of the fare. Generally, less expensive fares have more restrictions and more expensive fares have fewer restrictions. Fare rules can include blackout dates, advanced reservation requirements, minimum and maximum stay requirements, and cancellation and change penalties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_rules_from_offer_with_http_info(offer_identifier, fare_rule_type, product_ids, flight_ids, fare_rule_categories, travelport_plus_session_id, trace_id, xauth_travelport_accessgroup, async_req=True)
        >>> result = thread.get()

        :param offer_identifier: (required)
        :type offer_identifier: str
        :param fare_rule_type: The type of fare rule structure required (required)
        :type fare_rule_type: str
        :param product_ids:
        :type product_ids: List[str]
        :param flight_ids:
        :type flight_ids: List[str]
        :param fare_rule_categories: Space separated list of fare rule categories required
        :type fare_rule_categories: List[str]
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FareRuleListResponseWrapper, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'offer_identifier',
            'fare_rule_type',
            'product_ids',
            'flight_ids',
            'fare_rule_categories',
            'travelport_plus_session_id',
            'trace_id',
            'xauth_travelport_accessgroup'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rules_from_offer" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('offer_identifier') is not None:  # noqa: E501
            _query_params.append(('offerIdentifier', _params['offer_identifier']))

        if _params.get('product_ids') is not None:  # noqa: E501
            _query_params.append(('productIDs', _params['product_ids']))
            _collection_formats['productIDs'] = 'multi'

        if _params.get('flight_ids') is not None:  # noqa: E501
            _query_params.append(('flightIDs', _params['flight_ids']))
            _collection_formats['flightIDs'] = 'multi'

        if _params.get('fare_rule_categories') is not None:  # noqa: E501
            _query_params.append(('fareRuleCategories', _params['fare_rule_categories']))
            _collection_formats['fareRuleCategories'] = 'multi'

        if _params.get('fare_rule_type') is not None:  # noqa: E501
            _query_params.append(('fareRuleType', _params['fare_rule_type']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['travelport_plus_session_id']:
            _header_params['TravelportPlusSessionID'] = _params['travelport_plus_session_id']

        if _params['trace_id']:
            _header_params['TraceId'] = _params['trace_id']

        if _params['xauth_travelport_accessgroup']:
            _header_params['XAUTH_TRAVELPORT_ACCESSGROUP'] = _params['xauth_travelport_accessgroup']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {
            '200': "FareRuleListResponseWrapper",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '402': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/farerule/farerules/fromoffer', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_rules_from_reservation(self, reservation_identifier : constr(strict=True, max_length=128), offer_ids : conlist(StrictStr), fare_rule_type : Annotated[constr(strict=True, max_length=32), Field(..., description="The type of fare rule structure required")], product_ids : Optional[conlist(StrictStr)] = None, flight_ids : Optional[conlist(StrictStr)] = None, fare_rule_categories : Annotated[Optional[conlist(constr(strict=True, max_length=32))], Field(description="Space separated list of fare rule categories required")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, **kwargs) -> FareRuleListResponseWrapper:  # noqa: E501
        """Return standalone fare rules with reference to a Reservation  # noqa: E501

        Fare rules are the conditions and restrictions that apply to any booking based on its fare type. These determine the price of the fare. Generally, less expensive fares have more restrictions and more expensive fares have fewer restrictions. Fare rules can include blackout dates, advanced reservation requirements, minimum and maximum stay requirements, and cancellation and change penalties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_rules_from_reservation(reservation_identifier, offer_ids, fare_rule_type, product_ids, flight_ids, fare_rule_categories, travelport_plus_session_id, trace_id, xauth_travelport_accessgroup, async_req=True)
        >>> result = thread.get()

        :param reservation_identifier: (required)
        :type reservation_identifier: str
        :param offer_ids: (required)
        :type offer_ids: List[str]
        :param fare_rule_type: The type of fare rule structure required (required)
        :type fare_rule_type: str
        :param product_ids:
        :type product_ids: List[str]
        :param flight_ids:
        :type flight_ids: List[str]
        :param fare_rule_categories: Space separated list of fare rule categories required
        :type fare_rule_categories: List[str]
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FareRuleListResponseWrapper
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_rules_from_reservation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_rules_from_reservation_with_http_info(reservation_identifier, offer_ids, fare_rule_type, product_ids, flight_ids, fare_rule_categories, travelport_plus_session_id, trace_id, xauth_travelport_accessgroup, **kwargs)  # noqa: E501

    @validate_arguments
    def get_rules_from_reservation_with_http_info(self, reservation_identifier : constr(strict=True, max_length=128), offer_ids : conlist(StrictStr), fare_rule_type : Annotated[constr(strict=True, max_length=32), Field(..., description="The type of fare rule structure required")], product_ids : Optional[conlist(StrictStr)] = None, flight_ids : Optional[conlist(StrictStr)] = None, fare_rule_categories : Annotated[Optional[conlist(constr(strict=True, max_length=32))], Field(description="Space separated list of fare rule categories required")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Return standalone fare rules with reference to a Reservation  # noqa: E501

        Fare rules are the conditions and restrictions that apply to any booking based on its fare type. These determine the price of the fare. Generally, less expensive fares have more restrictions and more expensive fares have fewer restrictions. Fare rules can include blackout dates, advanced reservation requirements, minimum and maximum stay requirements, and cancellation and change penalties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_rules_from_reservation_with_http_info(reservation_identifier, offer_ids, fare_rule_type, product_ids, flight_ids, fare_rule_categories, travelport_plus_session_id, trace_id, xauth_travelport_accessgroup, async_req=True)
        >>> result = thread.get()

        :param reservation_identifier: (required)
        :type reservation_identifier: str
        :param offer_ids: (required)
        :type offer_ids: List[str]
        :param fare_rule_type: The type of fare rule structure required (required)
        :type fare_rule_type: str
        :param product_ids:
        :type product_ids: List[str]
        :param flight_ids:
        :type flight_ids: List[str]
        :param fare_rule_categories: Space separated list of fare rule categories required
        :type fare_rule_categories: List[str]
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FareRuleListResponseWrapper, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'reservation_identifier',
            'offer_ids',
            'fare_rule_type',
            'product_ids',
            'flight_ids',
            'fare_rule_categories',
            'travelport_plus_session_id',
            'trace_id',
            'xauth_travelport_accessgroup'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rules_from_reservation" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('reservation_identifier') is not None:  # noqa: E501
            _query_params.append(('reservationIdentifier', _params['reservation_identifier']))

        if _params.get('offer_ids') is not None:  # noqa: E501
            _query_params.append(('offerIDs', _params['offer_ids']))
            _collection_formats['offerIDs'] = 'multi'

        if _params.get('product_ids') is not None:  # noqa: E501
            _query_params.append(('productIDs', _params['product_ids']))
            _collection_formats['productIDs'] = 'multi'

        if _params.get('flight_ids') is not None:  # noqa: E501
            _query_params.append(('flightIDs', _params['flight_ids']))
            _collection_formats['flightIDs'] = 'multi'

        if _params.get('fare_rule_categories') is not None:  # noqa: E501
            _query_params.append(('fareRuleCategories', _params['fare_rule_categories']))
            _collection_formats['fareRuleCategories'] = 'multi'

        if _params.get('fare_rule_type') is not None:  # noqa: E501
            _query_params.append(('fareRuleType', _params['fare_rule_type']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['travelport_plus_session_id']:
            _header_params['TravelportPlusSessionID'] = _params['travelport_plus_session_id']

        if _params['trace_id']:
            _header_params['TraceId'] = _params['trace_id']

        if _params['xauth_travelport_accessgroup']:
            _header_params['XAUTH_TRAVELPORT_ACCESSGROUP'] = _params['xauth_travelport_accessgroup']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {
            '200': "FareRuleListResponseWrapper",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '402': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/farerule/farerules/fromreservation', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_rules_from_reservation_workbench(self, reservation_identifier : constr(strict=True, max_length=128), offer_ids : conlist(StrictStr), fare_rule_type : Annotated[constr(strict=True, max_length=32), Field(..., description="The type of fare rule structure required")], product_ids : Optional[conlist(StrictStr)] = None, flight_ids : Optional[conlist(StrictStr)] = None, fare_rule_categories : Annotated[Optional[conlist(constr(strict=True, max_length=32))], Field(description="Space separated list of fare rule categories required")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, **kwargs) -> FareRuleListResponseWrapper:  # noqa: E501
        """Return standalone fare rules with reference to a Reservation workbench  # noqa: E501

        Fare rules are the conditions and restrictions that apply to any booking based on its fare type. These determine the price of the fare. Generally, less expensive fares have more restrictions and more expensive fares have fewer restrictions. Fare rules can include blackout dates, advanced reservation requirements, minimum and maximum stay requirements, and cancellation and change penalties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_rules_from_reservation_workbench(reservation_identifier, offer_ids, fare_rule_type, product_ids, flight_ids, fare_rule_categories, travelport_plus_session_id, trace_id, xauth_travelport_accessgroup, async_req=True)
        >>> result = thread.get()

        :param reservation_identifier: (required)
        :type reservation_identifier: str
        :param offer_ids: (required)
        :type offer_ids: List[str]
        :param fare_rule_type: The type of fare rule structure required (required)
        :type fare_rule_type: str
        :param product_ids:
        :type product_ids: List[str]
        :param flight_ids:
        :type flight_ids: List[str]
        :param fare_rule_categories: Space separated list of fare rule categories required
        :type fare_rule_categories: List[str]
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FareRuleListResponseWrapper
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_rules_from_reservation_workbench_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_rules_from_reservation_workbench_with_http_info(reservation_identifier, offer_ids, fare_rule_type, product_ids, flight_ids, fare_rule_categories, travelport_plus_session_id, trace_id, xauth_travelport_accessgroup, **kwargs)  # noqa: E501

    @validate_arguments
    def get_rules_from_reservation_workbench_with_http_info(self, reservation_identifier : constr(strict=True, max_length=128), offer_ids : conlist(StrictStr), fare_rule_type : Annotated[constr(strict=True, max_length=32), Field(..., description="The type of fare rule structure required")], product_ids : Optional[conlist(StrictStr)] = None, flight_ids : Optional[conlist(StrictStr)] = None, fare_rule_categories : Annotated[Optional[conlist(constr(strict=True, max_length=32))], Field(description="Space separated list of fare rule categories required")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Return standalone fare rules with reference to a Reservation workbench  # noqa: E501

        Fare rules are the conditions and restrictions that apply to any booking based on its fare type. These determine the price of the fare. Generally, less expensive fares have more restrictions and more expensive fares have fewer restrictions. Fare rules can include blackout dates, advanced reservation requirements, minimum and maximum stay requirements, and cancellation and change penalties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_rules_from_reservation_workbench_with_http_info(reservation_identifier, offer_ids, fare_rule_type, product_ids, flight_ids, fare_rule_categories, travelport_plus_session_id, trace_id, xauth_travelport_accessgroup, async_req=True)
        >>> result = thread.get()

        :param reservation_identifier: (required)
        :type reservation_identifier: str
        :param offer_ids: (required)
        :type offer_ids: List[str]
        :param fare_rule_type: The type of fare rule structure required (required)
        :type fare_rule_type: str
        :param product_ids:
        :type product_ids: List[str]
        :param flight_ids:
        :type flight_ids: List[str]
        :param fare_rule_categories: Space separated list of fare rule categories required
        :type fare_rule_categories: List[str]
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FareRuleListResponseWrapper, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'reservation_identifier',
            'offer_ids',
            'fare_rule_type',
            'product_ids',
            'flight_ids',
            'fare_rule_categories',
            'travelport_plus_session_id',
            'trace_id',
            'xauth_travelport_accessgroup'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rules_from_reservation_workbench" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('reservation_identifier') is not None:  # noqa: E501
            _query_params.append(('reservationIdentifier', _params['reservation_identifier']))

        if _params.get('offer_ids') is not None:  # noqa: E501
            _query_params.append(('offerIDs', _params['offer_ids']))
            _collection_formats['offerIDs'] = 'multi'

        if _params.get('product_ids') is not None:  # noqa: E501
            _query_params.append(('productIDs', _params['product_ids']))
            _collection_formats['productIDs'] = 'multi'

        if _params.get('flight_ids') is not None:  # noqa: E501
            _query_params.append(('flightIDs', _params['flight_ids']))
            _collection_formats['flightIDs'] = 'multi'

        if _params.get('fare_rule_categories') is not None:  # noqa: E501
            _query_params.append(('fareRuleCategories', _params['fare_rule_categories']))
            _collection_formats['fareRuleCategories'] = 'multi'

        if _params.get('fare_rule_type') is not None:  # noqa: E501
            _query_params.append(('fareRuleType', _params['fare_rule_type']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['travelport_plus_session_id']:
            _header_params['TravelportPlusSessionID'] = _params['travelport_plus_session_id']

        if _params['trace_id']:
            _header_params['TraceId'] = _params['trace_id']

        if _params['xauth_travelport_accessgroup']:
            _header_params['XAUTH_TRAVELPORT_ACCESSGROUP'] = _params['xauth_travelport_accessgroup']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {
            '200': "FareRuleListResponseWrapper",
            '201': "FareRuleListResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '402': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/farerule/farerules/fromreservationworkbench', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
