# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, constr, validator

from typing import Optional

from openapi_client.models.document_type_enum import DocumentTypeEnum
from openapi_client.models.identifier_type_enum import IdentifierTypeENUM
from openapi_client.models.reservation_id import ReservationID
from openapi_client.models.reservation_response_wrapper import ReservationResponseWrapper

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class WorkbenchManagementApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_reservation_workbench(self, reservation_id : ReservationID, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, **kwargs) -> ReservationResponseWrapper:  # noqa: E501
        """Create a workbench for new booking  # noqa: E501

        Use this request to initiate a workbench for a new reservation. This prerequisite step for booking creates the workbench session in which all booking details are added together to create a PNR at commit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_reservation_workbench(reservation_id, trace_id, xauth_travelport_accessgroup, travelport_plus_session_id, async_req=True)
        >>> result = thread.get()

        :param reservation_id: (required)
        :type reservation_id: ReservationID
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReservationResponseWrapper
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_reservation_workbench_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_reservation_workbench_with_http_info(reservation_id, trace_id, xauth_travelport_accessgroup, travelport_plus_session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def create_reservation_workbench_with_http_info(self, reservation_id : ReservationID, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a workbench for new booking  # noqa: E501

        Use this request to initiate a workbench for a new reservation. This prerequisite step for booking creates the workbench session in which all booking details are added together to create a PNR at commit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_reservation_workbench_with_http_info(reservation_id, trace_id, xauth_travelport_accessgroup, travelport_plus_session_id, async_req=True)
        >>> result = thread.get()

        :param reservation_id: (required)
        :type reservation_id: ReservationID
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReservationResponseWrapper, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'reservation_id',
            'trace_id',
            'xauth_travelport_accessgroup',
            'travelport_plus_session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_reservation_workbench" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['trace_id']:
            _header_params['TraceId'] = _params['trace_id']

        if _params['xauth_travelport_accessgroup']:
            _header_params['XAUTH_TRAVELPORT_ACCESSGROUP'] = _params['xauth_travelport_accessgroup']

        if _params['travelport_plus_session_id']:
            _header_params['TravelportPlusSessionID'] = _params['travelport_plus_session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['reservation_id'] is not None:
            _body_params = _params['reservation_id']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {
            '200': "ReservationResponseWrapper",
            '201': "ReservationResponseWrapper",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '402': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/book/session/reservationworkbench', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_reservation_workbench_from_identifier(self, identifier : constr(strict=True, max_length=128), detail_view_ind : Optional[StrictBool] = None, view_brand_complete_info_ind : Annotated[Optional[StrictBool], Field(description="If true, Brand complete information will be returned in Reservation Response")] = None, view_baggage_detail_ind : Annotated[Optional[StrictBool], Field(description="if true, full baggage information will be returned in Reservation Response")] = None, identifier_type : Annotated[Optional[IdentifierTypeENUM], Field(description="The type of identifier key used to retrieve the reservation")] = None, document_type : Annotated[Optional[DocumentTypeEnum], Field(description="When document is selected in IdentifierType, use documentType to identify the type of document")] = None, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, **kwargs) -> ReservationResponseWrapper:  # noqa: E501
        """Create a workbench for existing booking  # noqa: E501

        Initiate a post-commit workbench to create a session for ticketing or updating an existing reservation. This is a prerequisite step for any transaction that modifies, updates, or tickets any PNR.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_reservation_workbench_from_identifier(identifier, detail_view_ind, view_brand_complete_info_ind, view_baggage_detail_ind, identifier_type, document_type, trace_id, xauth_travelport_accessgroup, travelport_plus_session_id, async_req=True)
        >>> result = thread.get()

        :param identifier: (required)
        :type identifier: str
        :param detail_view_ind:
        :type detail_view_ind: bool
        :param view_brand_complete_info_ind: If true, Brand complete information will be returned in Reservation Response
        :type view_brand_complete_info_ind: bool
        :param view_baggage_detail_ind: if true, full baggage information will be returned in Reservation Response
        :type view_baggage_detail_ind: bool
        :param identifier_type: The type of identifier key used to retrieve the reservation
        :type identifier_type: IdentifierTypeENUM
        :param document_type: When document is selected in IdentifierType, use documentType to identify the type of document
        :type document_type: DocumentTypeEnum
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReservationResponseWrapper
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_reservation_workbench_from_identifier_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_reservation_workbench_from_identifier_with_http_info(identifier, detail_view_ind, view_brand_complete_info_ind, view_baggage_detail_ind, identifier_type, document_type, trace_id, xauth_travelport_accessgroup, travelport_plus_session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def create_reservation_workbench_from_identifier_with_http_info(self, identifier : constr(strict=True, max_length=128), detail_view_ind : Optional[StrictBool] = None, view_brand_complete_info_ind : Annotated[Optional[StrictBool], Field(description="If true, Brand complete information will be returned in Reservation Response")] = None, view_baggage_detail_ind : Annotated[Optional[StrictBool], Field(description="if true, full baggage information will be returned in Reservation Response")] = None, identifier_type : Annotated[Optional[IdentifierTypeENUM], Field(description="The type of identifier key used to retrieve the reservation")] = None, document_type : Annotated[Optional[DocumentTypeEnum], Field(description="When document is selected in IdentifierType, use documentType to identify the type of document")] = None, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a workbench for existing booking  # noqa: E501

        Initiate a post-commit workbench to create a session for ticketing or updating an existing reservation. This is a prerequisite step for any transaction that modifies, updates, or tickets any PNR.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_reservation_workbench_from_identifier_with_http_info(identifier, detail_view_ind, view_brand_complete_info_ind, view_baggage_detail_ind, identifier_type, document_type, trace_id, xauth_travelport_accessgroup, travelport_plus_session_id, async_req=True)
        >>> result = thread.get()

        :param identifier: (required)
        :type identifier: str
        :param detail_view_ind:
        :type detail_view_ind: bool
        :param view_brand_complete_info_ind: If true, Brand complete information will be returned in Reservation Response
        :type view_brand_complete_info_ind: bool
        :param view_baggage_detail_ind: if true, full baggage information will be returned in Reservation Response
        :type view_baggage_detail_ind: bool
        :param identifier_type: The type of identifier key used to retrieve the reservation
        :type identifier_type: IdentifierTypeENUM
        :param document_type: When document is selected in IdentifierType, use documentType to identify the type of document
        :type document_type: DocumentTypeEnum
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReservationResponseWrapper, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identifier',
            'detail_view_ind',
            'view_brand_complete_info_ind',
            'view_baggage_detail_ind',
            'identifier_type',
            'document_type',
            'trace_id',
            'xauth_travelport_accessgroup',
            'travelport_plus_session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_reservation_workbench_from_identifier" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identifier']:
            _path_params['Identifier'] = _params['identifier']


        # process the query parameters
        _query_params = []
        if _params.get('detail_view_ind') is not None:  # noqa: E501
            _query_params.append(('detailViewInd', _params['detail_view_ind']))

        if _params.get('view_brand_complete_info_ind') is not None:  # noqa: E501
            _query_params.append(('viewBrandCompleteInfoInd', _params['view_brand_complete_info_ind']))

        if _params.get('view_baggage_detail_ind') is not None:  # noqa: E501
            _query_params.append(('viewBaggageDetailInd', _params['view_baggage_detail_ind']))

        if _params.get('identifier_type') is not None:  # noqa: E501
            _query_params.append(('identifierType', _params['identifier_type'].value))

        if _params.get('document_type') is not None:  # noqa: E501
            _query_params.append(('documentType', _params['document_type'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['trace_id']:
            _header_params['TraceId'] = _params['trace_id']

        if _params['xauth_travelport_accessgroup']:
            _header_params['XAUTH_TRAVELPORT_ACCESSGROUP'] = _params['xauth_travelport_accessgroup']

        if _params['travelport_plus_session_id']:
            _header_params['TravelportPlusSessionID'] = _params['travelport_plus_session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {
            '200': "ReservationResponseWrapper",
            '201': "ReservationResponseWrapper",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '402': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/book/session/reservationworkbench/buildfromidentifier/{Identifier}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_reservation_workbench_from_locator(self, locator : Optional[constr(strict=True, max_length=16)] = None, source : Annotated[Optional[constr(strict=True, max_length=128)], Field(description="Specifies a unique identifier to indicate the source system which generated the resId.")] = None, detail_view_ind : Annotated[Optional[StrictBool], Field(description="If true, ReservationDetail will be returned")] = None, view_brand_complete_info_ind : Annotated[Optional[StrictBool], Field(description="If true, Brand complete information will be returned in Reservation Response")] = None, view_baggage_detail_ind : Annotated[Optional[StrictBool], Field(description="if true, full baggage information will be returned in Reservation Response")] = None, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, **kwargs) -> ReservationResponseWrapper:  # noqa: E501
        """Create a workbench for existing booking  # noqa: E501

        Initiate a post-commit workbench to create a session for ticketing or updating an existing reservation. This is a prerequisite step for any transaction that modifies, updates, or tickets any PNR.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_reservation_workbench_from_locator(locator, source, detail_view_ind, view_brand_complete_info_ind, view_baggage_detail_ind, trace_id, xauth_travelport_accessgroup, travelport_plus_session_id, async_req=True)
        >>> result = thread.get()

        :param locator:
        :type locator: str
        :param source: Specifies a unique identifier to indicate the source system which generated the resId.
        :type source: str
        :param detail_view_ind: If true, ReservationDetail will be returned
        :type detail_view_ind: bool
        :param view_brand_complete_info_ind: If true, Brand complete information will be returned in Reservation Response
        :type view_brand_complete_info_ind: bool
        :param view_baggage_detail_ind: if true, full baggage information will be returned in Reservation Response
        :type view_baggage_detail_ind: bool
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReservationResponseWrapper
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_reservation_workbench_from_locator_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_reservation_workbench_from_locator_with_http_info(locator, source, detail_view_ind, view_brand_complete_info_ind, view_baggage_detail_ind, trace_id, xauth_travelport_accessgroup, travelport_plus_session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def create_reservation_workbench_from_locator_with_http_info(self, locator : Optional[constr(strict=True, max_length=16)] = None, source : Annotated[Optional[constr(strict=True, max_length=128)], Field(description="Specifies a unique identifier to indicate the source system which generated the resId.")] = None, detail_view_ind : Annotated[Optional[StrictBool], Field(description="If true, ReservationDetail will be returned")] = None, view_brand_complete_info_ind : Annotated[Optional[StrictBool], Field(description="If true, Brand complete information will be returned in Reservation Response")] = None, view_baggage_detail_ind : Annotated[Optional[StrictBool], Field(description="if true, full baggage information will be returned in Reservation Response")] = None, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a workbench for existing booking  # noqa: E501

        Initiate a post-commit workbench to create a session for ticketing or updating an existing reservation. This is a prerequisite step for any transaction that modifies, updates, or tickets any PNR.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_reservation_workbench_from_locator_with_http_info(locator, source, detail_view_ind, view_brand_complete_info_ind, view_baggage_detail_ind, trace_id, xauth_travelport_accessgroup, travelport_plus_session_id, async_req=True)
        >>> result = thread.get()

        :param locator:
        :type locator: str
        :param source: Specifies a unique identifier to indicate the source system which generated the resId.
        :type source: str
        :param detail_view_ind: If true, ReservationDetail will be returned
        :type detail_view_ind: bool
        :param view_brand_complete_info_ind: If true, Brand complete information will be returned in Reservation Response
        :type view_brand_complete_info_ind: bool
        :param view_baggage_detail_ind: if true, full baggage information will be returned in Reservation Response
        :type view_baggage_detail_ind: bool
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReservationResponseWrapper, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'locator',
            'source',
            'detail_view_ind',
            'view_brand_complete_info_ind',
            'view_baggage_detail_ind',
            'trace_id',
            'xauth_travelport_accessgroup',
            'travelport_plus_session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_reservation_workbench_from_locator" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('locator') is not None:  # noqa: E501
            _query_params.append(('Locator', _params['locator']))

        if _params.get('source') is not None:  # noqa: E501
            _query_params.append(('source', _params['source']))

        if _params.get('detail_view_ind') is not None:  # noqa: E501
            _query_params.append(('detailViewInd', _params['detail_view_ind']))

        if _params.get('view_brand_complete_info_ind') is not None:  # noqa: E501
            _query_params.append(('viewBrandCompleteInfoInd', _params['view_brand_complete_info_ind']))

        if _params.get('view_baggage_detail_ind') is not None:  # noqa: E501
            _query_params.append(('viewBaggageDetailInd', _params['view_baggage_detail_ind']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['trace_id']:
            _header_params['TraceId'] = _params['trace_id']

        if _params['xauth_travelport_accessgroup']:
            _header_params['XAUTH_TRAVELPORT_ACCESSGROUP'] = _params['xauth_travelport_accessgroup']

        if _params['travelport_plus_session_id']:
            _header_params['TravelportPlusSessionID'] = _params['travelport_plus_session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {
            '200': "ReservationResponseWrapper",
            '201': "ReservationResponseWrapper",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '402': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/book/session/reservationworkbench/buildfromlocator', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ignore_reservation_workbench(self, identifier : Annotated[constr(strict=True, max_length=128), Field(..., description="Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.")], trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, **kwargs) -> None:  # noqa: E501
        """Discard workbench  # noqa: E501

        At any point in a booking or ticketing workflow, if necessary, you can discard the workbench and any information in it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ignore_reservation_workbench(identifier, trace_id, xauth_travelport_accessgroup, travelport_plus_session_id, async_req=True)
        >>> result = thread.get()

        :param identifier: Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database. (required)
        :type identifier: str
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the ignore_reservation_workbench_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.ignore_reservation_workbench_with_http_info(identifier, trace_id, xauth_travelport_accessgroup, travelport_plus_session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ignore_reservation_workbench_with_http_info(self, identifier : Annotated[constr(strict=True, max_length=128), Field(..., description="Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.")], trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Discard workbench  # noqa: E501

        At any point in a booking or ticketing workflow, if necessary, you can discard the workbench and any information in it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ignore_reservation_workbench_with_http_info(identifier, trace_id, xauth_travelport_accessgroup, travelport_plus_session_id, async_req=True)
        >>> result = thread.get()

        :param identifier: Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database. (required)
        :type identifier: str
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'identifier',
            'trace_id',
            'xauth_travelport_accessgroup',
            'travelport_plus_session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ignore_reservation_workbench" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identifier']:
            _path_params['Identifier'] = _params['identifier']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['trace_id']:
            _header_params['TraceId'] = _params['trace_id']

        if _params['xauth_travelport_accessgroup']:
            _header_params['XAUTH_TRAVELPORT_ACCESSGROUP'] = _params['xauth_travelport_accessgroup']

        if _params['travelport_plus_session_id']:
            _header_params['TravelportPlusSessionID'] = _params['travelport_plus_session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/book/session/reservationworkbench/{Identifier}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def retrieve_reservation_workbench(self, identifier : Annotated[constr(strict=True, max_length=128), Field(..., description="Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.")], detail_view_ind : Annotated[Optional[StrictBool], Field(description="If true, ReservationDetail will be returned.")] = None, view_brand_complete_info_ind : Annotated[Optional[StrictBool], Field(description="If true, Brand complete information will be returned in Reservation Response")] = None, view_baggage_detail_ind : Annotated[Optional[StrictBool], Field(description="if true, full baggage information will be returned in Reservation Response")] = None, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, **kwargs) -> ReservationResponseWrapper:  # noqa: E501
        """Retrieve workbench details  # noqa: E501

        At any point in the booking session, you can retrieve the workbench. The response returns all details added to the workbench at that point.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_reservation_workbench(identifier, detail_view_ind, view_brand_complete_info_ind, view_baggage_detail_ind, trace_id, xauth_travelport_accessgroup, travelport_plus_session_id, async_req=True)
        >>> result = thread.get()

        :param identifier: Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database. (required)
        :type identifier: str
        :param detail_view_ind: If true, ReservationDetail will be returned.
        :type detail_view_ind: bool
        :param view_brand_complete_info_ind: If true, Brand complete information will be returned in Reservation Response
        :type view_brand_complete_info_ind: bool
        :param view_baggage_detail_ind: if true, full baggage information will be returned in Reservation Response
        :type view_baggage_detail_ind: bool
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReservationResponseWrapper
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the retrieve_reservation_workbench_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.retrieve_reservation_workbench_with_http_info(identifier, detail_view_ind, view_brand_complete_info_ind, view_baggage_detail_ind, trace_id, xauth_travelport_accessgroup, travelport_plus_session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def retrieve_reservation_workbench_with_http_info(self, identifier : Annotated[constr(strict=True, max_length=128), Field(..., description="Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.")], detail_view_ind : Annotated[Optional[StrictBool], Field(description="If true, ReservationDetail will be returned.")] = None, view_brand_complete_info_ind : Annotated[Optional[StrictBool], Field(description="If true, Brand complete information will be returned in Reservation Response")] = None, view_baggage_detail_ind : Annotated[Optional[StrictBool], Field(description="if true, full baggage information will be returned in Reservation Response")] = None, trace_id : Annotated[Optional[StrictStr], Field(description="Identifier used to correlate API invocations across long-running or multi-call business flows.")] = None, xauth_travelport_accessgroup : Annotated[Optional[StrictStr], Field(description="Identifies the Travelport access group with which the caller is associated")] = None, travelport_plus_session_id : Annotated[Optional[StrictStr], Field(description="Travelport Plus Session ID used to maintain an established agency session")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve workbench details  # noqa: E501

        At any point in the booking session, you can retrieve the workbench. The response returns all details added to the workbench at that point.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_reservation_workbench_with_http_info(identifier, detail_view_ind, view_brand_complete_info_ind, view_baggage_detail_ind, trace_id, xauth_travelport_accessgroup, travelport_plus_session_id, async_req=True)
        >>> result = thread.get()

        :param identifier: Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database. (required)
        :type identifier: str
        :param detail_view_ind: If true, ReservationDetail will be returned.
        :type detail_view_ind: bool
        :param view_brand_complete_info_ind: If true, Brand complete information will be returned in Reservation Response
        :type view_brand_complete_info_ind: bool
        :param view_baggage_detail_ind: if true, full baggage information will be returned in Reservation Response
        :type view_baggage_detail_ind: bool
        :param trace_id: Identifier used to correlate API invocations across long-running or multi-call business flows.
        :type trace_id: str
        :param xauth_travelport_accessgroup: Identifies the Travelport access group with which the caller is associated
        :type xauth_travelport_accessgroup: str
        :param travelport_plus_session_id: Travelport Plus Session ID used to maintain an established agency session
        :type travelport_plus_session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReservationResponseWrapper, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identifier',
            'detail_view_ind',
            'view_brand_complete_info_ind',
            'view_baggage_detail_ind',
            'trace_id',
            'xauth_travelport_accessgroup',
            'travelport_plus_session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_reservation_workbench" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identifier']:
            _path_params['Identifier'] = _params['identifier']


        # process the query parameters
        _query_params = []
        if _params.get('detail_view_ind') is not None:  # noqa: E501
            _query_params.append(('detailViewInd', _params['detail_view_ind']))

        if _params.get('view_brand_complete_info_ind') is not None:  # noqa: E501
            _query_params.append(('viewBrandCompleteInfoInd', _params['view_brand_complete_info_ind']))

        if _params.get('view_baggage_detail_ind') is not None:  # noqa: E501
            _query_params.append(('viewBaggageDetailInd', _params['view_baggage_detail_ind']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['trace_id']:
            _header_params['TraceId'] = _params['trace_id']

        if _params['xauth_travelport_accessgroup']:
            _header_params['XAUTH_TRAVELPORT_ACCESSGROUP'] = _params['xauth_travelport_accessgroup']

        if _params['travelport_plus_session_id']:
            _header_params['TravelportPlusSessionID'] = _params['travelport_plus_session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {
            '200': "ReservationResponseWrapper",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '402': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/book/session/reservationworkbench/{Identifier}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
