# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

import openapi_client
from openapi_client.models.payment_card import PaymentCard  # noqa: E501
from openapi_client.rest import ApiException

class TestPaymentCard(unittest.TestCase):
    """PaymentCard unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test PaymentCard
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaymentCard`
        """
        model = openapi_client.models.payment_card.PaymentCard()  # noqa: E501
        if include_optional :
            return PaymentCard(
                type = 'PaymentCard', 
                id = 'paymentCard_01', 
                effective_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                expire_date = '0558', 
                approval_code = 'C59', 
                privacy_group = openapi_client.models.privacy.Privacy(
                    id = '2', 
                    share_marketing = 'Yes', 
                    share_sync = 'Yes', 
                    opt_out_ind = 'Yes', 
                    opt_in_status = 'OptedIn', 
                    opt_in_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    opt_out_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                card_type = 'Credit', 
                card_code = 'Q6ZGC', 
                card_brand = openapi_client.models.payment_card_type_issuer.PaymentCardTypeIssuer(
                    payment_card_issuers = openapi_client.models.list_payment_card_issuer_enum.ListPaymentCardIssuerEnum(
                        value = 'VISA', ), 
                    payment_card_issuers_extension = '0', 
                    issue_number = 56, ), 
                card_issuer = openapi_client.models.payment_card_type_issuer.PaymentCardTypeIssuer(
                    payment_card_issuers = openapi_client.models.list_payment_card_issuer_enum.ListPaymentCardIssuerEnum(
                        value = 'VISA', ), 
                    payment_card_issuers_extension = '0', 
                    issue_number = 56, ), 
                card_holder_name = '', 
                card_number = openapi_client.models.card_number.CardNumber(
                    @type = 'EncryptionToken', 
                    encryption_key = 'secret', 
                    encryption_key_method = 'RSA', 
                    encryption_method = 'RSA', 
                    encrypted_value = '5dfc52b51bd35553df8592078de921bc', 
                    mask = 'xxxx436', 
                    token = 'A567GTREWQ', 
                    token_provider_id = 'c1234532', 
                    authentication_method = 'SecurityCode', 
                    plain_text = 'un-encrypted data', 
                    error_warning = openapi_client.models.error_warning.ErrorWarning(
                        @type = 'Error', 
                        status_code = 56, 
                        message = '', 
                        name_value_pair = [
                            openapi_client.models.name_value_pair.NameValuePair(
                                value = 'Sunday', 
                                id = '6', 
                                name = 'Day1', )
                            ], ), ), 
                series_code = openapi_client.models.series_code.SeriesCode(
                    @type = 'EncryptionToken', 
                    encryption_key = 'secret', 
                    encryption_key_method = 'RSA', 
                    encryption_method = 'RSA', 
                    encrypted_value = '5dfc52b51bd35553df8592078de921bc', 
                    mask = 'xxxx436', 
                    token = 'A567GTREWQ', 
                    token_provider_id = 'c1234532', 
                    authentication_method = 'SecurityCode', 
                    plain_text = 'un-encrypted data', 
                    error_warning = openapi_client.models.error_warning.ErrorWarning(
                        @type = 'Error', 
                        status_code = 56, 
                        message = '', 
                        name_value_pair = [
                            openapi_client.models.name_value_pair.NameValuePair(
                                value = 'Sunday', 
                                id = '6', 
                                name = 'Day1', )
                            ], ), ), 
                magnetic_stripe = [
                    openapi_client.models.magnetic_stripe.MagneticStripe(
                        @type = 'EncryptionToken', 
                        encryption_key = 'secret', 
                        encryption_key_method = 'RSA', 
                        encryption_method = 'RSA', 
                        encrypted_value = '5dfc52b51bd35553df8592078de921bc', 
                        mask = 'xxxx436', 
                        token = 'A567GTREWQ', 
                        token_provider_id = 'c1234532', 
                        authentication_method = 'SecurityCode', 
                        plain_text = 'un-encrypted data', 
                        error_warning = openapi_client.models.error_warning.ErrorWarning(
                            @type = 'Error', 
                            status_code = 56, 
                            message = '', 
                            name_value_pair = [
                                openapi_client.models.name_value_pair.NameValuePair(
                                    value = 'Sunday', 
                                    id = '6', 
                                    name = 'Day1', )
                                ], ), )
                    ], 
                secure_ind = True
            )
        else :
            return PaymentCard(
                type = 'PaymentCard',
        )
        """

    def testPaymentCard(self):
        """Test PaymentCard"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
