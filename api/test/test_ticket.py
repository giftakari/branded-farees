# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

import openapi_client
from openapi_client.models.ticket import Ticket  # noqa: E501
from openapi_client.rest import ApiException

class TestTicket(unittest.TestCase):
    """Ticket unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Ticket
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Ticket`
        """
        model = openapi_client.models.ticket.Ticket()  # noqa: E501
        if include_optional :
            return Ticket(
                type = 'Ticket', 
                number_of_tickets_issued = 56, 
                settlement_authorization_code = 'REA', 
                tour_code = 'LHR', 
                account_code = 'Pcard, travel', 
                ticket_designator = 'infant', 
                person_name = openapi_client.models.person_name.PersonName(
                    @type = 'PersonNameDetail', 
                    prefix = 'Mr', 
                    given = 'John', 
                    middle = 'Erick', 
                    surname = 'Smith', ), 
                reservation_locator = openapi_client.models.supplier_locator.SupplierLocator(
                    value = 'WTR45G', 
                    supplier_code = 'AA', 
                    supplier_name = 'American Airlines', ), 
                form_of_payment = [
                    openapi_client.models.form_of_payment.FormOfPayment(
                        value = 'AgencyAccount', 
                        document_number = '45', 
                        encrypted_value = 'BNASJASJKASKJASHJKASK', 
                        document_issuer = 'Alpha travel', 
                        document_type = 'Ticket', )
                    ], 
                ticket_segment = [
                    openapi_client.models.ticket_segment.TicketSegment(
                        @type = 'TicketSegment', 
                        sequence = 56, 
                        class_of_service = 'Cu0', 
                        fare_basis_code = 'if you buy a super expensive business class ticket, it may have the fare code J', 
                        status = 'CheckedIn', 
                        carrier = 'DAL', 
                        number = 'BA2490', 
                        departure = openapi_client.models.departure.Departure(
                            @type = 'DepartureDetail', 
                            location = 'Texas', 
                            date = 'Tue Oct 13 10:00:00 AEST 11', 
                            time = '04:45 PM', ), 
                        arrival = openapi_client.models.arrival.Arrival(
                            @type = 'ArrivalDetail', 
                            location = 'Texas', 
                            date = 'Tue Oct 13 10:00:00 AEST 11', 
                            time = '04:45 PM', ), 
                        flight_status_code = 'AF  AA Advantage ticket', 
                        valid_date_range = openapi_client.models.date_range.DateRange(
                            start = 'Fri Mar 03 11:00:00 AEDT 2023', 
                            end = 'Fri Mar 03 11:00:00 AEDT 2023', ), 
                        ticket_baggage = openapi_client.models.ticket_baggage.TicketBaggage(
                            @type = 'TicketBaggage', 
                            quantity = 2, 
                            measurement = Small checked suitcases usually are 23-24 inches on the longest size, medium ones 25-27 inches, and large ones in 28-32 inches, ), 
                        connection_ind = True, )
                    ], 
                ticket_price = openapi_client.models.ticket_price.TicketPrice(
                    @type = 'TicketPrice', 
                    fare_calculation = 'LON BA SIN R235.00YEE1Y BA LON R235.00YEE1Y END ROE0.645487', 
                    fare_breakdown = '', 
                    currency_code = openapi_client.models.currency_code.CurrencyCode(
                        value = 'USD', 
                        code_authority = 'ISO 4217', 
                        decimal_place = 4, 
                        decimal_authority = 'ISO 4217', ), 
                    base = 1.337, 
                    taxes = openapi_client.models.paid_taxes.PaidTaxes(
                        @type = 'PaidTaxesDetail', 
                        total_taxes = 220.12, ), 
                    fees = openapi_client.models.fees.Fees(
                        @type = 'FeesDetail', 
                        total_fees = 111.11, ), 
                    total = 1.337, 
                    commission = openapi_client.models.commission.Commission(
                        @type = 'Commission', 
                        application = 'Full', ), 
                    filed_amount = openapi_client.models.filed_amount.FiledAmount(
                        value = 43.3422, 
                        currency_code = 'USD', 
                        code_authority = 'Australian Dollar', 
                        decimal_place = 3, 
                        decimal_authority = 'ISO 4217', ), 
                    paid_taxes = openapi_client.models.taxes.Taxes(
                        @type = 'TaxesDetail', 
                        total_taxes = 330.1, 
                        tax_info = [
                            openapi_client.models.tax_info.TaxInfo(
                                tax_code = 'XF', 
                                amount = 1.337, 
                                tax_breakdown = [
                                    openapi_client.models.tax_breakdown.TaxBreakdown(
                                        airport_code = 'MIA', 
                                        amount = 1.337, )
                                    ], )
                            ], ), 
                    i_t_fare_ind = True, 
                    b_t_fare_ind = False, 
                    additional_collection = openapi_client.models.filed_amount.FiledAmount(
                        value = 43.3422, 
                        currency_code = 'USD', 
                        code_authority = 'Australian Dollar', 
                        decimal_place = 3, 
                        decimal_authority = 'ISO 4217', ), 
                    net_amount = openapi_client.models.alternate_amount.AlternateAmount(
                        amount = 43.3422, 
                        currency_code = 'USD', 
                        decimal_place = 3, 
                        fare_calculation = 'LON BA SIN R 234.00 BA LON R 234.00NUC468.00END', 
                        rate_of_exchange = 1.234562, ), ), 
                passenger_type_code = 'PTC', 
                validating_carrier = 'ticket prefix is 001, while United Airlines' prefix is 016.', 
                pricing_type = 'Auto Priced', 
                restrictions = whether a Ticket is refundable, applicable Ticketing time limits, 
                agency_info = openapi_client.models.agency_info.AgencyInfo(
                    ticketed_date = '2022-04-05', 
                    name = 'Alpha travel', 
                    place = 'Marietta', 
                    ticketing_pcc = '1CR', 
                    code = 'AG1', 
                    sales_type = 'Ticketing', 
                    ticketing_country = 'USA', 
                    ticketing_city = 'Newyork', ), 
                original_issue = openapi_client.models.original_issue.OriginalIssue(
                    value = '', 
                    issuing_city = '????', 
                    issue_date = '2022-04-04', 
                    agency_code_iata = '8921', 
                    document_type = 'Ticket', ), 
                previous_issue = [
                    openapi_client.models.previous_issue.PreviousIssue(
                        value = '', 
                        issuing_city = 'AEi012', 
                        issue_date = '0480-72-88', 
                        agency_code_iata = '04807288', 
                        document_type = 'Ticket', )
                    ]
            )
        else :
            return Ticket(
                number_of_tickets_issued = 56,
                person_name = openapi_client.models.person_name.PersonName(
                    @type = 'PersonNameDetail', 
                    prefix = 'Mr', 
                    given = 'John', 
                    middle = 'Erick', 
                    surname = 'Smith', ),
                form_of_payment = [
                    openapi_client.models.form_of_payment.FormOfPayment(
                        value = 'AgencyAccount', 
                        document_number = '45', 
                        encrypted_value = 'BNASJASJKASKJASHJKASK', 
                        document_issuer = 'Alpha travel', 
                        document_type = 'Ticket', )
                    ],
                ticket_segment = [
                    openapi_client.models.ticket_segment.TicketSegment(
                        @type = 'TicketSegment', 
                        sequence = 56, 
                        class_of_service = 'Cu0', 
                        fare_basis_code = 'if you buy a super expensive business class ticket, it may have the fare code J', 
                        status = 'CheckedIn', 
                        carrier = 'DAL', 
                        number = 'BA2490', 
                        departure = openapi_client.models.departure.Departure(
                            @type = 'DepartureDetail', 
                            location = 'Texas', 
                            date = 'Tue Oct 13 10:00:00 AEST 11', 
                            time = '04:45 PM', ), 
                        arrival = openapi_client.models.arrival.Arrival(
                            @type = 'ArrivalDetail', 
                            location = 'Texas', 
                            date = 'Tue Oct 13 10:00:00 AEST 11', 
                            time = '04:45 PM', ), 
                        flight_status_code = 'AF  AA Advantage ticket', 
                        valid_date_range = openapi_client.models.date_range.DateRange(
                            start = 'Fri Mar 03 11:00:00 AEDT 2023', 
                            end = 'Fri Mar 03 11:00:00 AEDT 2023', ), 
                        ticket_baggage = openapi_client.models.ticket_baggage.TicketBaggage(
                            @type = 'TicketBaggage', 
                            quantity = 2, 
                            measurement = Small checked suitcases usually are 23-24 inches on the longest size, medium ones 25-27 inches, and large ones in 28-32 inches, ), 
                        connection_ind = True, )
                    ],
                ticket_price = openapi_client.models.ticket_price.TicketPrice(
                    @type = 'TicketPrice', 
                    fare_calculation = 'LON BA SIN R235.00YEE1Y BA LON R235.00YEE1Y END ROE0.645487', 
                    fare_breakdown = '', 
                    currency_code = openapi_client.models.currency_code.CurrencyCode(
                        value = 'USD', 
                        code_authority = 'ISO 4217', 
                        decimal_place = 4, 
                        decimal_authority = 'ISO 4217', ), 
                    base = 1.337, 
                    taxes = openapi_client.models.paid_taxes.PaidTaxes(
                        @type = 'PaidTaxesDetail', 
                        total_taxes = 220.12, ), 
                    fees = openapi_client.models.fees.Fees(
                        @type = 'FeesDetail', 
                        total_fees = 111.11, ), 
                    total = 1.337, 
                    commission = openapi_client.models.commission.Commission(
                        @type = 'Commission', 
                        application = 'Full', ), 
                    filed_amount = openapi_client.models.filed_amount.FiledAmount(
                        value = 43.3422, 
                        currency_code = 'USD', 
                        code_authority = 'Australian Dollar', 
                        decimal_place = 3, 
                        decimal_authority = 'ISO 4217', ), 
                    paid_taxes = openapi_client.models.taxes.Taxes(
                        @type = 'TaxesDetail', 
                        total_taxes = 330.1, 
                        tax_info = [
                            openapi_client.models.tax_info.TaxInfo(
                                tax_code = 'XF', 
                                amount = 1.337, 
                                tax_breakdown = [
                                    openapi_client.models.tax_breakdown.TaxBreakdown(
                                        airport_code = 'MIA', 
                                        amount = 1.337, )
                                    ], )
                            ], ), 
                    i_t_fare_ind = True, 
                    b_t_fare_ind = False, 
                    additional_collection = openapi_client.models.filed_amount.FiledAmount(
                        value = 43.3422, 
                        currency_code = 'USD', 
                        code_authority = 'Australian Dollar', 
                        decimal_place = 3, 
                        decimal_authority = 'ISO 4217', ), 
                    net_amount = openapi_client.models.alternate_amount.AlternateAmount(
                        amount = 43.3422, 
                        currency_code = 'USD', 
                        decimal_place = 3, 
                        fare_calculation = 'LON BA SIN R 234.00 BA LON R 234.00NUC468.00END', 
                        rate_of_exchange = 1.234562, ), ),
        )
        """

    def testTicket(self):
        """Test Ticket"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
