# coding: utf-8

"""
    Akaris Travels Air

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 11.10.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

import openapi_client
from openapi_client.models.ticket_price import TicketPrice  # noqa: E501
from openapi_client.rest import ApiException

class TestTicketPrice(unittest.TestCase):
    """TicketPrice unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test TicketPrice
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TicketPrice`
        """
        model = openapi_client.models.ticket_price.TicketPrice()  # noqa: E501
        if include_optional :
            return TicketPrice(
                type = 'TicketPrice', 
                fare_calculation = 'LON BA SIN R235.00YEE1Y BA LON R235.00YEE1Y END ROE0.645487', 
                fare_breakdown = '', 
                currency_code = openapi_client.models.currency_code.CurrencyCode(
                    value = 'USD', 
                    code_authority = 'ISO 4217', 
                    decimal_place = 4, 
                    decimal_authority = 'ISO 4217', ), 
                base = 1.337, 
                taxes = openapi_client.models.paid_taxes.PaidTaxes(
                    @type = 'PaidTaxesDetail', 
                    total_taxes = 220.12, ), 
                fees = openapi_client.models.fees.Fees(
                    @type = 'FeesDetail', 
                    total_fees = 111.11, ), 
                total = 1.337, 
                commission = openapi_client.models.commission.Commission(
                    @type = 'Commission', 
                    application = 'Full', ), 
                filed_amount = openapi_client.models.filed_amount.FiledAmount(
                    value = 43.3422, 
                    currency_code = 'USD', 
                    code_authority = 'Australian Dollar', 
                    decimal_place = 3, 
                    decimal_authority = 'ISO 4217', ), 
                paid_taxes = openapi_client.models.taxes.Taxes(
                    @type = 'TaxesDetail', 
                    total_taxes = 330.1, 
                    tax_info = [
                        openapi_client.models.tax_info.TaxInfo(
                            tax_code = 'XF', 
                            currency_code = openapi_client.models.currency_code.CurrencyCode(
                                value = 'USD', 
                                code_authority = 'ISO 4217', 
                                decimal_place = 4, 
                                decimal_authority = 'ISO 4217', ), 
                            amount = 1.337, 
                            tax_breakdown = [
                                openapi_client.models.tax_breakdown.TaxBreakdown(
                                    airport_code = 'MIA', 
                                    amount = 1.337, )
                                ], )
                        ], ), 
                i_t_fare_ind = True, 
                b_t_fare_ind = False, 
                additional_collection = openapi_client.models.filed_amount.FiledAmount(
                    value = 43.3422, 
                    currency_code = 'USD', 
                    code_authority = 'Australian Dollar', 
                    decimal_place = 3, 
                    decimal_authority = 'ISO 4217', ), 
                net_amount = openapi_client.models.alternate_amount.AlternateAmount(
                    amount = 43.3422, 
                    currency_code = 'USD', 
                    decimal_place = 3, 
                    fare_calculation = 'LON BA SIN R 234.00 BA LON R 234.00NUC468.00END', 
                    rate_of_exchange = 1.234562, )
            )
        else :
            return TicketPrice(
                currency_code = openapi_client.models.currency_code.CurrencyCode(
                    value = 'USD', 
                    code_authority = 'ISO 4217', 
                    decimal_place = 4, 
                    decimal_authority = 'ISO 4217', ),
                base = 1.337,
                total = 1.337,
        )
        """

    def testTicketPrice(self):
        """Test TicketPrice"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
